#pragma once

// PLAYERUNKNOWN'S BATTLEGROUNDS (EARLY ACCESS v2.2.33) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

namespace Classes
{
//---------------------------------------------------------------------------
//Enums
//---------------------------------------------------------------------------

// Enum Engine.ETextGender
enum class ETextGender
{
	ETextGender__Masculine         = 0,
	ETextGender__Feminine          = 1,
	ETextGender__Neuter            = 2,
	ETextGender__ETextGender_MAX   = 3
};


// Enum Engine.EFormatArgumentType
enum class EFormatArgumentType
{
	EFormatArgumentType__Int       = 0,
	EFormatArgumentType__UInt      = 1,
	EFormatArgumentType__Float     = 2,
	EFormatArgumentType__Double    = 3,
	EFormatArgumentType__Text      = 4,
	EFormatArgumentType__Gender    = 5,
	EFormatArgumentType__EFormatArgumentType_MAX = 6
};


// Enum Engine.EEndPlayReason
enum class EEndPlayReason
{
	EEndPlayReason__Destroyed      = 0,
	EEndPlayReason__LevelTransition = 1,
	EEndPlayReason__EndPlayInEditor = 2,
	EEndPlayReason__RemovedFromWorld = 3,
	EEndPlayReason__Quit           = 4,
	EEndPlayReason__EEndPlayReason_MAX = 5
};


// Enum Engine.ENavPathEvent
enum class ENavPathEvent
{
	ENavPathEvent__Cleared         = 0,
	ENavPathEvent__NewPath         = 1,
	ENavPathEvent__UpdatedDueToGoalMoved = 2,
	ENavPathEvent__UpdatedDueToNavigationChanged = 3,
	ENavPathEvent__Invalidated     = 4,
	ENavPathEvent__RePathFailed    = 5,
	ENavPathEvent__MetaPathUpdate  = 6,
	ENavPathEvent__Custom          = 7,
	ENavPathEvent__ENavPathEvent_MAX = 8
};


// Enum Engine.ETickingGroup
enum class ETickingGroup
{
	TG_PrePhysics                  = 0,
	TG_StartPhysics                = 1,
	TG_DuringPhysics               = 2,
	TG_EndPhysics                  = 3,
	TG_PostPhysics                 = 4,
	TG_PostUpdateWork              = 5,
	TG_LastDemotable               = 6,
	TG_NewlySpawned                = 7,
	TG_MAX                         = 8
};


// Enum Engine.EComponentCreationMethod
enum class EComponentCreationMethod
{
	EComponentCreationMethod__Native = 0,
	EComponentCreationMethod__SimpleConstructionScript = 1,
	EComponentCreationMethod__UserConstructionScript = 2,
	EComponentCreationMethod__Instance = 3,
	EComponentCreationMethod__EComponentCreationMethod_MAX = 4
};


// Enum Engine.EPlaneConstraintAxisSetting
enum class EPlaneConstraintAxisSetting
{
	EPlaneConstraintAxisSetting__Custom = 0,
	EPlaneConstraintAxisSetting__X = 1,
	EPlaneConstraintAxisSetting__Y = 2,
	EPlaneConstraintAxisSetting__Z = 3,
	EPlaneConstraintAxisSetting__UseGlobalPhysicsSetting = 4,
	EPlaneConstraintAxisSetting__EPlaneConstraintAxisSetting_MAX = 5
};


// Enum Engine.EInterpToBehaviourType
enum class EInterpToBehaviourType
{
	EInterpToBehaviourType__OneShot = 0,
	EInterpToBehaviourType__OneShot_Reverse = 1,
	EInterpToBehaviourType__Loop_Reset = 2,
	EInterpToBehaviourType__PingPong = 3,
	EInterpToBehaviourType__EInterpToBehaviourType_MAX = 4
};


// Enum Engine.EPlatformInterfaceDataType
enum class EPlatformInterfaceDataType
{
	PIDT_None                      = 0,
	PIDT_Int                       = 1,
	PIDT_Float                     = 2,
	PIDT_String                    = 3,
	PIDT_Object                    = 4,
	PIDT_Custom                    = 5,
	PIDT_MAX                       = 6
};


// Enum Engine.EMovementMode
enum class EMovementMode
{
	MOVE_None                      = 0,
	MOVE_Walking                   = 1,
	MOVE_NavWalking                = 2,
	MOVE_Falling                   = 3,
	MOVE_Swimming                  = 4,
	MOVE_Flying                    = 5,
	MOVE_Custom                    = 6,
	MOVE_MAX                       = 7
};


// Enum Engine.ENetworkFailure
enum class ENetworkFailure
{
	ENetworkFailure__NetDriverAlreadyExists = 0,
	ENetworkFailure__NetDriverCreateFailure = 1,
	ENetworkFailure__NetDriverListenFailure = 2,
	ENetworkFailure__ConnectionLost = 3,
	ENetworkFailure__ConnectionTimeout = 4,
	ENetworkFailure__FailureReceived = 5,
	ENetworkFailure__OutdatedClient = 6,
	ENetworkFailure__OutdatedServer = 7,
	ENetworkFailure__PendingConnectionFailure = 8,
	ENetworkFailure__NetGuidMismatch = 9,
	ENetworkFailure__NetChecksumMismatch = 10,
	ENetworkFailure__ENetworkFailure_MAX = 11
};


// Enum Engine.ETravelFailure
enum class ETravelFailure
{
	ETravelFailure__NoLevel        = 0,
	ETravelFailure__LoadMapFailure = 1,
	ETravelFailure__InvalidURL     = 2,
	ETravelFailure__PackageMissing = 3,
	ETravelFailure__PackageVersion = 4,
	ETravelFailure__NoDownload     = 5,
	ETravelFailure__TravelFailure  = 6,
	ETravelFailure__CheatCommands  = 7,
	ETravelFailure__PendingNetGameCreateFailure = 8,
	ETravelFailure__CloudSaveFailure = 9,
	ETravelFailure__ServerTravelFailure = 10,
	ETravelFailure__ClientTravelFailure = 11,
	ETravelFailure__ETravelFailure_MAX = 12
};


// Enum Engine.EScreenOrientation
enum class EScreenOrientation
{
	EScreenOrientation__Unknown    = 0,
	EScreenOrientation__Portrait   = 1,
	EScreenOrientation__PortraitUpsideDown = 2,
	EScreenOrientation__LandscapeLeft = 3,
	EScreenOrientation__LandscapeRight = 4,
	EScreenOrientation__FaceUp     = 5,
	EScreenOrientation__FaceDown   = 6,
	EScreenOrientation__EScreenOrientation_MAX = 7
};


// Enum Engine.EOverlapFilterOption
enum class EOverlapFilterOption
{
	OverlapFilter_All              = 0,
	OverlapFilter_DynamicOnly      = 1,
	OverlapFilter_StaticOnly       = 2,
	OverlapFilter_MAX              = 3
};


// Enum Engine.EObjectTypeQuery
enum class EObjectTypeQuery
{
	ObjectTypeQuery1               = 0,
	ObjectTypeQuery2               = 1,
	ObjectTypeQuery3               = 2,
	ObjectTypeQuery4               = 3,
	ObjectTypeQuery5               = 4,
	ObjectTypeQuery6               = 5,
	ObjectTypeQuery7               = 6,
	ObjectTypeQuery8               = 7,
	ObjectTypeQuery9               = 8,
	ObjectTypeQuery10              = 9,
	ObjectTypeQuery11              = 10,
	ObjectTypeQuery12              = 11,
	ObjectTypeQuery13              = 12,
	ObjectTypeQuery14              = 13,
	ObjectTypeQuery15              = 14,
	ObjectTypeQuery16              = 15,
	ObjectTypeQuery17              = 16,
	ObjectTypeQuery18              = 17,
	ObjectTypeQuery19              = 18,
	ObjectTypeQuery20              = 19,
	ObjectTypeQuery21              = 20,
	ObjectTypeQuery22              = 21,
	ObjectTypeQuery23              = 22,
	ObjectTypeQuery24              = 23,
	ObjectTypeQuery25              = 24,
	ObjectTypeQuery26              = 25,
	ObjectTypeQuery27              = 26,
	ObjectTypeQuery28              = 27,
	ObjectTypeQuery29              = 28,
	ObjectTypeQuery30              = 29,
	ObjectTypeQuery31              = 30,
	ObjectTypeQuery32              = 31,
	ObjectTypeQuery_MAX            = 32,
	EObjectTypeQuery_MAX           = 33
};


// Enum Engine.EDrawDebugTrace
enum class EDrawDebugTrace
{
	EDrawDebugTrace__None          = 0,
	EDrawDebugTrace__ForOneFrame   = 1,
	EDrawDebugTrace__ForDuration   = 2,
	EDrawDebugTrace__Persistent    = 3,
	EDrawDebugTrace__EDrawDebugTrace_MAX = 4
};


// Enum Engine.ETraceTypeQuery
enum class ETraceTypeQuery
{
	TraceTypeQuery1                = 0,
	TraceTypeQuery2                = 1,
	TraceTypeQuery3                = 2,
	TraceTypeQuery4                = 3,
	TraceTypeQuery5                = 4,
	TraceTypeQuery6                = 5,
	TraceTypeQuery7                = 6,
	TraceTypeQuery8                = 7,
	TraceTypeQuery9                = 8,
	TraceTypeQuery10               = 9,
	TraceTypeQuery11               = 10,
	TraceTypeQuery12               = 11,
	TraceTypeQuery13               = 12,
	TraceTypeQuery14               = 13,
	TraceTypeQuery15               = 14,
	TraceTypeQuery16               = 15,
	TraceTypeQuery17               = 16,
	TraceTypeQuery18               = 17,
	TraceTypeQuery19               = 18,
	TraceTypeQuery20               = 19,
	TraceTypeQuery21               = 20,
	TraceTypeQuery22               = 21,
	TraceTypeQuery23               = 22,
	TraceTypeQuery24               = 23,
	TraceTypeQuery25               = 24,
	TraceTypeQuery26               = 25,
	TraceTypeQuery27               = 26,
	TraceTypeQuery28               = 27,
	TraceTypeQuery29               = 28,
	TraceTypeQuery30               = 29,
	TraceTypeQuery31               = 30,
	TraceTypeQuery32               = 31,
	TraceTypeQuery_MAX             = 32,
	ETraceTypeQuery_MAX            = 33
};


// Enum Engine.ECollisionChannel
enum class ECollisionChannel
{
	ECC_WorldStatic                = 0,
	ECC_WorldDynamic               = 1,
	ECC_Pawn                       = 2,
	ECC_Visibility                 = 3,
	ECC_Camera                     = 4,
	ECC_PhysicsBody                = 5,
	ECC_Vehicle                    = 6,
	ECC_Destructible               = 7,
	ECC_EngineTraceChannel1        = 8,
	ECC_EngineTraceChannel2        = 9,
	ECC_EngineTraceChannel3        = 10,
	ECC_EngineTraceChannel4        = 11,
	ECC_EngineTraceChannel5        = 12,
	ECC_EngineTraceChannel6        = 13,
	ECC_GameTraceChannel1          = 14,
	ECC_GameTraceChannel2          = 15,
	ECC_GameTraceChannel3          = 16,
	ECC_GameTraceChannel4          = 17,
	ECC_GameTraceChannel5          = 18,
	ECC_GameTraceChannel6          = 19,
	ECC_GameTraceChannel7          = 20,
	ECC_GameTraceChannel8          = 21,
	ECC_GameTraceChannel9          = 22,
	ECC_GameTraceChannel10         = 23,
	ECC_GameTraceChannel11         = 24,
	ECC_GameTraceChannel12         = 25,
	ECC_GameTraceChannel13         = 26,
	ECC_GameTraceChannel14         = 27,
	ECC_GameTraceChannel15         = 28,
	ECC_GameTraceChannel16         = 29,
	ECC_GameTraceChannel17         = 30,
	ECC_GameTraceChannel18         = 31,
	ECC_OverlapAll_Deprecated      = 32,
	ECC_MAX                        = 33
};


// Enum Engine.EMoveComponentAction
enum class EMoveComponentAction
{
	EMoveComponentAction__Move     = 0,
	EMoveComponentAction__Stop     = 1,
	EMoveComponentAction__Return   = 2,
	EMoveComponentAction__EMoveComponentAction_MAX = 3
};


// Enum Engine.EQuitPreference
enum class EQuitPreference
{
	EQuitPreference__Quit          = 0,
	EQuitPreference__Background    = 1,
	EQuitPreference__EQuitPreference_MAX = 2
};


// Enum Engine.EViewModeIndex
enum class EViewModeIndex
{
	VMI_BrushWireframe             = 0,
	VMI_Wireframe                  = 1,
	VMI_Unlit                      = 2,
	VMI_Lit                        = 3,
	VMI_Lit_DetailLighting         = 4,
	VMI_LightingOnly               = 5,
	VMI_LightComplexity            = 6,
	VMI_ShaderComplexity           = 7,
	VMI_LightmapDensity            = 8,
	VMI_LitLightmapDensity         = 9,
	VMI_ReflectionOverride         = 10,
	VMI_VisualizeBuffer            = 11,
	VMI_StationaryLightOverlap     = 12,
	VMI_CollisionPawn              = 13,
	VMI_CollisionVisibility        = 14,
	VMI_LODColoration              = 15,
	VMI_QuadOverdraw               = 16,
	VMI_PrimitiveDistanceAccuracy  = 17,
	VMI_MeshUVDensityAccuracy      = 18,
	VMI_ShaderComplexityWithQuadOverdraw = 19,
	VMI_HLODColoration             = 20,
	VMI_GroupLODColoration         = 21,
	VMI_MaterialTextureScaleAccuracy = 22,
	VMI_RequiredTextureResolution  = 23,
	VMI_Max                        = 24,
	VMI_Unknown                    = 25
};


// Enum Engine.EDemoPlayFailure
enum class EDemoPlayFailure
{
	EDemoPlayFailure__Generic      = 0,
	EDemoPlayFailure__DemoNotFound = 1,
	EDemoPlayFailure__Corrupt      = 2,
	EDemoPlayFailure__InvalidVersion = 3,
	EDemoPlayFailure__EDemoPlayFailure_MAX = 4
};


// Enum Engine.ETravelType
enum class ETravelType
{
	TRAVEL_Absolute                = 0,
	TRAVEL_Partial                 = 1,
	TRAVEL_Relative                = 2,
	TRAVEL_MAX                     = 3
};


// Enum Engine.ENetworkLagState
enum class ENetworkLagState
{
	ENetworkLagState__NotLagging   = 0,
	ENetworkLagState__Lagging      = 1,
	ENetworkLagState__ENetworkLagState_MAX = 2
};


// Enum Engine.EMouseLockMode
enum class EMouseLockMode
{
	EMouseLockMode__DoNotLock      = 0,
	EMouseLockMode__LockOnCapture  = 1,
	EMouseLockMode__LockAlways     = 2,
	EMouseLockMode__EMouseLockMode_MAX = 3
};


// Enum Engine.EMouseCaptureMode
enum class EMouseCaptureMode
{
	EMouseCaptureMode__NoCapture   = 0,
	EMouseCaptureMode__CapturePermanently = 1,
	EMouseCaptureMode__CapturePermanently_IncludingInitialMouseDown = 2,
	EMouseCaptureMode__CaptureDuringMouseDown = 3,
	EMouseCaptureMode__CaptureDuringRightMouseDown = 4,
	EMouseCaptureMode__EMouseCaptureMode_MAX = 5
};


// Enum Engine.EInputEvent
enum class EInputEvent
{
	IE_Pressed                     = 0,
	IE_Released                    = 1,
	IE_Repeat                      = 2,
	IE_DoubleClick                 = 3,
	IE_Axis                        = 4,
	IE_MAX                         = 5
};


// Enum Engine.EIndoorOutdoorMask
enum class EIndoorOutdoorMask
{
	IOM_NONE                       = 0,
	IOM_INDOOR                     = 1,
	IOM_OUTDOOR                    = 2,
	IOM_BOTH                       = 3,
	IOM_MAX                        = 4
};


// Enum Engine.EMeshBufferAccess
enum class EMeshBufferAccess
{
	EMeshBufferAccess__Default     = 0,
	EMeshBufferAccess__ForceCPUAndGPU = 1,
	EMeshBufferAccess__EMeshBufferAccess_MAX = 2
};


// Enum Engine.ESpawnActorCollisionHandlingMethod
enum class ESpawnActorCollisionHandlingMethod
{
	ESpawnActorCollisionHandlingMethod__Undefined = 0,
	ESpawnActorCollisionHandlingMethod__AlwaysSpawn = 1,
	ESpawnActorCollisionHandlingMethod__AdjustIfPossibleButAlwaysSpawn = 2,
	ESpawnActorCollisionHandlingMethod__AdjustIfPossibleButDontSpawnIfColliding = 3,
	ESpawnActorCollisionHandlingMethod__DontSpawnIfColliding = 4,
	ESpawnActorCollisionHandlingMethod__ESpawnActorCollisionHandlingMethod_MAX = 5
};


// Enum Engine.EConstraintFrame
enum class EConstraintFrame
{
	EConstraintFrame__Frame1       = 0,
	EConstraintFrame__Frame2       = 1,
	EConstraintFrame__EConstraintFrame_MAX = 2
};


// Enum Engine.EAngularConstraintMotion
enum class EAngularConstraintMotion
{
	ACM_Free                       = 0,
	ACM_Limited                    = 1,
	ACM_Locked                     = 2,
	ACM_MAX                        = 3
};


// Enum Engine.EComponentSocketType
enum class EComponentSocketType
{
	EComponentSocketType__Invalid  = 0,
	EComponentSocketType__Bone     = 1,
	EComponentSocketType__Socket   = 2,
	EComponentSocketType__EComponentSocketType_MAX = 3
};


// Enum Engine.EComponentMobility
enum class EComponentMobility
{
	EComponentMobility__Static     = 0,
	EComponentMobility__Stationary = 1,
	EComponentMobility__Movable    = 2,
	EComponentMobility__EComponentMobility_MAX = 3
};


// Enum Engine.EPhysicalSurface
enum class EPhysicalSurface
{
	SurfaceType_Default            = 0,
	SurfaceType1                   = 1,
	SurfaceType2                   = 2,
	SurfaceType3                   = 3,
	SurfaceType4                   = 4,
	SurfaceType5                   = 5,
	SurfaceType6                   = 6,
	SurfaceType7                   = 7,
	SurfaceType8                   = 8,
	SurfaceType9                   = 9,
	SurfaceType10                  = 10,
	SurfaceType11                  = 11,
	SurfaceType12                  = 12,
	SurfaceType13                  = 13,
	SurfaceType14                  = 14,
	SurfaceType15                  = 15,
	SurfaceType16                  = 16,
	SurfaceType17                  = 17,
	SurfaceType18                  = 18,
	SurfaceType19                  = 19,
	SurfaceType20                  = 20,
	SurfaceType21                  = 21,
	SurfaceType22                  = 22,
	SurfaceType23                  = 23,
	SurfaceType24                  = 24,
	SurfaceType25                  = 25,
	SurfaceType26                  = 26,
	SurfaceType27                  = 27,
	SurfaceType28                  = 28,
	SurfaceType29                  = 29,
	SurfaceType30                  = 30,
	SurfaceType31                  = 31,
	SurfaceType32                  = 32,
	SurfaceType33                  = 33,
	SurfaceType34                  = 34,
	SurfaceType35                  = 35,
	SurfaceType36                  = 36,
	SurfaceType37                  = 37,
	SurfaceType38                  = 38,
	SurfaceType39                  = 39,
	SurfaceType40                  = 40,
	SurfaceType41                  = 41,
	SurfaceType42                  = 42,
	SurfaceType43                  = 43,
	SurfaceType44                  = 44,
	SurfaceType45                  = 45,
	SurfaceType46                  = 46,
	SurfaceType47                  = 47,
	SurfaceType48                  = 48,
	SurfaceType49                  = 49,
	SurfaceType50                  = 50,
	SurfaceType51                  = 51,
	SurfaceType52                  = 52,
	SurfaceType53                  = 53,
	SurfaceType54                  = 54,
	SurfaceType55                  = 55,
	SurfaceType56                  = 56,
	SurfaceType57                  = 57,
	SurfaceType58                  = 58,
	SurfaceType59                  = 59,
	SurfaceType60                  = 60,
	SurfaceType61                  = 61,
	SurfaceType62                  = 62,
	SurfaceType_Max                = 63,
	EPhysicalSurface_MAX           = 64
};


// Enum Engine.EWalkableSlopeBehavior
enum class EWalkableSlopeBehavior
{
	WalkableSlope_Default          = 0,
	WalkableSlope_Increase         = 1,
	WalkableSlope_Decrease         = 2,
	WalkableSlope_Unwalkable       = 3,
	WalkableSlope_Max              = 4
};


// Enum Engine.ERotatorQuantization
enum class ERotatorQuantization
{
	ERotatorQuantization__ByteComponents = 0,
	ERotatorQuantization__ShortComponents = 1,
	ERotatorQuantization__ERotatorQuantization_MAX = 2
};


// Enum Engine.EVectorQuantization
enum class EVectorQuantization
{
	EVectorQuantization__RoundWholeNumber = 0,
	EVectorQuantization__RoundOneDecimal = 1,
	EVectorQuantization__RoundTwoDecimals = 2,
	EVectorQuantization__EVectorQuantization_MAX = 3
};


// Enum Engine.EAutoPossessAI
enum class EAutoPossessAI
{
	EAutoPossessAI__Disabled       = 0,
	EAutoPossessAI__PlacedInWorld  = 1,
	EAutoPossessAI__Spawned        = 2,
	EAutoPossessAI__PlacedInWorldOrSpawned = 3,
	EAutoPossessAI__EAutoPossessAI_MAX = 4
};


// Enum Engine.EAutoReceiveInput
enum class EAutoReceiveInput
{
	EAutoReceiveInput__Disabled    = 0,
	EAutoReceiveInput__Player0     = 1,
	EAutoReceiveInput__Player1     = 2,
	EAutoReceiveInput__Player2     = 3,
	EAutoReceiveInput__Player3     = 4,
	EAutoReceiveInput__Player4     = 5,
	EAutoReceiveInput__Player5     = 6,
	EAutoReceiveInput__Player6     = 7,
	EAutoReceiveInput__Player7     = 8,
	EAutoReceiveInput__EAutoReceiveInput_MAX = 9
};


// Enum Engine.ENetDormancy
enum class ENetDormancy
{
	DORM_Never                     = 0,
	DORM_Awake                     = 1,
	DORM_DormantAll                = 2,
	DORM_DormantPartial            = 3,
	DORM_Initial                   = 4,
	DORN_MAX                       = 5,
	ENetDormancy_MAX               = 6
};


// Enum Engine.ENetRole
enum class ENetRole
{
	ROLE_None                      = 0,
	ROLE_SimulatedProxy            = 1,
	ROLE_AutonomousProxy           = 2,
	ROLE_Authority                 = 3,
	ROLE_MAX                       = 4
};


// Enum Engine.EUpdateRateShiftBucket
enum class EUpdateRateShiftBucket
{
	EUpdateRateShiftBucket__ShiftBucket0 = 0,
	EUpdateRateShiftBucket__ShiftBucket1 = 1,
	EUpdateRateShiftBucket__ShiftBucket2 = 2,
	EUpdateRateShiftBucket__ShiftBucket3 = 3,
	EUpdateRateShiftBucket__ShiftBucket4 = 4,
	EUpdateRateShiftBucket__ShiftBucket5 = 5,
	EUpdateRateShiftBucket__ShiftBucketMax = 6,
	EUpdateRateShiftBucket__EUpdateRateShiftBucket_MAX = 7
};


// Enum Engine.EShadowMapFlags
enum class EShadowMapFlags
{
	SMF_None                       = 0,
	SMF_Streamed                   = 1,
	SMF_MAX                        = 2
};


// Enum Engine.ELightMapPaddingType
enum class ELightMapPaddingType
{
	LMPT_NormalPadding             = 0,
	LMPT_PrePadding                = 1,
	LMPT_NoPadding                 = 2,
	LMPT_MAX                       = 3
};


// Enum Engine.ECollisionEnabled
enum class ECollisionEnabled
{
	ECollisionEnabled__NoCollision = 0,
	ECollisionEnabled__QueryOnly   = 1,
	ECollisionEnabled__PhysicsOnly = 2,
	ECollisionEnabled__QueryAndPhysics = 3,
	ECollisionEnabled__ECollisionEnabled_MAX = 4
};


// Enum Engine.ETimelineSigType
enum class ETimelineSigType
{
	ETS_EventSignature             = 0,
	ETS_FloatSignature             = 1,
	ETS_VectorSignature            = 2,
	ETS_LinearColorSignature       = 3,
	ETS_InvalidSignature           = 4,
	ETS_MAX                        = 5
};


// Enum Engine.ESleepFamily
enum class ESleepFamily
{
	ESleepFamily__Normal           = 0,
	ESleepFamily__Sensitive        = 1,
	ESleepFamily__Custom           = 2,
	ESleepFamily__ESleepFamily_MAX = 3
};


// Enum Engine.ERadialImpulseFalloff
enum class ERadialImpulseFalloff
{
	RIF_Constant                   = 0,
	RIF_Linear                     = 1,
	RIF_MAX                        = 2
};


// Enum Engine.EInputConsumeOptions
enum class EInputConsumeOptions
{
	ICO_ConsumeAll                 = 0,
	ICO_ConsumeBoundKeys           = 1,
	ICO_ConsumeNone                = 2,
	ICO_MAX                        = 3
};


// Enum Engine.EFilterInterpolationType
enum class EFilterInterpolationType
{
	BSIT_Average                   = 0,
	BSIT_Linear                    = 1,
	BSIT_Cubic                     = 2,
	BSIT_MAX                       = 3
};


// Enum Engine.ECollisionResponse
enum class ECollisionResponse
{
	ECR_Ignore                     = 0,
	ECR_Overlap                    = 1,
	ECR_Block                      = 2,
	ECR_MAX                        = 3
};


// Enum Engine.EPhysicsSceneType
enum class EPhysicsSceneType
{
	PST_Sync                       = 0,
	PST_Cloth                      = 1,
	PST_Async                      = 2,
	PST_MAX                        = 3
};


// Enum Engine.ENetworkSmoothingMode
enum class ENetworkSmoothingMode
{
	ENetworkSmoothingMode__Disabled = 0,
	ENetworkSmoothingMode__Linear  = 1,
	ENetworkSmoothingMode__Exponential = 2,
	ENetworkSmoothingMode__Replay  = 3,
	ENetworkSmoothingMode__ENetworkSmoothingMode_MAX = 4
};


// Enum Engine.EStanceMode
enum class EStanceMode
{
	STANCE_None                    = 0,
	STANCE_Stand                   = 1,
	STANCE_Crouch                  = 2,
	STANCE_Prone                   = 3,
	STANCE_MAX                     = 4
};


// Enum Engine.ETriangleSortAxis
enum class ETriangleSortAxis
{
	TSA_X_Axis                     = 0,
	TSA_Y_Axis                     = 1,
	TSA_Z_Axis                     = 2,
	TSA_MAX                        = 3
};


// Enum Engine.ETriangleSortOption
enum class ETriangleSortOption
{
	TRISORT_None                   = 0,
	TRISORT_CenterRadialDistance   = 1,
	TRISORT_Random                 = 2,
	TRISORT_MergeContiguous        = 3,
	TRISORT_Custom                 = 4,
	TRISORT_CustomLeftRight        = 5,
	TRISORT_MAX                    = 6
};


// Enum Engine.ELightingBuildQuality
enum class ELightingBuildQuality
{
	Quality_Preview                = 0,
	Quality_Medium                 = 1,
	Quality_High                   = 2,
	Quality_Production             = 3,
	Quality_MAX                    = 4
};


// Enum Engine.EMaterialSamplerType
enum class EMaterialSamplerType
{
	SAMPLERTYPE_Color              = 0,
	SAMPLERTYPE_Grayscale          = 1,
	SAMPLERTYPE_Alpha              = 2,
	SAMPLERTYPE_Normal             = 3,
	SAMPLERTYPE_Masks              = 4,
	SAMPLERTYPE_DistanceFieldFont  = 5,
	SAMPLERTYPE_LinearColor        = 6,
	SAMPLERTYPE_LinearGrayscale    = 7,
	SAMPLERTYPE_MAX                = 8
};


// Enum Engine.EMaterialTessellationMode
enum class EMaterialTessellationMode
{
	MTM_NoTessellation             = 0,
	MTM_FlatTessellation           = 1,
	MTM_PNTriangles                = 2,
	MTM_MAX                        = 3
};


// Enum Engine.EMaterialShadingModel
enum class EMaterialShadingModel
{
	MSM_Unlit                      = 0,
	MSM_DefaultLit                 = 1,
	MSM_Subsurface                 = 2,
	MSM_PreintegratedSkin          = 3,
	MSM_ClearCoat                  = 4,
	MSM_SubsurfaceProfile          = 5,
	MSM_TwoSidedFoliage            = 6,
	MSM_Hair                       = 7,
	MSM_Cloth                      = 8,
	MSM_Eye                        = 9,
	MSM_MAX                        = 10
};


// Enum Engine.EParticleCollisionMode
enum class EParticleCollisionMode
{
	EParticleCollisionMode__SceneDepth = 0,
	EParticleCollisionMode__DistanceField = 1,
	EParticleCollisionMode__EParticleCollisionMode_MAX = 2
};


// Enum Engine.ETrailWidthMode
enum class ETrailWidthMode
{
	ETrailWidthMode_FromCentre     = 0,
	ETrailWidthMode_FromFirst      = 1,
	ETrailWidthMode_FromSecond     = 2,
	ETrailWidthMode_MAX            = 3
};


// Enum Engine.EGBufferFormat
enum class EGBufferFormat
{
	EGBufferFormat__Force8BitsPerChannel = 0,
	EGBufferFormat__Default        = 1,
	EGBufferFormat__HighPrecisionNormals = 2,
	EGBufferFormat__Force16BitsPerChannel = 3,
	EGBufferFormat__EGBufferFormat_MAX = 4
};


// Enum Engine.ESceneCaptureCompositeMode
enum class ESceneCaptureCompositeMode
{
	SCCM_Overwrite                 = 0,
	SCCM_Additive                  = 1,
	SCCM_Composite                 = 2,
	SCCM_MAX                       = 3
};


// Enum Engine.ESceneCaptureSource
enum class ESceneCaptureSource
{
	SCS_SceneColorHDR              = 0,
	SCS_SceneColorHDRNoAlpha       = 1,
	SCS_FinalColorLDR              = 2,
	SCS_SceneColorSceneDepth       = 3,
	SCS_SceneDepth                 = 4,
	SCS_Normal                     = 5,
	SCS_BaseColor                  = 6,
	SCS_MAX                        = 7
};


// Enum Engine.ETranslucentSortPolicy
enum class ETranslucentSortPolicy
{
	ETranslucentSortPolicy__SortByDistance = 0,
	ETranslucentSortPolicy__SortByProjectedZ = 1,
	ETranslucentSortPolicy__SortAlongAxis = 2,
	ETranslucentSortPolicy__ETranslucentSortPolicy_MAX = 3
};


// Enum Engine.ERefractionMode
enum class ERefractionMode
{
	RM_IndexOfRefraction           = 0,
	RM_PixelNormalOffset           = 1,
	RM_MAX                         = 2
};


// Enum Engine.ETranslucencyLightingMode
enum class ETranslucencyLightingMode
{
	TLM_VolumetricNonDirectional   = 0,
	TLM_VolumetricDirectional      = 1,
	TLM_VolumetricPerVertexNonDirectional = 2,
	TLM_VolumetricPerVertexDirectional = 3,
	TLM_Surface                    = 4,
	TLM_SurfacePerPixelLighting    = 5,
	TLM_MAX                        = 6
};


// Enum Engine.ESamplerSourceMode
enum class ESamplerSourceMode
{
	SSM_FromTextureAsset           = 0,
	SSM_Wrap_WorldGroupSettings    = 1,
	SSM_Clamp_WorldGroupSettings   = 2,
	SSM_MAX                        = 3
};


// Enum Engine.EBlendMode
enum class EBlendMode
{
	BLEND_Opaque                   = 0,
	BLEND_Masked                   = 1,
	BLEND_Translucent              = 2,
	BLEND_Additive                 = 3,
	BLEND_Modulate                 = 4,
	BLEND_AlphaComposite           = 5,
	BLEND_MAX                      = 6
};


// Enum Engine.EIndirectLightingCacheQuality
enum class EIndirectLightingCacheQuality
{
	ILCQ_Off                       = 0,
	ILCQ_Point                     = 1,
	ILCQ_Volume                    = 2,
	ILCQ_MAX                       = 3
};


// Enum Engine.ESceneDepthPriorityGroup
enum class ESceneDepthPriorityGroup
{
	SDPG_World                     = 0,
	SDPG_Foreground                = 1,
	SDPG_MAX                       = 2
};


// Enum Engine.EAttachLocation
enum class EAttachLocation
{
	EAttachLocation__KeepRelativeOffset = 0,
	EAttachLocation__KeepWorldPosition = 1,
	EAttachLocation__SnapToTarget  = 2,
	EAttachLocation__SnapToTargetIncludingScale = 3,
	EAttachLocation__EAttachLocation_MAX = 4
};


// Enum Engine.EDetachmentRule
enum class EDetachmentRule
{
	EDetachmentRule__KeepRelative  = 0,
	EDetachmentRule__KeepWorld     = 1,
	EDetachmentRule__EDetachmentRule_MAX = 2
};


// Enum Engine.EAttachmentRule
enum class EAttachmentRule
{
	EAttachmentRule__KeepRelative  = 0,
	EAttachmentRule__KeepWorld     = 1,
	EAttachmentRule__SnapToTarget  = 2,
	EAttachmentRule__EAttachmentRule_MAX = 3
};


// Enum Engine.EActorMetricsType
enum class EActorMetricsType
{
	METRICS_VERTS                  = 0,
	METRICS_TRIS                   = 1,
	METRICS_SECTIONS               = 2,
	METRICS_MAX                    = 3
};


// Enum Engine.EAspectRatioAxisConstraint
enum class EAspectRatioAxisConstraint
{
	AspectRatio_MaintainYFOV       = 0,
	AspectRatio_MaintainXFOV       = 1,
	AspectRatio_MajorAxisFOV       = 2,
	AspectRatio_MAX                = 3
};


// Enum Engine.ENodeEnabledState
enum class ENodeEnabledState
{
	ENodeEnabledState__Enabled     = 0,
	ENodeEnabledState__Disabled    = 1,
	ENodeEnabledState__DevelopmentOnly = 2,
	ENodeEnabledState__ENodeEnabledState_MAX = 3
};


// Enum Engine.ENodeAdvancedPins
enum class ENodeAdvancedPins
{
	ENodeAdvancedPins__NoPins      = 0,
	ENodeAdvancedPins__Shown       = 1,
	ENodeAdvancedPins__Hidden      = 2,
	ENodeAdvancedPins__ENodeAdvancedPins_MAX = 3
};


// Enum Engine.ENodeTitleType
enum class ENodeTitleType
{
	ENodeTitleType__FullTitle      = 0,
	ENodeTitleType__ListView       = 1,
	ENodeTitleType__EditableTitle  = 2,
	ENodeTitleType__MenuTitle      = 3,
	ENodeTitleType__MAX_TitleTypes = 4,
	ENodeTitleType__ENodeTitleType_MAX = 5
};


// Enum Engine.EEdGraphPinDirection
enum class EEdGraphPinDirection
{
	EGPD_Input                     = 0,
	EGPD_Output                    = 1,
	EGPD_MAX                       = 2
};


// Enum Engine.EBlueprintPinStyleType
enum class EBlueprintPinStyleType
{
	BPST_Original                  = 0,
	BPST_VariantA                  = 1,
	BPST_MAX                       = 2
};


// Enum Engine.EBlueprintCompileMode
enum class EBlueprintCompileMode
{
	EBlueprintCompileMode__Default = 0,
	EBlueprintCompileMode__Development = 1,
	EBlueprintCompileMode__FinalRelease = 2,
	EBlueprintCompileMode__EBlueprintCompileMode_MAX = 3
};


// Enum Engine.EBlueprintType
enum class EBlueprintType
{
	BPTYPE_Normal                  = 0,
	BPTYPE_Const                   = 1,
	BPTYPE_MacroLibrary            = 2,
	BPTYPE_Interface               = 3,
	BPTYPE_LevelScript             = 4,
	BPTYPE_FunctionLibrary         = 5,
	BPTYPE_MAX                     = 6
};


// Enum Engine.EBlueprintStatus
enum class EBlueprintStatus
{
	BS_Unknown                     = 0,
	BS_Dirty                       = 1,
	BS_Error                       = 2,
	BS_UpToDate                    = 3,
	BS_BeingCreated                = 4,
	BS_UpToDateWithWarnings        = 5,
	BS_MAX                         = 6
};


// Enum Engine.ERelativeTransformSpace
enum class ERelativeTransformSpace
{
	RTS_World                      = 0,
	RTS_Actor                      = 1,
	RTS_Component                  = 2,
	RTS_ParentBoneSpace            = 3,
	RTS_MAX                        = 4
};


// Enum Engine.EDetailMode
enum class EDetailMode
{
	DM_Low                         = 0,
	DM_Medium                      = 1,
	DM_High                        = 2,
	DM_MAX                         = 3
};


// Enum Engine.ESimplygonMaterialChannel
enum class ESimplygonMaterialChannel
{
	ESimplygonMaterialChannel__SG_MATERIAL_CHANNEL_AMBIENT = 0,
	ESimplygonMaterialChannel__SG_MATERIAL_CHANNEL_DIFFUSE = 1,
	ESimplygonMaterialChannel__SG_MATERIAL_CHANNEL_SPECULAR = 2,
	ESimplygonMaterialChannel__SG_MATERIAL_CHANNEL_OPACITY = 3,
	ESimplygonMaterialChannel__SG_MATERIAL_CHANNEL_EMISSIVE = 4,
	ESimplygonMaterialChannel__SG_MATERIAL_CHANNEL_NORMALS = 5,
	ESimplygonMaterialChannel__SG_MATERIAL_CHANNEL_DISPLACEMENT = 6,
	ESimplygonMaterialChannel__SG_MATERIAL_CHANNEL_BASECOLOR = 7,
	ESimplygonMaterialChannel__SG_MATERIAL_CHANNEL_ROUGHNESS = 8,
	ESimplygonMaterialChannel__SG_MATERIAL_CHANNEL_METALLIC = 9,
	ESimplygonMaterialChannel__SG_MATERIAL_CHANNEL_AO = 10,
	ESimplygonMaterialChannel__SG_MATERIAL_CHANNEL_SUBSURFACE = 11,
	ESimplygonMaterialChannel__SG_MATERIAL_CHANNEL_OPACITYMASK = 12,
	ESimplygonMaterialChannel__SG_MATERIAL_CHANNEL_MAX = 13
};


// Enum Engine.ESimplygonTextureResolution
enum class ESimplygonTextureResolution
{
	ESimplygonTextureResolution__TextureResolution = 0,
	ESimplygonTextureResolution__TextureResolution01 = 1,
	ESimplygonTextureResolution__TextureResolution02 = 2,
	ESimplygonTextureResolution__TextureResolution03 = 3,
	ESimplygonTextureResolution__TextureResolution04 = 4,
	ESimplygonTextureResolution__TextureResolution05 = 5,
	ESimplygonTextureResolution__TextureResolution06 = 6,
	ESimplygonTextureResolution__TextureResolution07 = 7,
	ESimplygonTextureResolution__TextureResolution_MAX = 8
};


// Enum Engine.ESimplygonColorChannels
enum class ESimplygonColorChannels
{
	ESimplygonColorChannels__RGBA  = 0,
	ESimplygonColorChannels__RGB   = 1,
	ESimplygonColorChannels__L     = 2,
	ESimplygonColorChannels__ESimplygonColorChannels_MAX = 3
};


// Enum Engine.ESimplygonTextureSamplingQuality
enum class ESimplygonTextureSamplingQuality
{
	ESimplygonTextureSamplingQuality__Poor = 0,
	ESimplygonTextureSamplingQuality__Low = 1,
	ESimplygonTextureSamplingQuality__Medium = 2,
	ESimplygonTextureSamplingQuality__High = 3,
	ESimplygonTextureSamplingQuality__ESimplygonTextureSamplingQuality_MAX = 4
};


// Enum Engine.ESimplygonCasterType
enum class ESimplygonCasterType
{
	ESimplygonCasterType__None     = 0,
	ESimplygonCasterType__Color    = 1,
	ESimplygonCasterType__Normals  = 2,
	ESimplygonCasterType__Opacity  = 3,
	ESimplygonCasterType__ESimplygonCasterType_MAX = 4
};


// Enum Engine.ESimplygonTextureStrech
enum class ESimplygonTextureStrech
{
	ESimplygonTextureStrech__None  = 0,
	ESimplygonTextureStrech__VerySmall = 1,
	ESimplygonTextureStrech__Small = 2,
	ESimplygonTextureStrech__Medium = 3,
	ESimplygonTextureStrech__Large = 4,
	ESimplygonTextureStrech__VeryLarge = 5,
	ESimplygonTextureStrech__ESimplygonTextureStrech_MAX = 6
};


// Enum Engine.EMaterialLODType
enum class EMaterialLODType
{
	EMaterialLODType__Off          = 0,
	EMaterialLODType__BakeTexture  = 1,
	EMaterialLODType__BakeVertexColor = 2,
	EMaterialLODType__Replace      = 3,
	EMaterialLODType__EMaterialLODType_MAX = 4
};


// Enum Engine.ESimplygonLODType
enum class ESimplygonLODType
{
	ESimplygonLODType__Reduction   = 0,
	ESimplygonLODType__Remeshing   = 1,
	ESimplygonLODType__ESimplygonLODType_MAX = 2
};


// Enum Engine.EOptimizationMetric
enum class EOptimizationMetric
{
	EOptimizationMetric__TrianglePercentage = 0,
	EOptimizationMetric__OnScreenSize = 1,
	EOptimizationMetric__MaxDeviation = 2,
	EOptimizationMetric__EOptimizationMetric_MAX = 3
};


// Enum Engine.EMaterialProxySmaplingQuality
enum class EMaterialProxySmaplingQuality
{
	EMaterialProxySmaplingQuality__Poor = 0,
	EMaterialProxySmaplingQuality__Low = 1,
	EMaterialProxySmaplingQuality__Medium = 2,
	EMaterialProxySmaplingQuality__High = 3,
	EMaterialProxySmaplingQuality__EMaterialProxySmaplingQuality_MAX = 4
};


// Enum Engine.EUVStrech
enum class EUVStrech
{
	EUVStrech__Small               = 0,
	EUVStrech__Medium              = 1,
	EUVStrech__Large               = 2,
	EUVStrech__VeryLarge           = 3,
	EUVStrech__EUVStrech_MAX       = 4
};


// Enum Engine.EMaterialMergeType
enum class EMaterialMergeType
{
	MaterialMergeType_Default      = 0,
	MaterialMergeType_Simplygon    = 1,
	MaterialMergeType_MAX          = 2
};


// Enum Engine.ETextureSizingType
enum class ETextureSizingType
{
	TextureSizingType_UseSingleTextureSize = 0,
	TextureSizingType_UseAutomaticBiasedSizes = 1,
	TextureSizingType_UseManualOverrideTextureSize = 2,
	TextureSizingType_UseSimplygonAutomaticSizing = 3,
	TextureSizingType_MAX          = 4
};


// Enum Engine.EMeshMergeType
enum class EMeshMergeType
{
	EMeshMergeType__MeshMergeType_Default = 0,
	EMeshMergeType__MeshMergeType_MergeActor = 1,
	EMeshMergeType__MeshMergeType_MAX = 2
};


// Enum Engine.EMeshLODSelectionType
enum class EMeshLODSelectionType
{
	EMeshLODSelectionType__AllLODs = 0,
	EMeshLODSelectionType__SpecificLOD = 1,
	EMeshLODSelectionType__CalculateLOD = 2,
	EMeshLODSelectionType__EMeshLODSelectionType_MAX = 3
};


// Enum Engine.ELandscapeCullingPrecision
enum class ELandscapeCullingPrecision
{
	ELandscapeCullingPrecision__High = 0,
	ELandscapeCullingPrecision__Medium = 1,
	ELandscapeCullingPrecision__Low = 2,
	ELandscapeCullingPrecision__ELandscapeCullingPrecision_MAX = 3
};


// Enum Engine.EPhysXAggregationMode
enum class EPhysXAggregationMode
{
	EPhysXAggregationMode__NoCollision = 0,
	EPhysXAggregationMode__BlockAllWithComplexAsSimple = 1,
	EPhysXAggregationMode__EPhysXAggregationMode_MAX = 2
};


// Enum Engine.EChartAggregationMode
enum class EChartAggregationMode
{
	EChartAggregationMode__TextureSize = 0,
	EChartAggregationMode__SurfaceArea = 1,
	EChartAggregationMode__PixelDensity = 2,
	EChartAggregationMode__UVSize  = 3,
	EChartAggregationMode__EChartAggregationMode_MAX = 4
};


// Enum Engine.EMeshFeatureImportance
enum class EMeshFeatureImportance
{
	EMeshFeatureImportance__Off    = 0,
	EMeshFeatureImportance__Lowest = 1,
	EMeshFeatureImportance__Low    = 2,
	EMeshFeatureImportance__Normal = 3,
	EMeshFeatureImportance__High   = 4,
	EMeshFeatureImportance__Highest = 5,
	EMeshFeatureImportance__EMeshFeatureImportance_MAX = 6
};


// Enum Engine.EBrushType
enum class EBrushType
{
	Brush_Default                  = 0,
	Brush_Add                      = 1,
	Brush_Subtract                 = 2,
	Brush_MAX                      = 3
};


// Enum Engine.ECsgOper
enum class ECsgOper
{
	CSG_Active                     = 0,
	CSG_Add                        = 1,
	CSG_Subtract                   = 2,
	CSG_Intersect                  = 3,
	CSG_Deintersect                = 4,
	CSG_None                       = 5,
	CSG_MAX                        = 6
};


// Enum Engine.ReverbPreset
enum class ReverbPreset
{
	REVERB_Default                 = 0,
	REVERB_Bathroom                = 1,
	REVERB_StoneRoom               = 2,
	REVERB_Auditorium              = 3,
	REVERB_ConcertHall             = 4,
	REVERB_Cave                    = 5,
	REVERB_Hallway                 = 6,
	REVERB_StoneCorridor           = 7,
	REVERB_Alley                   = 8,
	REVERB_Forest                  = 9,
	REVERB_City                    = 10,
	REVERB_Mountains               = 11,
	REVERB_Quarry                  = 12,
	REVERB_Plain                   = 13,
	REVERB_ParkingLot              = 14,
	REVERB_SewerPipe               = 15,
	REVERB_Underwater              = 16,
	REVERB_SmallRoom               = 17,
	REVERB_MediumRoom              = 18,
	REVERB_LargeRoom               = 19,
	REVERB_MediumHall              = 20,
	REVERB_LargeHall               = 21,
	REVERB_Plate                   = 22,
	REVERB_MAX                     = 23
};


// Enum Engine.EStreamingVolumeUsage
enum class EStreamingVolumeUsage
{
	SVB_Loading                    = 0,
	SVB_LoadingAndVisibility       = 1,
	SVB_VisibilityBlockingOnLoad   = 2,
	SVB_BlockingOnLoad             = 3,
	SVB_LoadingNotVisible          = 4,
	SVB_MAX                        = 5
};


// Enum Engine.ENavigationQueryResult
enum class ENavigationQueryResult
{
	ENavigationQueryResult__Invalid = 0,
	ENavigationQueryResult__Error  = 1,
	ENavigationQueryResult__Fail   = 2,
	ENavigationQueryResult__Success = 3,
	ENavigationQueryResult__ENavigationQueryResult_MAX = 4
};


// Enum Engine.ENavDataGatheringModeConfig
enum class ENavDataGatheringModeConfig
{
	ENavDataGatheringModeConfig__Invalid = 0,
	ENavDataGatheringModeConfig__Instant = 1,
	ENavDataGatheringModeConfig__Lazy = 2,
	ENavDataGatheringModeConfig__ENavDataGatheringModeConfig_MAX = 3
};


// Enum Engine.ENavDataGatheringMode
enum class ENavDataGatheringMode
{
	ENavDataGatheringMode__Default = 0,
	ENavDataGatheringMode__Instant = 1,
	ENavDataGatheringMode__Lazy    = 2,
	ENavDataGatheringMode__ENavDataGatheringMode_MAX = 3
};


// Enum Engine.ENavigationOptionFlag
enum class ENavigationOptionFlag
{
	ENavigationOptionFlag__Default = 0,
	ENavigationOptionFlag__Enable  = 1,
	ENavigationOptionFlag__Disable = 2,
	ENavigationOptionFlag__MAX     = 3,
	ENavigationOptionFlag__ENavigationOptionFlag_MAX = 4
};


// Enum Engine.EBlendableLocation
enum class EBlendableLocation
{
	BL_AfterTonemapping            = 0,
	BL_BeforeTonemapping           = 1,
	BL_BeforeTranslucency          = 2,
	BL_ReplacingTonemapper         = 3,
	BL_MAX                         = 4
};


// Enum Engine.EAutoExposureMethod
enum class EAutoExposureMethod
{
	AEM_Histogram                  = 0,
	AEM_Basic                      = 1,
	AEM_MAX                        = 2
};


// Enum Engine.EAntiAliasingMethod
enum class EAntiAliasingMethod
{
	AAM_None                       = 0,
	AAM_FXAA                       = 1,
	AAM_TemporalAA                 = 2,
	AAM_MSAA                       = 3,
	AAM_MAX                        = 4
};


// Enum Engine.EDepthOfFieldMethod
enum class EDepthOfFieldMethod
{
	DOFM_BokehDOF                  = 0,
	DOFM_Gaussian                  = 1,
	DOFM_CircleDOF                 = 2,
	DOFM_MAX                       = 3
};


// Enum Engine.ECameraAnimPlaySpace
enum class ECameraAnimPlaySpace
{
	ECameraAnimPlaySpace__CameraLocal = 0,
	ECameraAnimPlaySpace__World    = 1,
	ECameraAnimPlaySpace__UserDefined = 2,
	ECameraAnimPlaySpace__ECameraAnimPlaySpace_MAX = 3
};


// Enum Engine.ECameraProjectionMode
enum class ECameraProjectionMode
{
	ECameraProjectionMode__Perspective = 0,
	ECameraProjectionMode__Orthographic = 1,
	ECameraProjectionMode__ECameraProjectionMode_MAX = 2
};


// Enum Engine.EInitialOscillatorOffset
enum class EInitialOscillatorOffset
{
	EOO_OffsetRandom               = 0,
	EOO_OffsetZero                 = 1,
	EOO_MAX                        = 2
};


// Enum Engine.EViewTargetBlendFunction
enum class EViewTargetBlendFunction
{
	VTBlend_Linear                 = 0,
	VTBlend_Cubic                  = 1,
	VTBlend_EaseIn                 = 2,
	VTBlend_EaseOut                = 3,
	VTBlend_EaseInOut              = 4,
	VTBlend_MAX                    = 5
};


// Enum Engine.EControllerAnalogStick
enum class EControllerAnalogStick
{
	EControllerAnalogStick__CAS_LeftStick = 0,
	EControllerAnalogStick__CAS_RightStick = 1,
	EControllerAnalogStick__CAS_MAX = 2
};


// Enum Engine.ERichCurveExtrapolation
enum class ERichCurveExtrapolation
{
	RCCE_Cycle                     = 0,
	RCCE_CycleWithOffset           = 1,
	RCCE_Oscillate                 = 2,
	RCCE_Linear                    = 3,
	RCCE_Constant                  = 4,
	RCCE_None                      = 5,
	RCCE_MAX                       = 6
};


// Enum Engine.ERichCurveTangentWeightMode
enum class ERichCurveTangentWeightMode
{
	RCTWM_WeightedNone             = 0,
	RCTWM_WeightedArrive           = 1,
	RCTWM_WeightedLeave            = 2,
	RCTWM_WeightedBoth             = 3,
	RCTWM_MAX                      = 4
};


// Enum Engine.ERichCurveTangentMode
enum class ERichCurveTangentMode
{
	RCTM_Auto                      = 0,
	RCTM_User                      = 1,
	RCTM_Break                     = 2,
	RCTM_None                      = 3,
	RCTM_MAX                       = 4
};


// Enum Engine.ERichCurveInterpMode
enum class ERichCurveInterpMode
{
	RCIM_Linear                    = 0,
	RCIM_Constant                  = 1,
	RCIM_Cubic                     = 2,
	RCIM_None                      = 3,
	RCIM_MAX                       = 4
};


// Enum Engine.EDynamicForceFeedbackAction
enum class EDynamicForceFeedbackAction
{
	EDynamicForceFeedbackAction__Start = 0,
	EDynamicForceFeedbackAction__Update = 1,
	EDynamicForceFeedbackAction__Stop = 2,
	EDynamicForceFeedbackAction__EDynamicForceFeedbackAction_MAX = 3
};


// Enum Engine.EStandbyType
enum class EStandbyType
{
	STDBY_Rx                       = 0,
	STDBY_Tx                       = 1,
	STDBY_BadPing                  = 2,
	STDBY_MAX                      = 3
};


// Enum Engine.EVisibilityAggressiveness
enum class EVisibilityAggressiveness
{
	VIS_LeastAggressive            = 0,
	VIS_ModeratelyAggressive       = 1,
	VIS_MostAggressive             = 2,
	VIS_Max                        = 3
};


// Enum Engine.ERuntimeGenerationType
enum class ERuntimeGenerationType
{
	ERuntimeGenerationType__Static = 0,
	ERuntimeGenerationType__DynamicModifiersOnly = 1,
	ERuntimeGenerationType__Dynamic = 2,
	ERuntimeGenerationType__LegacyGeneration = 3,
	ERuntimeGenerationType__ERuntimeGenerationType_MAX = 4
};


// Enum Engine.ERecastPartitioning
enum class ERecastPartitioning
{
	ERecastPartitioning__Monotone  = 0,
	ERecastPartitioning__Watershed = 1,
	ERecastPartitioning__ChunkyMonotone = 2,
	ERecastPartitioning__ERecastPartitioning_MAX = 3
};


// Enum Engine.ENavCostDisplay
enum class ENavCostDisplay
{
	ENavCostDisplay__TotalCost     = 0,
	ENavCostDisplay__HeuristicOnly = 1,
	ENavCostDisplay__RealCostOnly  = 2,
	ENavCostDisplay__ENavCostDisplay_MAX = 3
};


// Enum Engine.ENavLinkDirection
enum class ENavLinkDirection
{
	ENavLinkDirection__BothWays    = 0,
	ENavLinkDirection__LeftToRight = 1,
	ENavLinkDirection__RightToLeft = 2,
	ENavLinkDirection__ENavLinkDirection_MAX = 3
};


// Enum Engine.EAnimLinkMethod
enum class EAnimLinkMethod
{
	EAnimLinkMethod__Absolute      = 0,
	EAnimLinkMethod__Relative      = 1,
	EAnimLinkMethod__Proportional  = 2,
	EAnimLinkMethod__EAnimLinkMethod_MAX = 3
};


// Enum Engine.EAnimInterpolationType
enum class EAnimInterpolationType
{
	EAnimInterpolationType__Linear = 0,
	EAnimInterpolationType__Step   = 1,
	EAnimInterpolationType__EAnimInterpolationType_MAX = 2
};


// Enum Engine.ECurveBlendOption
enum class ECurveBlendOption
{
	ECurveBlendOption__MaxWeight   = 0,
	ECurveBlendOption__NormalizeByWeight = 1,
	ECurveBlendOption__BlendByWeight = 2,
	ECurveBlendOption__ECurveBlendOption_MAX = 3
};


// Enum Engine.EAdditiveAnimationType
enum class EAdditiveAnimationType
{
	AAT_None                       = 0,
	AAT_LocalSpaceBase             = 1,
	AAT_RotationOffsetMeshSpace    = 2,
	AAT_MAX                        = 3
};


// Enum Engine.ENotifyFilterType
enum class ENotifyFilterType
{
	ENotifyFilterType__NoFiltering = 0,
	ENotifyFilterType__LOD         = 1,
	ENotifyFilterType__ENotifyFilterType_MAX = 2
};


// Enum Engine.EMontageNotifyTickType
enum class EMontageNotifyTickType
{
	EMontageNotifyTickType__Queued = 0,
	EMontageNotifyTickType__BranchingPoint = 1,
	EMontageNotifyTickType__EMontageNotifyTickType_MAX = 2
};


// Enum Engine.EBoneRotationSource
enum class EBoneRotationSource
{
	BRS_KeepComponentSpaceRotation = 0,
	BRS_KeepLocalSpaceRotation     = 1,
	BRS_CopyFromTarget             = 2,
	BRS_MAX                        = 3
};


// Enum Engine.EBoneControlSpace
enum class EBoneControlSpace
{
	BCS_WorldSpace                 = 0,
	BCS_ComponentSpace             = 1,
	BCS_ParentBoneSpace            = 2,
	BCS_BoneSpace                  = 3,
	BCS_MAX                        = 4
};


// Enum Engine.EBoneAxis
enum class EBoneAxis
{
	BA_X                           = 0,
	BA_Y                           = 1,
	BA_Z                           = 2,
	BA_MAX                         = 3
};


// Enum Engine.EBoneTranslationRetargetingMode
enum class EBoneTranslationRetargetingMode
{
	EBoneTranslationRetargetingMode__Animation = 0,
	EBoneTranslationRetargetingMode__Skeleton = 1,
	EBoneTranslationRetargetingMode__AnimationScaled = 2,
	EBoneTranslationRetargetingMode__AnimationRelative = 3,
	EBoneTranslationRetargetingMode__EBoneTranslationRetargetingMode_MAX = 4
};


// Enum Engine.ESkeletalMeshLODType
enum class ESkeletalMeshLODType
{
	ESkeletalMeshLODType__Reduction = 0,
	ESkeletalMeshLODType__Proxy    = 1,
	ESkeletalMeshLODType__ESkeletalMeshLODType_MAX = 2
};


// Enum Engine.SkeletalMeshOptimizationType
enum class SkeletalMeshOptimizationType
{
	SMOT_NumOfTriangles            = 0,
	SMOT_MaxDeviation              = 1,
	SMOT_ScreenSize                = 2,
	SMOT_MAX                       = 3
};


// Enum Engine.SkeletalMeshOptimizationImportance
enum class SkeletalMeshOptimizationImportance
{
	SMOI_Off                       = 0,
	SMOI_Lowest                    = 1,
	SMOI_Low                       = 2,
	SMOI_Normal                    = 3,
	SMOI_High                      = 4,
	SMOI_Highest                   = 5,
	SMOI_MAX                       = 6
};


// Enum Engine.EAnimGroupRole
enum class EAnimGroupRole
{
	EAnimGroupRole__CanBeLeader    = 0,
	EAnimGroupRole__AlwaysFollower = 1,
	EAnimGroupRole__AlwaysLeader   = 2,
	EAnimGroupRole__TransitionLeader = 3,
	EAnimGroupRole__EAnimGroupRole_MAX = 4
};


// Enum Engine.ERootMotionMode
enum class ERootMotionMode
{
	ERootMotionMode__NoRootMotionExtraction = 0,
	ERootMotionMode__IgnoreRootMotion = 1,
	ERootMotionMode__RootMotionFromEverything = 2,
	ERootMotionMode__RootMotionFromMontagesOnly = 3,
	ERootMotionMode__ERootMotionMode_MAX = 4
};


// Enum Engine.ERootMotionRootLock
enum class ERootMotionRootLock
{
	ERootMotionRootLock__RefPose   = 0,
	ERootMotionRootLock__AnimFirstFrame = 1,
	ERootMotionRootLock__Zero      = 2,
	ERootMotionRootLock__ERootMotionRootLock_MAX = 3
};


// Enum Engine.ERootMotionFinishVelocityMode
enum class ERootMotionFinishVelocityMode
{
	ERootMotionFinishVelocityMode__MaintainLastRootMotionVelocity = 0,
	ERootMotionFinishVelocityMode__SetVelocity = 1,
	ERootMotionFinishVelocityMode__ERootMotionFinishVelocityMode_MAX = 2
};


// Enum Engine.ERootMotionSourceSettingsFlags
enum class ERootMotionSourceSettingsFlags
{
	ERootMotionSourceSettingsFlags__UseSensitiveLiftoffCheck = 0,
	ERootMotionSourceSettingsFlags__DisablePartialEndTick = 1,
	ERootMotionSourceSettingsFlags__ERootMotionSourceSettingsFlags_MAX = 2
};


// Enum Engine.ERootMotionSourceStatusFlags
enum class ERootMotionSourceStatusFlags
{
	ERootMotionSourceStatusFlags__Prepared = 0,
	ERootMotionSourceStatusFlags__Finished = 1,
	ERootMotionSourceStatusFlags__MarkedForRemoval = 2,
	ERootMotionSourceStatusFlags__ERootMotionSourceStatusFlags_MAX = 3
};


// Enum Engine.ERootMotionAccumulateMode
enum class ERootMotionAccumulateMode
{
	ERootMotionAccumulateMode__Override = 0,
	ERootMotionAccumulateMode__Additive = 1,
	ERootMotionAccumulateMode__ERootMotionAccumulateMode_MAX = 2
};


// Enum Engine.EDOFMode
enum class EDOFMode
{
	EDOFMode__Default              = 0,
	EDOFMode__SixDOF               = 1,
	EDOFMode__YZPlane              = 2,
	EDOFMode__XZPlane              = 3,
	EDOFMode__XYPlane              = 4,
	EDOFMode__CustomPlane          = 5,
	EDOFMode__None                 = 6,
	EDOFMode__EDOFMode_MAX         = 7
};


// Enum Engine.EHasCustomNavigableGeometry
enum class EHasCustomNavigableGeometry
{
	EHasCustomNavigableGeometry__No = 0,
	EHasCustomNavigableGeometry__Yes = 1,
	EHasCustomNavigableGeometry__EvenIfNotCollidable = 2,
	EHasCustomNavigableGeometry__DontExport = 3,
	EHasCustomNavigableGeometry__EHasCustomNavigableGeometry_MAX = 4
};


// Enum Engine.ECanBeCharacterBase
enum class ECanBeCharacterBase
{
	ECB_No                         = 0,
	ECB_Yes                        = 1,
	ECB_Owner                      = 2,
	ECB_MAX                        = 3
};


// Enum Engine.EBoneSpaces
enum class EBoneSpaces
{
	EBoneSpaces__WorldSpace        = 0,
	EBoneSpaces__ComponentSpace    = 1,
	EBoneSpaces__EBoneSpaces_MAX   = 2
};


// Enum Engine.EMeshComponentUpdateFlag
enum class EMeshComponentUpdateFlag
{
	EMeshComponentUpdateFlag__AlwaysTickPoseAndRefreshBones = 0,
	EMeshComponentUpdateFlag__AlwaysTickPose = 1,
	EMeshComponentUpdateFlag__OnlyTickPoseWhenRendered = 2,
	EMeshComponentUpdateFlag__EMeshComponentUpdateFlag_MAX = 3
};


// Enum Engine.EPhysBodyOp
enum class EPhysBodyOp
{
	PBO_None                       = 0,
	PBO_Term                       = 1,
	PBO_Disable                    = 2,
	PBO_MAX                        = 3
};


// Enum Engine.EBoneVisibilityStatus
enum class EBoneVisibilityStatus
{
	BVS_HiddenByParent             = 0,
	BVS_Visible                    = 1,
	BVS_ExplicitlyHidden           = 2,
	BVS_MAX                        = 3
};


// Enum Engine.EPhysicsTransformUpdateMode
enum class EPhysicsTransformUpdateMode
{
	EPhysicsTransformUpdateMode__SimulationUpatesComponentTransform = 0,
	EPhysicsTransformUpdateMode__ComponentTransformIsKinematic = 1,
	EPhysicsTransformUpdateMode__EPhysicsTransformUpdateMode_MAX = 2
};


// Enum Engine.EAnimationMode
enum class EAnimationMode
{
	EAnimationMode__AnimationBlueprint = 0,
	EAnimationMode__AnimationSingleNode = 1,
	EAnimationMode__EAnimationMode_MAX = 2
};


// Enum Engine.EKinematicBonesUpdateToPhysics
enum class EKinematicBonesUpdateToPhysics
{
	EKinematicBonesUpdateToPhysics__SkipSimulatingBones = 0,
	EKinematicBonesUpdateToPhysics__SkipAllBones = 1,
	EKinematicBonesUpdateToPhysics__EKinematicBonesUpdateToPhysics_MAX = 2
};


// Enum Engine.ESplineCoordinateSpace
enum class ESplineCoordinateSpace
{
	ESplineCoordinateSpace__Local  = 0,
	ESplineCoordinateSpace__World  = 1,
	ESplineCoordinateSpace__ESplineCoordinateSpace_MAX = 2
};


// Enum Engine.ESplinePointType
enum class ESplinePointType
{
	ESplinePointType__Linear       = 0,
	ESplinePointType__Curve        = 1,
	ESplinePointType__Constant     = 2,
	ESplinePointType__CurveClamped = 3,
	ESplinePointType__CurveCustomTangent = 4,
	ESplinePointType__ESplinePointType_MAX = 5
};


// Enum Engine.FNavigationSystemRunMode
enum class FNavigationSystemRunMode
{
	FNavigationSystemRunMode__InvalidMode = 0,
	FNavigationSystemRunMode__GameMode = 1,
	FNavigationSystemRunMode__EditorMode = 2,
	FNavigationSystemRunMode__SimulationMode = 3,
	FNavigationSystemRunMode__PIEMode = 4,
	FNavigationSystemRunMode__FNavigationSystemRunMode_MAX = 5
};


// Enum Engine.EVehicleDifferential4W
enum class EVehicleDifferential4W
{
	EVehicleDifferential4W__LimitedSlip_4W = 0,
	EVehicleDifferential4W__LimitedSlip_FrontDrive = 1,
	EVehicleDifferential4W__LimitedSlip_RearDrive = 2,
	EVehicleDifferential4W__Open_4W = 3,
	EVehicleDifferential4W__Open_FrontDrive = 4,
	EVehicleDifferential4W__Open_RearDrive = 5,
	EVehicleDifferential4W__EVehicleDifferential4W_MAX = 6
};


// Enum Engine.ELinearConstraintMotion
enum class ELinearConstraintMotion
{
	LCM_Free                       = 0,
	LCM_Limited                    = 1,
	LCM_Locked                     = 2,
	LCM_MAX                        = 3
};


// Enum Engine.EAngularDriveMode
enum class EAngularDriveMode
{
	EAngularDriveMode__SLERP       = 0,
	EAngularDriveMode__TwistAndSwing = 1,
	EAngularDriveMode__EAngularDriveMode_MAX = 2
};


// Enum Engine.ESoundSpatializationAlgorithm
enum class ESoundSpatializationAlgorithm
{
	SPATIALIZATION_Default         = 0,
	SPATIALIZATION_HRTF            = 1,
	SPATIALIZATION_MAX             = 2
};


// Enum Engine.EAttenuationShape
enum class EAttenuationShape
{
	EAttenuationShape__Sphere      = 0,
	EAttenuationShape__Capsule     = 1,
	EAttenuationShape__Box         = 2,
	EAttenuationShape__Cone        = 3,
	EAttenuationShape__EAttenuationShape_MAX = 4
};


// Enum Engine.ESoundDistanceCalc
enum class ESoundDistanceCalc
{
	SOUNDDISTANCE_Normal           = 0,
	SOUNDDISTANCE_InfiniteXYPlane  = 1,
	SOUNDDISTANCE_InfiniteXZPlane  = 2,
	SOUNDDISTANCE_InfiniteYZPlane  = 3,
	SOUNDDISTANCE_MAX              = 4
};


// Enum Engine.ESoundDistanceModel
enum class ESoundDistanceModel
{
	ATTENUATION_Linear             = 0,
	ATTENUATION_Logarithmic        = 1,
	ATTENUATION_Inverse            = 2,
	ATTENUATION_LogReverse         = 3,
	ATTENUATION_NaturalSound       = 4,
	ATTENUATION_Custom             = 5,
	ATTENUATION_MAX                = 6
};


// Enum Engine.ESkyLightSourceType
enum class ESkyLightSourceType
{
	SLS_CapturedScene              = 0,
	SLS_SpecifiedCubemap           = 1,
	SLS_MAX                        = 2
};


// Enum Engine.ESplineMeshAxis
enum class ESplineMeshAxis
{
	ESplineMeshAxis__X             = 0,
	ESplineMeshAxis__Y             = 1,
	ESplineMeshAxis__Z             = 2,
	ESplineMeshAxis__ESplineMeshAxis_MAX = 3
};


// Enum Engine.EParticleSystemInsignificanceReaction
enum class EParticleSystemInsignificanceReaction
{
	EParticleSystemInsignificanceReaction__Auto = 0,
	EParticleSystemInsignificanceReaction__Complete = 1,
	EParticleSystemInsignificanceReaction__DisableTick = 2,
	EParticleSystemInsignificanceReaction__DisableTickAndKill = 3,
	EParticleSystemInsignificanceReaction__Num = 4,
	EParticleSystemInsignificanceReaction__EParticleSystemInsignificanceReaction_MAX = 5
};


// Enum Engine.EParticleSignificanceLevel
enum class EParticleSignificanceLevel
{
	EParticleSignificanceLevel__Low = 0,
	EParticleSignificanceLevel__Medium = 1,
	EParticleSignificanceLevel__High = 2,
	EParticleSignificanceLevel__Critical = 3,
	EParticleSignificanceLevel__Num = 4,
	EParticleSignificanceLevel__EParticleSignificanceLevel_MAX = 5
};


// Enum Engine.EParticleSystemOcclusionBoundsMethod
enum class EParticleSystemOcclusionBoundsMethod
{
	EPSOBM_None                    = 0,
	EPSOBM_ParticleBounds          = 1,
	EPSOBM_CustomBounds            = 2,
	EPSOBM_MAX                     = 3
};


// Enum Engine.ParticleSystemLODMethod
enum class ParticleSystemLODMethod
{
	PARTICLESYSTEMLODMETHOD_Automatic = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet = 1,
	PARTICLESYSTEMLODMETHOD_ActivateAutomatic = 2,
	PARTICLESYSTEMLODMETHOD_MAX    = 3
};


// Enum Engine.EParticleSystemUpdateMode
enum class EParticleSystemUpdateMode
{
	EPSUM_RealTime                 = 0,
	EPSUM_FixedTime                = 1,
	EPSUM_MAX                      = 2
};


// Enum Engine.EEmitterRenderMode
enum class EEmitterRenderMode
{
	ERM_Normal                     = 0,
	ERM_Point                      = 1,
	ERM_Cross                      = 2,
	ERM_LightsOnly                 = 3,
	ERM_None                       = 4,
	ERM_MAX                        = 5
};


// Enum Engine.EParticleSubUVInterpMethod
enum class EParticleSubUVInterpMethod
{
	PSUVIM_None                    = 0,
	PSUVIM_Linear                  = 1,
	PSUVIM_Linear_Blend            = 2,
	PSUVIM_Random                  = 3,
	PSUVIM_Random_Blend            = 4,
	PSUVIM_MAX                     = 5
};


// Enum Engine.EParticleBurstMethod
enum class EParticleBurstMethod
{
	EPBM_Instant                   = 0,
	EPBM_Interpolated              = 1,
	EPBM_MAX                       = 2
};


// Enum Engine.EParticleEventType
enum class EParticleEventType
{
	EPET_Any                       = 0,
	EPET_Spawn                     = 1,
	EPET_Death                     = 2,
	EPET_Collision                 = 3,
	EPET_Burst                     = 4,
	EPET_Blueprint                 = 5,
	EPET_MAX                       = 6
};


// Enum Engine.ParticleReplayState
enum class ParticleReplayState
{
	PRS_Disabled                   = 0,
	PRS_Capturing                  = 1,
	PRS_Replaying                  = 2,
	PRS_MAX                        = 3
};


// Enum Engine.EParticleSysParamType
enum class EParticleSysParamType
{
	PSPT_None                      = 0,
	PSPT_Scalar                    = 1,
	PSPT_ScalarRand                = 2,
	PSPT_Vector                    = 3,
	PSPT_VectorRand                = 4,
	PSPT_Color                     = 5,
	PSPT_Actor                     = 6,
	PSPT_Material                  = 7,
	PSPT_MAX                       = 8
};


// Enum Engine.EVerticalTextAligment
enum class EVerticalTextAligment
{
	EVRTA_TextTop                  = 0,
	EVRTA_TextCenter               = 1,
	EVRTA_TextBottom               = 2,
	EVRTA_QuadTop                  = 3,
	EVRTA_MAX                      = 4
};


// Enum Engine.EHorizTextAligment
enum class EHorizTextAligment
{
	EHTA_Left                      = 0,
	EHTA_Center                    = 1,
	EHTA_Right                     = 2,
	EHTA_MAX                       = 3
};


// Enum Engine.EReflectionSourceType
enum class EReflectionSourceType
{
	EReflectionSourceType__CapturedScene = 0,
	EReflectionSourceType__SpecifiedCubemap = 1,
	EReflectionSourceType__EReflectionSourceType_MAX = 2
};


// Enum Engine.EStereoLayerShape
enum class EStereoLayerShape
{
	SLSH_QuadLayer                 = 0,
	SLSH_CylinderLayer             = 1,
	SLSH_CubemapLayer              = 2,
	SLSH_MAX                       = 3
};


// Enum Engine.EStereoLayerType
enum class EStereoLayerType
{
	SLT_WorldLocked                = 0,
	SLT_TrackerLocked              = 1,
	SLT_FaceLocked                 = 2,
	SLT_MAX                        = 3
};


// Enum Engine.ETimelineDirection
enum class ETimelineDirection
{
	ETimelineDirection__Forward    = 0,
	ETimelineDirection__Backward   = 1,
	ETimelineDirection__ETimelineDirection_MAX = 2
};


// Enum Engine.ETimelineLengthMode
enum class ETimelineLengthMode
{
	TL_TimelineLength              = 0,
	TL_LastKeyFrame                = 1,
	TL_MAX                         = 2
};


// Enum Engine.ETypeAdvanceAnim
enum class ETypeAdvanceAnim
{
	ETAA_Default                   = 0,
	ETAA_Finished                  = 1,
	ETAA_Looped                    = 2,
	ETAA_MAX                       = 3
};


// Enum Engine.EAlphaBlendOption
enum class EAlphaBlendOption
{
	EAlphaBlendOption__Linear      = 0,
	EAlphaBlendOption__Cubic       = 1,
	EAlphaBlendOption__HermiteCubic = 2,
	EAlphaBlendOption__Sinusoidal  = 3,
	EAlphaBlendOption__QuadraticInOut = 4,
	EAlphaBlendOption__CubicInOut  = 5,
	EAlphaBlendOption__QuarticInOut = 6,
	EAlphaBlendOption__QuinticInOut = 7,
	EAlphaBlendOption__CircularIn  = 8,
	EAlphaBlendOption__CircularOut = 9,
	EAlphaBlendOption__CircularInOut = 10,
	EAlphaBlendOption__ExpIn       = 11,
	EAlphaBlendOption__ExpOut      = 12,
	EAlphaBlendOption__ExpInOut    = 13,
	EAlphaBlendOption__Custom      = 14,
	EAlphaBlendOption__EAlphaBlendOption_MAX = 15
};


// Enum Engine.EAnimNotifyEventType
enum class EAnimNotifyEventType
{
	EAnimNotifyEventType__Begin    = 0,
	EAnimNotifyEventType__End      = 1,
	EAnimNotifyEventType__EAnimNotifyEventType_MAX = 2
};


// Enum Engine.EAdditiveBasePoseType
enum class EAdditiveBasePoseType
{
	ABPT_None                      = 0,
	ABPT_RefPose                   = 1,
	ABPT_AnimScaled                = 2,
	ABPT_AnimFrame                 = 3,
	ABPT_MAX                       = 4
};


// Enum Engine.AnimationKeyFormat
enum class AnimationKeyFormat
{
	AKF_ConstantKeyLerp            = 0,
	AKF_VariableKeyLerp            = 1,
	AKF_PerTrackCompression        = 2,
	AKF_MAX                        = 3
};


// Enum Engine.AnimationCompressionFormat
enum class AnimationCompressionFormat
{
	ACF_None                       = 0,
	ACF_Float96NoW                 = 1,
	ACF_Fixed48NoW                 = 2,
	ACF_IntervalFixed32NoW         = 3,
	ACF_Fixed32NoW                 = 4,
	ACF_Float32NoW                 = 5,
	ACF_Identity                   = 6,
	ACF_MAX                        = 7
};


// Enum Engine.ENotifyTriggerMode
enum class ENotifyTriggerMode
{
	ENotifyTriggerMode__AllAnimations = 0,
	ENotifyTriggerMode__HighestWeightedAnimation = 1,
	ENotifyTriggerMode__None       = 2,
	ENotifyTriggerMode__ENotifyTriggerMode_MAX = 3
};


// Enum Engine.EBlendSpaceAxis
enum class EBlendSpaceAxis
{
	BSA_None                       = 0,
	BSA_X                          = 1,
	BSA_Y                          = 2,
	BSA_Max                        = 3
};


// Enum Engine.ETransitionLogicType
enum class ETransitionLogicType
{
	ETransitionLogicType__TLT_StandardBlend = 0,
	ETransitionLogicType__TLT_Custom = 1,
	ETransitionLogicType__TLT_MAX  = 2
};


// Enum Engine.ETransitionBlendMode
enum class ETransitionBlendMode
{
	ETransitionBlendMode__TBM_Linear = 0,
	ETransitionBlendMode__TBM_Cubic = 1,
	ETransitionBlendMode__TBM_MAX  = 2
};


// Enum Engine.EMontagePlayReturnType
enum class EMontagePlayReturnType
{
	EMontagePlayReturnType__MontageLength = 0,
	EMontagePlayReturnType__Duration = 1,
	EMontagePlayReturnType__EMontagePlayReturnType_MAX = 2
};


// Enum Engine.EAnimCurveType
enum class EAnimCurveType
{
	EAnimCurveType__AttributeCurve = 0,
	EAnimCurveType__MaterialCurve  = 1,
	EAnimCurveType__MorphTargetCurve = 2,
	EAnimCurveType__MaxAnimCurveType = 3,
	EAnimCurveType__EAnimCurveType_MAX = 4
};


// Enum Engine.EPostCopyOperation
enum class EPostCopyOperation
{
	EPostCopyOperation__None       = 0,
	EPostCopyOperation__LogicalNegateBool = 1,
	EPostCopyOperation__EPostCopyOperation_MAX = 2
};


// Enum Engine.EPinHidingMode
enum class EPinHidingMode
{
	EPinHidingMode__NeverAsPin     = 0,
	EPinHidingMode__PinHiddenByDefault = 1,
	EPinHidingMode__PinShownByDefault = 2,
	EPinHidingMode__AlwaysAsPin    = 3,
	EPinHidingMode__EPinHidingMode_MAX = 4
};


// Enum Engine.EEvaluateCurveTableResult
enum class EEvaluateCurveTableResult
{
	EEvaluateCurveTableResult__RowFound = 0,
	EEvaluateCurveTableResult__RowNotFound = 1,
	EEvaluateCurveTableResult__EEvaluateCurveTableResult_MAX = 2
};


// Enum Engine.EGrammaticalNumber
enum class EGrammaticalNumber
{
	EGrammaticalNumber__Singular   = 0,
	EGrammaticalNumber__Plural     = 1,
	EGrammaticalNumber__EGrammaticalNumber_MAX = 2
};


// Enum Engine.EGrammaticalGender
enum class EGrammaticalGender
{
	EGrammaticalGender__Neuter     = 0,
	EGrammaticalGender__Masculine  = 1,
	EGrammaticalGender__Feminine   = 2,
	EGrammaticalGender__Mixed      = 3,
	EGrammaticalGender__EGrammaticalGender_MAX = 4
};


// Enum Engine.ESuggestProjVelocityTraceOption
enum class ESuggestProjVelocityTraceOption
{
	ESuggestProjVelocityTraceOption__DoNotTrace = 0,
	ESuggestProjVelocityTraceOption__TraceFullPath = 1,
	ESuggestProjVelocityTraceOption__OnlyTraceWhileAscending = 2,
	ESuggestProjVelocityTraceOption__ESuggestProjVelocityTraceOption_MAX = 3
};


// Enum Engine.EHMDWornState
enum class EHMDWornState
{
	EHMDWornState__Unknown         = 0,
	EHMDWornState__Worn            = 1,
	EHMDWornState__NotWorn         = 2,
	EHMDWornState__EHMDWornState_MAX = 3
};


// Enum Engine.EHMDTrackingOrigin
enum class EHMDTrackingOrigin
{
	EHMDTrackingOrigin__Floor      = 0,
	EHMDTrackingOrigin__Eye        = 1,
	EHMDTrackingOrigin__EHMDTrackingOrigin_MAX = 2
};


// Enum Engine.EOrientPositionSelector
enum class EOrientPositionSelector
{
	EOrientPositionSelector__Orientation = 0,
	EOrientPositionSelector__Position = 1,
	EOrientPositionSelector__OrientationAndPosition = 2,
	EOrientPositionSelector__EOrientPositionSelector_MAX = 3
};


// Enum Engine.ELerpInterpolationMode
enum class ELerpInterpolationMode
{
	ELerpInterpolationMode__QuatInterp = 0,
	ELerpInterpolationMode__EulerInterp = 1,
	ELerpInterpolationMode__DualQuatInterp = 2,
	ELerpInterpolationMode__ELerpInterpolationMode_MAX = 3
};


// Enum Engine.EEasingFunc
enum class EEasingFunc
{
	EEasingFunc__Linear            = 0,
	EEasingFunc__Step              = 1,
	EEasingFunc__SinusoidalIn      = 2,
	EEasingFunc__SinusoidalOut     = 3,
	EEasingFunc__SinusoidalInOut   = 4,
	EEasingFunc__EaseIn            = 5,
	EEasingFunc__EaseOut           = 6,
	EEasingFunc__EaseInOut         = 7,
	EEasingFunc__ExpoIn            = 8,
	EEasingFunc__ExpoOut           = 9,
	EEasingFunc__ExpoInOut         = 10,
	EEasingFunc__CircularIn        = 11,
	EEasingFunc__CircularOut       = 12,
	EEasingFunc__CircularInOut     = 13,
	EEasingFunc__EEasingFunc_MAX   = 14
};


// Enum Engine.ERoundingMode
enum class ERoundingMode
{
	HalfToEven                     = 0,
	HalfFromZero                   = 1,
	HalfToZero                     = 2,
	FromZero                       = 3,
	ToZero                         = 4,
	ToNegativeInfinity             = 5,
	ToPositiveInfinity             = 6,
	ERoundingMode_MAX              = 7
};


// Enum Engine.EVertexPaintAxis
enum class EVertexPaintAxis
{
	EVertexPaintAxis__X            = 0,
	EVertexPaintAxis__Y            = 1,
	EVertexPaintAxis__Z            = 2,
	EVertexPaintAxis__EVertexPaintAxis_MAX = 3
};


// Enum Engine.EConsoleType
enum class EConsoleType
{
	CONSOLE_Any                    = 0,
	CONSOLE_Mobile                 = 1,
	CONSOLE_MAX                    = 2
};


// Enum Engine.ETransitionType
enum class ETransitionType
{
	TT_None                        = 0,
	TT_Paused                      = 1,
	TT_Loading                     = 2,
	TT_Saving                      = 3,
	TT_Connecting                  = 4,
	TT_Precaching                  = 5,
	TT_WaitingToConnect            = 6,
	TT_MAX                         = 7
};


// Enum Engine.EFullyLoadPackageType
enum class EFullyLoadPackageType
{
	FULLYLOAD_Map                  = 0,
	FULLYLOAD_Game_PreLoadClass    = 1,
	FULLYLOAD_Game_PostLoadClass   = 2,
	FULLYLOAD_Always               = 3,
	FULLYLOAD_Mutator              = 4,
	FULLYLOAD_MAX                  = 5
};


// Enum Engine.EBodyCollisionResponse
enum class EBodyCollisionResponse
{
	EBodyCollisionResponse__BodyCollision_Enabled = 0,
	EBodyCollisionResponse__BodyCollision_Disabled = 1,
	EBodyCollisionResponse__BodyCollision_MAX = 2
};


// Enum Engine.EPhysicsType
enum class EPhysicsType
{
	PhysType_Default               = 0,
	PhysType_Kinematic             = 1,
	PhysType_Simulated             = 2,
	PhysType_MAX                   = 3
};


// Enum Engine.ECollisionTraceFlag
enum class ECollisionTraceFlag
{
	CTF_UseDefault                 = 0,
	CTF_UseSimpleAndComplex        = 1,
	CTF_UseSimpleAsComplex         = 2,
	CTF_UseComplexAsSimple         = 3,
	CTF_MAX                        = 4
};


// Enum Engine.EUIScalingRule
enum class EUIScalingRule
{
	EUIScalingRule__ShortestSide   = 0,
	EUIScalingRule__LongestSide    = 1,
	EUIScalingRule__Horizontal     = 2,
	EUIScalingRule__Vertical       = 3,
	EUIScalingRule__Custom         = 4,
	EUIScalingRule__EUIScalingRule_MAX = 5
};


// Enum Engine.ERenderFocusRule
enum class ERenderFocusRule
{
	ERenderFocusRule__Always       = 0,
	ERenderFocusRule__NonPointer   = 1,
	ERenderFocusRule__NavigationOnly = 2,
	ERenderFocusRule__Never        = 3,
	ERenderFocusRule__ERenderFocusRule_MAX = 4
};


// Enum Engine.EFrictionCombineMode
enum class EFrictionCombineMode
{
	EFrictionCombineMode__Average  = 0,
	EFrictionCombineMode__Min      = 1,
	EFrictionCombineMode__Multiply = 2,
	EFrictionCombineMode__Max      = 3,
	EFrictionCombineMode__EFrictionCombineMode_MAX = 4
};


// Enum Engine.ESettingsLockedAxis
enum class ESettingsLockedAxis
{
	ESettingsLockedAxis__None      = 0,
	ESettingsLockedAxis__X         = 1,
	ESettingsLockedAxis__Y         = 2,
	ESettingsLockedAxis__Z         = 3,
	ESettingsLockedAxis__Invalid   = 4,
	ESettingsLockedAxis__ESettingsLockedAxis_MAX = 5
};


// Enum Engine.ESettingsDOF
enum class ESettingsDOF
{
	ESettingsDOF__Full3D           = 0,
	ESettingsDOF__YZPlane          = 1,
	ESettingsDOF__XZPlane          = 2,
	ESettingsDOF__XYPlane          = 3,
	ESettingsDOF__ESettingsDOF_MAX = 4
};


// Enum Engine.EAutoExposureMethodUI
enum class EAutoExposureMethodUI
{
	EAutoExposureMethodUI__AEM_Histogram = 0,
	EAutoExposureMethodUI__AEM_Basic = 1,
	EAutoExposureMethodUI__AEM_MAX = 2
};


// Enum Engine.EEarlyZPass
enum class EEarlyZPass
{
	EEarlyZPass__None              = 0,
	EEarlyZPass__OpaqueOnly        = 1,
	EEarlyZPass__OpaqueAndMasked   = 2,
	EEarlyZPass__Auto              = 3,
	EEarlyZPass__EEarlyZPass_MAX   = 4
};


// Enum Engine.ECustomDepthStencil
enum class ECustomDepthStencil
{
	ECustomDepthStencil__Disabled  = 0,
	ECustomDepthStencil__Enabled   = 1,
	ECustomDepthStencil__EnabledOnDemand = 2,
	ECustomDepthStencil__EnabledWithStencil = 3,
	ECustomDepthStencil__ECustomDepthStencil_MAX = 4
};


// Enum Engine.ECompositingSampleCount
enum class ECompositingSampleCount
{
	ECompositingSampleCount__One   = 0,
	ECompositingSampleCount__Two   = 1,
	ECompositingSampleCount__Four  = 2,
	ECompositingSampleCount__Eight = 3,
	ECompositingSampleCount__ECompositingSampleCount_MAX = 4
};


// Enum Engine.EClearSceneOptions
enum class EClearSceneOptions
{
	EClearSceneOptions__NoClear    = 0,
	EClearSceneOptions__HardwareClear = 1,
	EClearSceneOptions__QuadAtMaxZ = 2,
	EClearSceneOptions__EClearSceneOptions_MAX = 3
};


// Enum Engine.ETextureSamplerFilter
enum class ETextureSamplerFilter
{
	ETextureSamplerFilter__Point   = 0,
	ETextureSamplerFilter__Bilinear = 1,
	ETextureSamplerFilter__Trilinear = 2,
	ETextureSamplerFilter__AnisotropicPoint = 3,
	ETextureSamplerFilter__AnisotropicLinear = 4,
	ETextureSamplerFilter__ETextureSamplerFilter_MAX = 5
};


// Enum Engine.ETexturePowerOfTwoSetting
enum class ETexturePowerOfTwoSetting
{
	ETexturePowerOfTwoSetting__None = 0,
	ETexturePowerOfTwoSetting__PadToPowerOfTwo = 1,
	ETexturePowerOfTwoSetting__PadToSquarePowerOfTwo = 2,
	ETexturePowerOfTwoSetting__ETexturePowerOfTwoSetting_MAX = 3
};


// Enum Engine.TextureMipGenSettings
enum class TextureMipGenSettings
{
	TMGS_FromTextureGroup          = 0,
	TMGS_SimpleAverage             = 1,
	TMGS_Sharpen0                  = 2,
	TMGS_Sharpen1                  = 3,
	TMGS_Sharpen2                  = 4,
	TMGS_Sharpen3                  = 5,
	TMGS_Sharpen4                  = 6,
	TMGS_Sharpen5                  = 7,
	TMGS_Sharpen6                  = 8,
	TMGS_Sharpen7                  = 9,
	TMGS_Sharpen8                  = 10,
	TMGS_Sharpen9                  = 11,
	TMGS_Sharpen10                 = 12,
	TMGS_NoMipmaps                 = 13,
	TMGS_LeaveExistingMips         = 14,
	TMGS_Blur1                     = 15,
	TMGS_Blur2                     = 16,
	TMGS_Blur3                     = 17,
	TMGS_Blur4                     = 18,
	TMGS_Blur5                     = 19,
	TMGS_MAX                       = 20
};


// Enum Engine.TextureGroup
enum class TextureGroup
{
	TEXTUREGROUP_World             = 0,
	TEXTUREGROUP_WorldNormalMap    = 1,
	TEXTUREGROUP_WorldSpecular     = 2,
	TEXTUREGROUP_Character         = 3,
	TEXTUREGROUP_CharacterNormalMap = 4,
	TEXTUREGROUP_CharacterSpecular = 5,
	TEXTUREGROUP_Weapon            = 6,
	TEXTUREGROUP_WeaponNormalMap   = 7,
	TEXTUREGROUP_WeaponSpecular    = 8,
	TEXTUREGROUP_Vehicle           = 9,
	TEXTUREGROUP_VehicleNormalMap  = 10,
	TEXTUREGROUP_VehicleSpecular   = 11,
	TEXTUREGROUP_Cinematic         = 12,
	TEXTUREGROUP_Effects           = 13,
	TEXTUREGROUP_EffectsNotFiltered = 14,
	TEXTUREGROUP_Skybox            = 15,
	TEXTUREGROUP_UI                = 16,
	TEXTUREGROUP_Lightmap          = 17,
	TEXTUREGROUP_RenderTarget      = 18,
	TEXTUREGROUP_MobileFlattened   = 19,
	TEXTUREGROUP_ProcBuilding_Face = 20,
	TEXTUREGROUP_ProcBuilding_LightMap = 21,
	TEXTUREGROUP_Shadowmap         = 22,
	TEXTUREGROUP_ColorLookupTable  = 23,
	TEXTUREGROUP_Terrain_Heightmap = 24,
	TEXTUREGROUP_Terrain_Weightmap = 25,
	TEXTUREGROUP_Bokeh             = 26,
	TEXTUREGROUP_IESLightProfile   = 27,
	TEXTUREGROUP_Pixels2D          = 28,
	TEXTUREGROUP_HierarchicalLOD   = 29,
	TEXTUREGROUP_MAX               = 30
};


// Enum Engine.DistributionParamMode
enum class DistributionParamMode
{
	DPM_Normal                     = 0,
	DPM_Abs                        = 1,
	DPM_Direct                     = 2,
	DPM_MAX                        = 3
};


// Enum Engine.EDistributionVectorMirrorFlags
enum class EDistributionVectorMirrorFlags
{
	EDVMF_Same                     = 0,
	EDVMF_Different                = 1,
	EDVMF_Mirror                   = 2,
	EDVMF_MAX                      = 3
};


// Enum Engine.EDistributionVectorLockFlags
enum class EDistributionVectorLockFlags
{
	EDVLF_None                     = 0,
	EDVLF_XY                       = 1,
	EDVLF_XZ                       = 2,
	EDVLF_YZ                       = 3,
	EDVLF_XYZ                      = 4,
	EDVLF_MAX                      = 5
};


// Enum Engine.ECanCreateConnectionResponse
enum class ECanCreateConnectionResponse
{
	CONNECT_RESPONSE_MAKE          = 0,
	CONNECT_RESPONSE_DISALLOW      = 1,
	CONNECT_RESPONSE_BREAK_OTHERS_A = 2,
	CONNECT_RESPONSE_BREAK_OTHERS_B = 3,
	CONNECT_RESPONSE_BREAK_OTHERS_AB = 4,
	CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE = 5,
	CONNECT_RESPONSE_MAX           = 6
};


// Enum Engine.EGraphType
enum class EGraphType
{
	GT_Function                    = 0,
	GT_Ubergraph                   = 1,
	GT_Macro                       = 2,
	GT_Animation                   = 3,
	GT_StateMachine                = 4,
	GT_MAX                         = 5
};


// Enum Engine.EFontImportCharacterSet
enum class EFontImportCharacterSet
{
	FontICS_Default                = 0,
	FontICS_Ansi                   = 1,
	FontICS_Symbol                 = 2,
	FontICS_MAX                    = 3
};


// Enum Engine.EFontCacheType
enum class EFontCacheType
{
	EFontCacheType__Offline        = 0,
	EFontCacheType__Runtime        = 1,
	EFontCacheType__EFontCacheType_MAX = 2
};


// Enum Engine.EWindowMode
enum class EWindowMode
{
	EWindowMode__Fullscreen        = 0,
	EWindowMode__WindowedFullscreen = 1,
	EWindowMode__Windowed          = 2,
	EWindowMode__EWindowMode_MAX   = 3
};


// Enum Engine.EMaxConcurrentResolutionRule
enum class EMaxConcurrentResolutionRule
{
	EMaxConcurrentResolutionRule__PreventNew = 0,
	EMaxConcurrentResolutionRule__StopOldest = 1,
	EMaxConcurrentResolutionRule__StopFarthestThenPreventNew = 2,
	EMaxConcurrentResolutionRule__StopFarthestThenOldest = 3,
	EMaxConcurrentResolutionRule__StopLowestPriority = 4,
	EMaxConcurrentResolutionRule__StopQuietest = 5,
	EMaxConcurrentResolutionRule__StopLowestPriorityThenPreventNew = 6,
	EMaxConcurrentResolutionRule__EMaxConcurrentResolutionRule_MAX = 7
};


// Enum Engine.ESoundGroup
enum class ESoundGroup
{
	SOUNDGROUP_Default             = 0,
	SOUNDGROUP_Effects             = 1,
	SOUNDGROUP_UI                  = 2,
	SOUNDGROUP_Music               = 3,
	SOUNDGROUP_Voice               = 4,
	SOUNDGROUP_GameSoundGroup1     = 5,
	SOUNDGROUP_GameSoundGroup2     = 6,
	SOUNDGROUP_GameSoundGroup3     = 7,
	SOUNDGROUP_GameSoundGroup4     = 8,
	SOUNDGROUP_GameSoundGroup5     = 9,
	SOUNDGROUP_GameSoundGroup6     = 10,
	SOUNDGROUP_GameSoundGroup7     = 11,
	SOUNDGROUP_GameSoundGroup8     = 12,
	SOUNDGROUP_GameSoundGroup9     = 13,
	SOUNDGROUP_GameSoundGroup10    = 14,
	SOUNDGROUP_GameSoundGroup11    = 15,
	SOUNDGROUP_GameSoundGroup12    = 16,
	SOUNDGROUP_GameSoundGroup13    = 17,
	SOUNDGROUP_GameSoundGroup14    = 18,
	SOUNDGROUP_GameSoundGroup15    = 19,
	SOUNDGROUP_GameSoundGroup16    = 20,
	SOUNDGROUP_GameSoundGroup17    = 21,
	SOUNDGROUP_GameSoundGroup18    = 22,
	SOUNDGROUP_GameSoundGroup19    = 23,
	SOUNDGROUP_GameSoundGroup20    = 24,
	SOUNDGROUP_MAX                 = 25
};


// Enum Engine.EDecompressionType
enum class EDecompressionType
{
	DTYPE_Setup                    = 0,
	DTYPE_Invalid                  = 1,
	DTYPE_Preview                  = 2,
	DTYPE_Native                   = 3,
	DTYPE_RealTime                 = 4,
	DTYPE_Procedural               = 5,
	DTYPE_Xenon                    = 6,
	DTYPE_Streaming                = 7,
	DTYPE_MAX                      = 8
};


// Enum Engine.ETrackActiveCondition
enum class ETrackActiveCondition
{
	ETAC_Always                    = 0,
	ETAC_GoreEnabled               = 1,
	ETAC_GoreDisabled              = 2,
	ETAC_MAX                       = 3
};


// Enum Engine.EInterpTrackMoveRotMode
enum class EInterpTrackMoveRotMode
{
	IMR_Keyframed                  = 0,
	IMR_LookAtGroup                = 1,
	IMR_Ignore                     = 2,
	IMR_MAX                        = 3
};


// Enum Engine.EInterpMoveAxis
enum class EInterpMoveAxis
{
	AXIS_TranslationX              = 0,
	AXIS_TranslationY              = 1,
	AXIS_TranslationZ              = 2,
	AXIS_RotationX                 = 3,
	AXIS_RotationY                 = 4,
	AXIS_RotationZ                 = 5,
	AXIS_MAX                       = 6
};


// Enum Engine.ETrackToggleAction
enum class ETrackToggleAction
{
	ETTA_Off                       = 0,
	ETTA_On                        = 1,
	ETTA_Toggle                    = 2,
	ETTA_Trigger                   = 3,
	ETTA_MAX                       = 4
};


// Enum Engine.EVisibilityTrackCondition
enum class EVisibilityTrackCondition
{
	EVTC_Always                    = 0,
	EVTC_GoreEnabled               = 1,
	EVTC_GoreDisabled              = 2,
	EVTC_MAX                       = 3
};


// Enum Engine.EVisibilityTrackAction
enum class EVisibilityTrackAction
{
	EVTA_Hide                      = 0,
	EVTA_Show                      = 1,
	EVTA_Toggle                    = 2,
	EVTA_MAX                       = 3
};


// Enum Engine.EMaterialAttributeBlend
enum class EMaterialAttributeBlend
{
	EMaterialAttributeBlend__Blend = 0,
	EMaterialAttributeBlend__UseA  = 1,
	EMaterialAttributeBlend__UseB  = 2,
	EMaterialAttributeBlend__EMaterialAttributeBlend_MAX = 3
};


// Enum Engine.EClampMode
enum class EClampMode
{
	CMODE_Clamp                    = 0,
	CMODE_ClampMin                 = 1,
	CMODE_ClampMax                 = 2,
	CMODE_MAX                      = 3
};


// Enum Engine.ECustomMaterialOutputType
enum class ECustomMaterialOutputType
{
	CMOT_Float1                    = 0,
	CMOT_Float2                    = 1,
	CMOT_Float3                    = 2,
	CMOT_Float4                    = 3,
	CMOT_MAX                       = 4
};


// Enum Engine.EDepthOfFieldFunctionValue
enum class EDepthOfFieldFunctionValue
{
	TDOF_NearAndFarMask            = 0,
	TDOF_NearMask                  = 1,
	TDOF_FarMask                   = 2,
	TDOF_CircleOfConfusionRadius   = 3,
	TDOF_MAX                       = 4
};


// Enum Engine.EFunctionInputType
enum class EFunctionInputType
{
	FunctionInput_Scalar           = 0,
	FunctionInput_Vector2          = 1,
	FunctionInput_Vector3          = 2,
	FunctionInput_Vector4          = 3,
	FunctionInput_Texture2D        = 4,
	FunctionInput_TextureCube      = 5,
	FunctionInput_StaticBool       = 6,
	FunctionInput_MaterialAttributes = 7,
	FunctionInput_MAX              = 8
};


// Enum Engine.ENoiseFunction
enum class ENoiseFunction
{
	NOISEFUNCTION_SimplexTex       = 0,
	NOISEFUNCTION_GradientTex      = 1,
	NOISEFUNCTION_GradientTex3D    = 2,
	NOISEFUNCTION_GradientALU      = 3,
	NOISEFUNCTION_ValueALU         = 4,
	NOISEFUNCTION_VoronoiALU       = 5,
	NOISEFUNCTION_MAX              = 6
};


// Enum Engine.EMaterialSceneAttributeInputMode
enum class EMaterialSceneAttributeInputMode
{
	EMaterialSceneAttributeInputMode__Coordinates = 0,
	EMaterialSceneAttributeInputMode__OffsetFraction = 1,
	EMaterialSceneAttributeInputMode__EMaterialSceneAttributeInputMode_MAX = 2
};


// Enum Engine.ESceneTextureId
enum class ESceneTextureId
{
	PPI_SceneColor                 = 0,
	PPI_SceneDepth                 = 1,
	PPI_DiffuseColor               = 2,
	PPI_SpecularColor              = 3,
	PPI_SubsurfaceColor            = 4,
	PPI_BaseColor                  = 5,
	PPI_Specular                   = 6,
	PPI_Metallic                   = 7,
	PPI_WorldNormal                = 8,
	PPI_SeparateTranslucency       = 9,
	PPI_Opacity                    = 10,
	PPI_Roughness                  = 11,
	PPI_MaterialAO                 = 12,
	PPI_CustomDepth                = 13,
	PPI_PostProcessInput0          = 14,
	PPI_PostProcessInput1          = 15,
	PPI_PostProcessInput2          = 16,
	PPI_PostProcessInput3          = 17,
	PPI_PostProcessInput4          = 18,
	PPI_PostProcessInput5          = 19,
	PPI_PostProcessInput6          = 20,
	PPI_DecalMask                  = 21,
	PPI_ShadingModel               = 22,
	PPI_AmbientOcclusion           = 23,
	PPI_CustomStencil              = 24,
	PPI_StoredBaseColor            = 25,
	PPI_StoredSpecular             = 26,
	PPI_MAX                        = 27
};


// Enum Engine.EMaterialExpressionScreenPositionMapping
enum class EMaterialExpressionScreenPositionMapping
{
	MESP_SceneTextureUV            = 0,
	MESP_ViewportUV                = 1,
	MESP_Max                       = 2
};


// Enum Engine.ESpeedTreeLODType
enum class ESpeedTreeLODType
{
	STLOD_Pop                      = 0,
	STLOD_Smooth                   = 1,
	STLOD_MAX                      = 2
};


// Enum Engine.ESpeedTreeWindType
enum class ESpeedTreeWindType
{
	STW_None                       = 0,
	STW_Fastest                    = 1,
	STW_Fast                       = 2,
	STW_Better                     = 3,
	STW_Best                       = 4,
	STW_Palm                       = 5,
	STW_BestPlus                   = 6,
	STW_MAX                        = 7
};


// Enum Engine.ESpeedTreeGeometryType
enum class ESpeedTreeGeometryType
{
	STG_Branch                     = 0,
	STG_Frond                      = 1,
	STG_Leaf                       = 2,
	STG_FacingLeaf                 = 3,
	STG_Billboard                  = 4,
	STG_MAX                        = 5
};


// Enum Engine.ETextureMipValueMode
enum class ETextureMipValueMode
{
	TMVM_None                      = 0,
	TMVM_MipLevel                  = 1,
	TMVM_MipBias                   = 2,
	TMVM_Derivative                = 3,
	TMVM_MAX                       = 4
};


// Enum Engine.ETextureColorChannel
enum class ETextureColorChannel
{
	TCC_Red                        = 0,
	TCC_Green                      = 1,
	TCC_Blue                       = 2,
	TCC_Alpha                      = 3,
	TCC_MAX                        = 4
};


// Enum Engine.EMaterialExposedTextureProperty
enum class EMaterialExposedTextureProperty
{
	TMTM_TextureSize               = 0,
	TMTM_TexelSize                 = 1,
	TMTM_MAX                       = 2
};


// Enum Engine.EMaterialVectorCoordTransform
enum class EMaterialVectorCoordTransform
{
	TRANSFORM_Tangent              = 0,
	TRANSFORM_Local                = 1,
	TRANSFORM_World                = 2,
	TRANSFORM_View                 = 3,
	TRANSFORM_Camera               = 4,
	TRANSFORM_ParticleWorld        = 5,
	TRANSFORM_MAX                  = 6
};


// Enum Engine.EMaterialVectorCoordTransformSource
enum class EMaterialVectorCoordTransformSource
{
	TRANSFORMSOURCE_Tangent        = 0,
	TRANSFORMSOURCE_Local          = 1,
	TRANSFORMSOURCE_World          = 2,
	TRANSFORMSOURCE_View           = 3,
	TRANSFORMSOURCE_Camera         = 4,
	TRANSFORMSOURCE_ParticleWorld  = 5,
	TRANSFORMSOURCE_MAX            = 6
};


// Enum Engine.EMaterialPositionTransformSource
enum class EMaterialPositionTransformSource
{
	TRANSFORMPOSSOURCE_Local       = 0,
	TRANSFORMPOSSOURCE_World       = 1,
	TRANSFORMPOSSOURCE_TranslatedWorld = 2,
	TRANSFORMPOSSOURCE_View        = 3,
	TRANSFORMPOSSOURCE_Camera      = 4,
	TRANSFORMPOSSOURCE_Particle    = 5,
	TRANSFORMPOSSOURCE_MAX         = 6
};


// Enum Engine.EVectorNoiseFunction
enum class EVectorNoiseFunction
{
	VNF_CellnoiseALU               = 0,
	VNF_VectorALU                  = 1,
	VNF_GradientALU                = 2,
	VNF_CurlALU                    = 3,
	VNF_VoronoiALU                 = 4,
	VNF_MAX                        = 5
};


// Enum Engine.EMaterialExposedViewProperty
enum class EMaterialExposedViewProperty
{
	MEVP_BufferSize                = 0,
	MEVP_FieldOfView               = 1,
	MEVP_TanHalfFieldOfView        = 2,
	MEVP_ViewSize                  = 3,
	MEVP_WorldSpaceViewPosition    = 4,
	MEVP_WorldSpaceCameraPosition  = 5,
	MEVP_MAX                       = 6
};


// Enum Engine.EWorldPositionIncludedOffsets
enum class EWorldPositionIncludedOffsets
{
	WPT_Default                    = 0,
	WPT_ExcludeAllShaderOffsets    = 1,
	WPT_CameraRelative             = 2,
	WPT_CameraRelativeNoOffsets    = 3,
	WPT_MAX                        = 4
};


// Enum Engine.EMaterialDecalResponse
enum class EMaterialDecalResponse
{
	MDR_None                       = 0,
	MDR_ColorNormalRoughness       = 1,
	MDR_Color                      = 2,
	MDR_ColorNormal                = 3,
	MDR_ColorRoughness             = 4,
	MDR_Normal                     = 5,
	MDR_NormalRoughness            = 6,
	MDR_Roughness                  = 7,
	MDR_MAX                        = 8
};


// Enum Engine.EMaterialDomain
enum class EMaterialDomain
{
	MD_Surface                     = 0,
	MD_DeferredDecal               = 1,
	MD_LightFunction               = 2,
	MD_PostProcess                 = 3,
	MD_UI                          = 4,
	MD_MAX                         = 5
};


// Enum Engine.EDecalBlendMode
enum class EDecalBlendMode
{
	DBM_Translucent                = 0,
	DBM_Stain                      = 1,
	DBM_Normal                     = 2,
	DBM_Emissive                   = 3,
	DBM_DBuffer_ColorNormalRoughness = 4,
	DBM_DBuffer_Color              = 5,
	DBM_DBuffer_ColorNormal        = 6,
	DBM_DBuffer_ColorRoughness     = 7,
	DBM_DBuffer_Normal             = 8,
	DBM_DBuffer_NormalRoughness    = 9,
	DBM_DBuffer_Roughness          = 10,
	DBM_Volumetric_DistanceFunction = 11,
	DBM_MAX                        = 12
};


// Enum Engine.EParticleScreenAlignment
enum class EParticleScreenAlignment
{
	PSA_FacingCameraPosition       = 0,
	PSA_Square                     = 1,
	PSA_Rectangle                  = 2,
	PSA_Velocity                   = 3,
	PSA_AwayFromCenter             = 4,
	PSA_TypeSpecific               = 5,
	PSA_FacingCameraDistanceBlend  = 6,
	PSA_MAX                        = 7
};


// Enum Engine.EParticleSourceSelectionMethod
enum class EParticleSourceSelectionMethod
{
	EPSSM_Random                   = 0,
	EPSSM_Sequential               = 1,
	EPSSM_MAX                      = 2
};


// Enum Engine.EModuleType
enum class EModuleType
{
	EPMT_General                   = 0,
	EPMT_TypeData                  = 1,
	EPMT_Beam                      = 2,
	EPMT_Trail                     = 3,
	EPMT_Spawn                     = 4,
	EPMT_Required                  = 5,
	EPMT_Event                     = 6,
	EPMT_Light                     = 7,
	EPMT_SubUV                     = 8,
	EPMT_MAX                       = 9
};


// Enum Engine.EParticleAxisLock
enum class EParticleAxisLock
{
	EPAL_NONE                      = 0,
	EPAL_X                         = 1,
	EPAL_Y                         = 2,
	EPAL_Z                         = 3,
	EPAL_NEGATIVE_X                = 4,
	EPAL_NEGATIVE_Y                = 5,
	EPAL_NEGATIVE_Z                = 6,
	EPAL_ROTATE_X                  = 7,
	EPAL_ROTATE_Y                  = 8,
	EPAL_ROTATE_Z                  = 9,
	EPAL_MAX                       = 10
};


// Enum Engine.EAttractorParticleSelectionMethod
enum class EAttractorParticleSelectionMethod
{
	EAPSM_Random                   = 0,
	EAPSM_Sequential               = 1,
	EAPSM_MAX                      = 2
};


// Enum Engine.Beam2SourceTargetTangentMethod
enum class Beam2SourceTargetTangentMethod
{
	PEB2STTM_Direct                = 0,
	PEB2STTM_UserSet               = 1,
	PEB2STTM_Distribution          = 2,
	PEB2STTM_Emitter               = 3,
	PEB2STTM_MAX                   = 4
};


// Enum Engine.Beam2SourceTargetMethod
enum class Beam2SourceTargetMethod
{
	PEB2STM_Default                = 0,
	PEB2STM_UserSet                = 1,
	PEB2STM_Emitter                = 2,
	PEB2STM_Particle               = 3,
	PEB2STM_Actor                  = 4,
	PEB2STM_MAX                    = 5
};


// Enum Engine.BeamModifierType
enum class BeamModifierType
{
	PEB2MT_Source                  = 0,
	PEB2MT_Target                  = 1,
	PEB2MT_MAX                     = 2
};


// Enum Engine.EParticleCameraOffsetUpdateMethod
enum class EParticleCameraOffsetUpdateMethod
{
	EPCOUM_DirectSet               = 0,
	EPCOUM_Additive                = 1,
	EPCOUM_Scalar                  = 2,
	EPCOUM_MAX                     = 3
};


// Enum Engine.EParticleCollisionComplete
enum class EParticleCollisionComplete
{
	EPCC_Kill                      = 0,
	EPCC_Freeze                    = 1,
	EPCC_HaltCollisions            = 2,
	EPCC_FreezeTranslation         = 3,
	EPCC_FreezeRotation            = 4,
	EPCC_FreezeMovement            = 5,
	EPCC_MAX                       = 6
};


// Enum Engine.EParticleCollisionResponse
enum class EParticleCollisionResponse
{
	EParticleCollisionResponse__Bounce = 0,
	EParticleCollisionResponse__Stop = 1,
	EParticleCollisionResponse__Kill = 2,
	EParticleCollisionResponse__EParticleCollisionResponse_MAX = 3
};


// Enum Engine.ELocationBoneSocketSelectionMethod
enum class ELocationBoneSocketSelectionMethod
{
	BONESOCKETSEL_Sequential       = 0,
	BONESOCKETSEL_Random           = 1,
	BONESOCKETSEL_MAX              = 2
};


// Enum Engine.ELocationBoneSocketSource
enum class ELocationBoneSocketSource
{
	BONESOCKETSOURCE_Bones         = 0,
	BONESOCKETSOURCE_Sockets       = 1,
	BONESOCKETSOURCE_MAX           = 2
};


// Enum Engine.ELocationEmitterSelectionMethod
enum class ELocationEmitterSelectionMethod
{
	ELESM_Random                   = 0,
	ELESM_Sequential               = 1,
	ELESM_MAX                      = 2
};


// Enum Engine.CylinderHeightAxis
enum class CylinderHeightAxis
{
	PMLPC_HEIGHTAXIS_X             = 0,
	PMLPC_HEIGHTAXIS_Y             = 1,
	PMLPC_HEIGHTAXIS_Z             = 2,
	PMLPC_HEIGHTAXIS_MAX           = 3
};


// Enum Engine.ELocationSkelVertSurfaceSource
enum class ELocationSkelVertSurfaceSource
{
	VERTSURFACESOURCE_Vert         = 0,
	VERTSURFACESOURCE_Surface      = 1,
	VERTSURFACESOURCE_MAX          = 2
};


// Enum Engine.EOrbitChainMode
enum class EOrbitChainMode
{
	EOChainMode_Add                = 0,
	EOChainMode_Scale              = 1,
	EOChainMode_Link               = 2,
	EOChainMode_MAX                = 3
};


// Enum Engine.EEmitterDynamicParameterValue
enum class EEmitterDynamicParameterValue
{
	EDPV_UserSet                   = 0,
	EDPV_VelocityX                 = 1,
	EDPV_VelocityY                 = 2,
	EDPV_VelocityZ                 = 3,
	EDPV_VelocityMag               = 4,
	EDPV_MAX                       = 5
};


// Enum Engine.EOpacitySourceMode
enum class EOpacitySourceMode
{
	OSM_Alpha                      = 0,
	OSM_ColorBrightness            = 1,
	OSM_RedChannel                 = 2,
	OSM_GreenChannel               = 3,
	OSM_BlueChannel                = 4,
	OSM_MAX                        = 5
};


// Enum Engine.ESubUVBoundingVertexCount
enum class ESubUVBoundingVertexCount
{
	BVC_FourVertices               = 0,
	BVC_EightVertices              = 1,
	BVC_MAX                        = 2
};


// Enum Engine.EEmitterNormalsMode
enum class EEmitterNormalsMode
{
	ENM_CameraFacing               = 0,
	ENM_Spherical                  = 1,
	ENM_Cylindrical                = 2,
	ENM_MAX                        = 3
};


// Enum Engine.EParticleSortMode
enum class EParticleSortMode
{
	PSORTMODE_None                 = 0,
	PSORTMODE_ViewProjDepth        = 1,
	PSORTMODE_DistanceToView       = 2,
	PSORTMODE_Age_OldestFirst      = 3,
	PSORTMODE_Age_NewestFirst      = 4,
	PSORTMODE_MAX                  = 5
};


// Enum Engine.EParticleUVFlipMode
enum class EParticleUVFlipMode
{
	EParticleUVFlipMode__None      = 0,
	EParticleUVFlipMode__FlipUV    = 1,
	EParticleUVFlipMode__FlipUOnly = 2,
	EParticleUVFlipMode__FlipVOnly = 3,
	EParticleUVFlipMode__RandomFlipUV = 4,
	EParticleUVFlipMode__RandomFlipUOnly = 5,
	EParticleUVFlipMode__RandomFlipVOnly = 6,
	EParticleUVFlipMode__RandomFlipUVIndependent = 7,
	EParticleUVFlipMode__EParticleUVFlipMode_MAX = 8
};


// Enum Engine.ETrail2SourceMethod
enum class ETrail2SourceMethod
{
	PET2SRCM_Default               = 0,
	PET2SRCM_Particle              = 1,
	PET2SRCM_Actor                 = 2,
	PET2SRCM_MAX                   = 3
};


// Enum Engine.EBeamTaperMethod
enum class EBeamTaperMethod
{
	PEBTM_None                     = 0,
	PEBTM_Full                     = 1,
	PEBTM_Partial                  = 2,
	PEBTM_MAX                      = 3
};


// Enum Engine.EBeam2Method
enum class EBeam2Method
{
	PEB2M_Distance                 = 0,
	PEB2M_Target                   = 1,
	PEB2M_Branch                   = 2,
	PEB2M_MAX                      = 3
};


// Enum Engine.EMeshCameraFacingOptions
enum class EMeshCameraFacingOptions
{
	XAxisFacing_NoUp               = 0,
	XAxisFacing_ZUp                = 1,
	XAxisFacing_NegativeZUp        = 2,
	XAxisFacing_YUp                = 3,
	XAxisFacing_NegativeYUp        = 4,
	LockedAxis_ZAxisFacing         = 5,
	LockedAxis_NegativeZAxisFacing = 6,
	LockedAxis_YAxisFacing         = 7,
	LockedAxis_NegativeYAxisFacing = 8,
	VelocityAligned_ZAxisFacing    = 9,
	VelocityAligned_NegativeZAxisFacing = 10,
	VelocityAligned_YAxisFacing    = 11,
	VelocityAligned_NegativeYAxisFacing = 12,
	EMeshCameraFacingOptions_MAX   = 13
};


// Enum Engine.EMeshCameraFacingUpAxis
enum class EMeshCameraFacingUpAxis
{
	CameraFacing_NoneUP            = 0,
	CameraFacing_ZUp               = 1,
	CameraFacing_NegativeZUp       = 2,
	CameraFacing_YUp               = 3,
	CameraFacing_NegativeYUp       = 4,
	CameraFacing_MAX               = 5
};


// Enum Engine.EMeshScreenAlignment
enum class EMeshScreenAlignment
{
	PSMA_MeshFaceCameraWithRoll    = 0,
	PSMA_MeshFaceCameraWithSpin    = 1,
	PSMA_MeshFaceCameraWithLockedAxis = 2,
	PSMA_MAX                       = 3
};


// Enum Engine.ETrailsRenderAxisOption
enum class ETrailsRenderAxisOption
{
	Trails_CameraUp                = 0,
	Trails_SourceUp                = 1,
	Trails_WorldUp                 = 2,
	Trails_MAX                     = 3
};


// Enum Engine.ECloudStorageDelegate
enum class ECloudStorageDelegate
{
	CSD_KeyValueReadComplete       = 0,
	CSD_KeyValueWriteComplete      = 1,
	CSD_ValueChanged               = 2,
	CSD_DocumentQueryComplete      = 3,
	CSD_DocumentReadComplete       = 4,
	CSD_DocumentWriteComplete      = 5,
	CSD_DocumentConflictDetected   = 6,
	CSD_MAX                        = 7
};


// Enum Engine.EAdManagerDelegate
enum class EAdManagerDelegate
{
	AMD_ClickedBanner              = 0,
	AMD_UserClosedAd               = 1,
	AMD_MAX                        = 2
};


// Enum Engine.EMicroTransactionResult
enum class EMicroTransactionResult
{
	MTR_Succeeded                  = 0,
	MTR_Failed                     = 1,
	MTR_Canceled                   = 2,
	MTR_RestoredFromServer         = 3,
	MTR_MAX                        = 4
};


// Enum Engine.EMicroTransactionDelegate
enum class EMicroTransactionDelegate
{
	MTD_PurchaseQueryComplete      = 0,
	MTD_PurchaseComplete           = 1,
	MTD_MAX                        = 2
};


// Enum Engine.ETwitterIntegrationDelegate
enum class ETwitterIntegrationDelegate
{
	TID_AuthorizeComplete          = 0,
	TID_TweetUIComplete            = 1,
	TID_RequestComplete            = 2,
	TID_MAX                        = 3
};


// Enum Engine.ETwitterRequestMethod
enum class ETwitterRequestMethod
{
	TRM_Get                        = 0,
	TRM_Post                       = 1,
	TRM_Delete                     = 2,
	TRM_MAX                        = 3
};


// Enum Engine.EReporterLineStyle
enum class EReporterLineStyle
{
	EReporterLineStyle__Line       = 0,
	EReporterLineStyle__Dash       = 1,
	EReporterLineStyle__EReporterLineStyle_MAX = 2
};


// Enum Engine.ELegendPosition
enum class ELegendPosition
{
	ELegendPosition__Outside       = 0,
	ELegendPosition__Inside        = 1,
	ELegendPosition__ELegendPosition_MAX = 2
};


// Enum Engine.EGraphDataStyle
enum class EGraphDataStyle
{
	EGraphDataStyle__Lines         = 0,
	EGraphDataStyle__Filled        = 1,
	EGraphDataStyle__EGraphDataStyle_MAX = 2
};


// Enum Engine.EGraphAxisStyle
enum class EGraphAxisStyle
{
	EGraphAxisStyle__Lines         = 0,
	EGraphAxisStyle__Notches       = 1,
	EGraphAxisStyle__Grid          = 2,
	EGraphAxisStyle__EGraphAxisStyle_MAX = 3
};


// Enum Engine.EConstraintTransform
enum class EConstraintTransform
{
	EConstraintTransform__Absolute = 0,
	EConstraintTransform__Relative = 1,
	EConstraintTransform__EConstraintTransform_MAX = 2
};


// Enum Engine.EControlConstraint
enum class EControlConstraint
{
	EControlConstraint__Orientation = 0,
	EControlConstraint__Translation = 1,
	EControlConstraint__Max        = 2,
	EControlConstraint__EControlConstraint_MAX = 3
};


// Enum Engine.EImpactDamageOverride
enum class EImpactDamageOverride
{
	IDO_None                       = 0,
	IDO_On                         = 1,
	IDO_Off                        = 2,
	IDO_MAX                        = 3
};


// Enum Engine.ETextureSourceFormat
enum class ETextureSourceFormat
{
	TSF_Invalid                    = 0,
	TSF_G8                         = 1,
	TSF_BGRA8                      = 2,
	TSF_BGRE8                      = 3,
	TSF_RGBA16                     = 4,
	TSF_RGBA16F                    = 5,
	TSF_RGBA8                      = 6,
	TSF_RGBE8                      = 7,
	TSF_MAX                        = 8
};


// Enum Engine.ETextureSourceArtType
enum class ETextureSourceArtType
{
	TSAT_Uncompressed              = 0,
	TSAT_PNGCompressed             = 1,
	TSAT_DDSFile                   = 2,
	TSAT_MAX                       = 3
};


// Enum Engine.ETextureMipCount
enum class ETextureMipCount
{
	TMC_ResidentMips               = 0,
	TMC_AllMips                    = 1,
	TMC_AllMipsBiased              = 2,
	TMC_MAX                        = 3
};


// Enum Engine.ECompositeTextureMode
enum class ECompositeTextureMode
{
	CTM_Disabled                   = 0,
	CTM_NormalRoughnessToRed       = 1,
	CTM_NormalRoughnessToGreen     = 2,
	CTM_NormalRoughnessToBlue      = 3,
	CTM_NormalRoughnessToAlpha     = 4,
	CTM_MAX                        = 5
};


// Enum Engine.TextureAddress
enum class TextureAddress
{
	TA_Wrap                        = 0,
	TA_Clamp                       = 1,
	TA_Mirror                      = 2,
	TA_MAX                         = 3
};


// Enum Engine.TextureFilter
enum class TextureFilter
{
	TF_Nearest                     = 0,
	TF_Bilinear                    = 1,
	TF_Trilinear                   = 2,
	TF_Default                     = 3,
	TF_MAX                         = 4
};


// Enum Engine.TextureCompressionSettings
enum class TextureCompressionSettings
{
	TC_Default                     = 0,
	TC_Normalmap                   = 1,
	TC_Masks                       = 2,
	TC_Grayscale                   = 3,
	TC_Displacementmap             = 4,
	TC_VectorDisplacementmap       = 5,
	TC_HDR                         = 6,
	TC_EditorIcon                  = 7,
	TC_Alpha                       = 8,
	TC_DistanceFieldFont           = 9,
	TC_HDR_Compressed              = 10,
	TC_BC7                         = 11,
	TC_MAX                         = 12
};


// Enum Engine.EAudioOutputTarget
enum class EAudioOutputTarget
{
	EAudioOutputTarget__Speaker    = 0,
	EAudioOutputTarget__Controller = 1,
	EAudioOutputTarget__ControllerFallbackToSpeaker = 2,
	EAudioOutputTarget__EAudioOutputTarget_MAX = 3
};


// Enum Engine.ModulationParamMode
enum class ModulationParamMode
{
	MPM_Normal                     = 0,
	MPM_Abs                        = 1,
	MPM_Direct                     = 2,
	MPM_MAX                        = 3
};


// Enum Engine.EStaticMeshLODType
enum class EStaticMeshLODType
{
	EStaticMeshLODType__Reduction  = 0,
	EStaticMeshLODType__Proxy      = 1,
	EStaticMeshLODType__EStaticMeshLODType_MAX = 2
};


// Enum Engine.EOptimizationType
enum class EOptimizationType
{
	OT_NumOfTriangles              = 0,
	OT_MaxDeviation                = 1,
	OT_MAX                         = 2
};


// Enum Engine.EImportanceLevel
enum class EImportanceLevel
{
	IL_Off                         = 0,
	IL_Lowest                      = 1,
	IL_Low                         = 2,
	IL_Normal                      = 3,
	IL_High                        = 4,
	IL_Highest                     = 5,
	TEMP_BROKEN2                   = 6,
	EImportanceLevel_MAX           = 7
};


// Enum Engine.ENormalMode
enum class ENormalMode
{
	NM_PreserveSmoothingGroups     = 0,
	NM_RecalculateNormals          = 1,
	NM_RecalculateNormalsSmooth    = 2,
	NM_RecalculateNormalsHard      = 3,
	TEMP_BROKEN                    = 4,
	ENormalMode_MAX                = 5
};


// Enum Engine.EVertexAttributeStreamType
enum class EVertexAttributeStreamType
{
	VAST_unknown                   = 0,
	VAST_float                     = 1,
	VAST_float2                    = 2,
	VAST_float3                    = 3,
	VAST_float4                    = 4,
	VAST_MAX                       = 5
};


// Enum Engine.EUserDefinedStructureStatus
enum class EUserDefinedStructureStatus
{
	UDSS_UpToDate                  = 0,
	UDSS_Dirty                     = 1,
	UDSS_Error                     = 2,
	UDSS_Duplicate                 = 3,
	UDSS_MAX                       = 4
};


// Enum Engine.EVectorFieldConstructionOp
enum class EVectorFieldConstructionOp
{
	VFCO_Extrude                   = 0,
	VFCO_Revolve                   = 1,
	VFCO_MAX                       = 2
};


// Enum Engine.EEvaluatorMode
enum class EEvaluatorMode
{
	EEvaluatorMode__EM_Standard    = 0,
	EEvaluatorMode__EM_Freeze      = 1,
	EEvaluatorMode__EM_DelayedFreeze = 2,
	EEvaluatorMode__EM_MAX         = 3
};


// Enum Engine.EEvaluatorDataSource
enum class EEvaluatorDataSource
{
	EEvaluatorDataSource__EDS_SourcePose = 0,
	EEvaluatorDataSource__EDS_DestinationPose = 1,
	EEvaluatorDataSource__EDS_MAX  = 2
};


// Enum Engine.ECameraAlphaBlendMode
enum class ECameraAlphaBlendMode
{
	ECameraAlphaBlendMode__CABM_Linear = 0,
	ECameraAlphaBlendMode__CABM_Cubic = 1,
	ECameraAlphaBlendMode__CABM_MAX = 2
};


// Enum Engine.AnimPhysCollisionType
enum class AnimPhysCollisionType
{
	AnimPhysCollisionType__CoM     = 0,
	AnimPhysCollisionType__CustomSphere = 1,
	AnimPhysCollisionType__InnerSphere = 2,
	AnimPhysCollisionType__OuterSphere = 3,
	AnimPhysCollisionType__AnimPhysCollisionType_MAX = 4
};


// Enum Engine.AnimPhysTwistAxis
enum class AnimPhysTwistAxis
{
	AnimPhysTwistAxis__AxisX       = 0,
	AnimPhysTwistAxis__AxisY       = 1,
	AnimPhysTwistAxis__AxisZ       = 2,
	AnimPhysTwistAxis__AnimPhysTwistAxis_MAX = 3
};



//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class Engine.Actor
// 0x0360 (0x0388 - 0x0028)
class AActor : public UObject
{
public:
	struct FActorTickFunction                          PrimaryActorTick;                                 		// 0x0028(0x0058) (CPF_Edit, CPF_DisableEditOnInstance)
	float                                              CustomTimeDilation;                               		// 0x0080(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHidden : 1;                                      		// 0x0084(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net)
	unsigned char                                      bNetTemporary : 1;                                		// 0x0084(0x0001)
	unsigned char                                      bNetStartup : 1;                                  		// 0x0084(0x0001)
	unsigned char                                      bOnlyRelevantToOwner : 1;                         		// 0x0084(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	unsigned char                                      bAlwaysRelevant : 1;                              		// 0x0084(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	unsigned char                                      bReplicateMovement : 1;                           		// 0x0084(0x0001) (CPF_Edit, CPF_Net, CPF_DisableEditOnInstance)
	unsigned char                                      bTearOff : 1;                                     		// 0x0084(0x0001) (CPF_Net)
	unsigned char                                      bExchangedRoles : 1;                              		// 0x0084(0x0001) (CPF_Transient)
	unsigned char                                      bPendingNetUpdate : 1;                            		// 0x0085(0x0001) (CPF_Transient)
	unsigned char                                      bNetLoadOnClient : 1;                             		// 0x0085(0x0001) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bNetUseOwnerRelevancy : 1;                        		// 0x0085(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	unsigned char                                      bBlockInput : 1;                                  		// 0x0085(0x0001) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bAllowTickBeforeBeginPlay : 1;                    		// 0x0085(0x0001) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bActorEnableCollision : 1;                        		// 0x0086(0x0001)
	unsigned char                                      bReplicates : 1;                                  		// 0x0086(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x1];                               		// 0x0087(0x0001) MISSED OFFSET
	struct FName                                       NetDriverName;                                    		// 0x0088(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ENetRole>                   RemoteRole;                                       		// 0x0090(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                               		// 0x0091(0x0007) MISSED OFFSET
	class AActor*                                      Owner;                                            		// 0x0098(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRepMovement                                ReplicatedMovement;                               		// 0x00A0(0x0034) (CPF_Edit, CPF_Net, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x4];                               		// 0x00D4(0x0004) MISSED OFFSET
	struct FRepAttachment                              AttachmentReplication;                            		// 0x00D8(0x0040) (CPF_Net, CPF_Transient)
	TEnumAsByte<enum class ENetRole>                   Role;                                             		// 0x0118(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                               		// 0x0119(0x0001) MISSED OFFSET
	TEnumAsByte<enum class EAutoReceiveInput>          AutoReceiveInput;                                 		// 0x011A(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                               		// 0x011B(0x0001) MISSED OFFSET
	int                                                InputPriority;                                    		// 0x011C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UInputComponent*                             InputComponent;                                   		// 0x0120(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TEnumAsByte<enum class EInputConsumeOptions>       InputConsumeOption;                               		// 0x0128(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                               		// 0x0129(0x0003) MISSED OFFSET
	float                                              NetCullDistanceSquared;                           		// 0x012C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                NetTag;                                           		// 0x0130(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              NetUpdateTime;                                    		// 0x0134(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              NetUpdateFrequency;                               		// 0x0138(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              MinNetUpdateFrequency;                            		// 0x013C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              NetPriority;                                      		// 0x0140(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LastNetUpdateTime;                                		// 0x0144(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bAutoDestroyWhenFinished : 1;                     		// 0x0148(0x0001) (CPF_BlueprintVisible)
	unsigned char                                      bCanBeDamaged : 1;                                		// 0x0148(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_SaveGame)
	unsigned char                                      bActorIsBeingDestroyed : 1;                       		// 0x0148(0x0001) (CPF_Transient, CPF_DuplicateTransient)
	unsigned char                                      bCollideWhenPlacing : 1;                          		// 0x0148(0x0001)
	unsigned char                                      bFindCameraComponentWhenViewTarget : 1;           		// 0x0148(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bRelevantForNetworkReplays : 1;                   		// 0x0148(0x0001)
	unsigned char                                      bGenerateOverlapEventsDuringLevelStreaming : 1;   		// 0x0148(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	TEnumAsByte<enum class ESpawnActorCollisionHandlingMethod> SpawnCollisionHandlingMethod;                     		// 0x0149(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x6];                               		// 0x014A(0x0006) MISSED OFFSET
	class APawn*                                       Instigator;                                       		// 0x0150(0x0008) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class AActor*>                              Children;                                         		// 0x0158(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class USceneComponent*                             RootComponent;                                    		// 0x0168(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class AMatineeActor*>                       ControllingMatineeActors;                         		// 0x0170(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	float                                              InitialLifeSpan;                                  		// 0x0180(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0xC];                               		// 0x0184(0x000C) MISSED OFFSET
	TArray<struct FName>                               Layers;                                           		// 0x0190(0x0010) (CPF_ZeroConstructor)
	TWeakObjectPtr<class AActor>                       ParentComponentActor;                             		// 0x01A0(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	TWeakObjectPtr<class UChildActorComponent>         ParentComponent;                                  		// 0x01A8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bAllowReceiveTickEventOnDedicatedServer : 1;      		// 0x01B0(0x0001)
	unsigned char                                      bActorSeamlessTraveled : 1;                       		// 0x01B0(0x0001)
	unsigned char                                      bIgnoresOriginShifting : 1;                       		// 0x01B0(0x0001) (CPF_Edit)
	unsigned char                                      bEnableAutoLODGeneration : 1;                     		// 0x01B0(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData08[0x7];                               		// 0x01B1(0x0007) MISSED OFFSET
	TArray<struct FName>                               Tags;                                             		// 0x01B8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	uint64_t                                           HiddenEditorViews;                                		// 0x01C8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnTakeAnyDamage;                                  		// 0x01D0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTakePointDamage;                                		// 0x01E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActorBeginOverlap;                              		// 0x01F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActorEndOverlap;                                		// 0x0200(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginCursorOver;                                		// 0x0210(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndCursorOver;                                  		// 0x0220(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnClicked;                                        		// 0x0230(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReleased;                                       		// 0x0240(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchBegin;                                		// 0x0250(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnd;                                  		// 0x0260(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnter;                                		// 0x0270(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchLeave;                                		// 0x0280(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActorHit;                                       		// 0x0290(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDestroyed;                                      		// 0x02A0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndPlay;                                        		// 0x02B0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData09[0xA0];                              		// 0x02C0(0x00A0) MISSED OFFSET
	TArray<class UActorComponent*>                     BlueprintCreatedComponents;                       		// 0x0360(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	TArray<class UActorComponent*>                     InstanceComponents;                               		// 0x0370(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      UnknownData10[0x8];                               		// 0x0380(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Actor");
		return ptr;
	}


	bool WasRecentlyRendered(float Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<enum class ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetLifeSpan(float InLifespan);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<enum class EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<enum class ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<enum class ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<enum class ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<enum class ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor(TEnumAsByte<enum class EDetachmentRule> LocationRule, TEnumAsByte<enum class EDetachmentRule> RotationRule, TEnumAsByte<enum class EDetachmentRule> ScaleRule);
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, TEnumAsByte<enum class EAttachmentRule> LocationRule, TEnumAsByte<enum class EAttachmentRule> RotationRule, TEnumAsByte<enum class EAttachmentRule> ScaleRule, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, TEnumAsByte<enum class EAttachmentRule> LocationRule, TEnumAsByte<enum class EAttachmentRule> RotationRule, TEnumAsByte<enum class EAttachmentRule> ScaleRule, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<enum class EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<enum class EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<enum class ENetRole> GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& Tag);
};


// Class Engine.HUD
// 0x00E8 (0x0470 - 0x0388)
class AHUD : public AActor
{
public:
	class APlayerController*                           PlayerOwner;                                      		// 0x0388(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLostFocusPaused : 1;                             		// 0x0390(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bShowHUD : 1;                                     		// 0x0390(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bShowDebugInfo : 1;                               		// 0x0390(0x0001) (CPF_BlueprintVisible)
	unsigned char                                      bShowHitBoxDebugInfo : 1;                         		// 0x0390(0x0001) (CPF_BlueprintVisible)
	unsigned char                                      bShowOverlays : 1;                                		// 0x0390(0x0001) (CPF_BlueprintVisible)
	unsigned char                                      bEnableDebugTextShadow : 1;                       		// 0x0390(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0391(0x0007) MISSED OFFSET
	TArray<class AActor*>                              PostRenderedActors;                               		// 0x0398(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                               		// 0x03A8(0x0008) MISSED OFFSET
	TArray<struct FName>                               DebugDisplay;                                     		// 0x03B0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FName>                               ToggledDebugCategories;                           		// 0x03C0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UCanvas*                                     Canvas;                                           		// 0x03D0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCanvas*                                     DebugCanvas;                                      		// 0x03D8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FDebugTextInfo>                      DebugTextList;                                    		// 0x03E0(0x0010) (CPF_ZeroConstructor)
	class UClass*                                      ShowDebugTargetDesiredClass;                      		// 0x03F0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class AActor*                                      ShowDebugTargetActor;                             		// 0x03F8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x70];                              		// 0x0400(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HUD");
		return ptr;
	}


	void ShowHUD();
	void ShowDebugToggleSubCategory(const struct FName& Category);
	void ShowDebugForReticleTargetToggle(class UClass* DesiredClass);
	void ShowDebug(const struct FName& DebugType);
	void RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText);
	void RemoveAllDebugStrings();
	void ReceiveHitBoxRelease(const struct FName& BoxName);
	void ReceiveHitBoxEndCursorOver(const struct FName& BoxName);
	void ReceiveHitBoxClick(const struct FName& BoxName);
	void ReceiveHitBoxBeginCursorOver(const struct FName& BoxName);
	void ReceiveDrawHUD(int SizeX, int SizeY);
	struct FVector Project(const struct FVector& Location);
	void GetTextSize(const struct FString& Text, class UFont* Font, float Scale, float* OutWidth, float* OutHeight);
	class APlayerController* GetOwningPlayerController();
	class APawn* GetOwningPawn();
	void GetActorsInSelectionRectangle(class UClass* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed, TArray<class AActor*>* OutActors);
	void DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);
	void DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, TEnumAsByte<enum class EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawText(const struct FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition);
	void DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);
	void DrawMaterialTriangle(class UMaterialInterface* Material, const struct FVector2D& V0_Pos, const struct FVector2D& V1_Pos, const struct FVector2D& V2_Pos, const struct FVector2D& V0_UV, const struct FVector2D& V1_UV, const struct FVector2D& V2_UV, const struct FLinearColor& V0_Color, const struct FLinearColor& V1_Color, const struct FLinearColor& V2_Color);
	void DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);
	void DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor, float LineThickness);
	void Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection);
	void AddHitBox(const struct FVector2D& Position, const struct FVector2D& Size, const struct FName& InName, bool bConsumesInput, int Priority);
	void AddDebugText(const struct FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow);
};


// Class Engine.DataAsset
// 0x0000 (0x0028 - 0x0028)
class UDataAsset : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DataAsset");
		return ptr;
	}

};


// Class Engine.AnimNotify
// 0x0010 (0x0038 - 0x0028)
class UAnimNotify : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify");
		return ptr;
	}


	bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	struct FString GetNotifyName();
};


// Class Engine.ActorComponent
// 0x00C8 (0x00F0 - 0x0028)
class UActorComponent : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET
	struct FActorComponentTickFunction                 PrimaryComponentTick;                             		// 0x0030(0x0058) (CPF_Edit, CPF_DisableEditOnInstance)
	TArray<struct FName>                               ComponentTags;                                    		// 0x0088(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                    		// 0x0098(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      bReplicates : 1;                                  		// 0x00A8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_DisableEditOnInstance)
	unsigned char                                      bNetAddressable : 1;                              		// 0x00A8(0x0001)
	unsigned char                                      bCreatedByConstructionScript : 1;                 		// 0x00A9(0x0001) (CPF_Deprecated)
	unsigned char                                      bInstanceComponent : 1;                           		// 0x00AA(0x0001) (CPF_Deprecated)
	unsigned char                                      bAutoActivate : 1;                                		// 0x00AA(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bIsActive : 1;                                    		// 0x00AA(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      bEditableWhenInherited : 1;                       		// 0x00AA(0x0001) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bCanEverAffectNavigation : 1;                     		// 0x00AA(0x0001) (CPF_Edit)
	unsigned char                                      bIsEditorOnly : 1;                                		// 0x00AB(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	TEnumAsByte<enum class EComponentCreationMethod>   CreationMethod;                                   		// 0x00AC(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xB];                               		// 0x00AD(0x000B) MISSED OFFSET
	TArray<struct FSimpleMemberReference>              UCSModifiedProperties;                            		// 0x00B8(0x0010) (CPF_ZeroConstructor)
	struct FScriptMulticastDelegate                    OnComponentActivated;                             		// 0x00C8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentDeactivated;                           		// 0x00D8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData02[0x8];                               		// 0x00E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorComponent");
		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<enum class ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetIsReplicated(bool ShouldReplicate);
	void SetComponentTickInterval(float TickInterval);
	void SetComponentTickEnabled(bool bEnabled);
	void SetActive(bool bNewActive, bool bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<enum class EEndPlayReason> EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject* Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(const struct FName& Tag);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void Activate(bool bReset);
};


// Class Engine.SceneComponent
// 0x0210 (0x0300 - 0x00F0)
class USceneComponent : public UActorComponent
{
public:
	class USceneComponent*                             AttachParent;                                     		// 0x00F0(0x0008) (CPF_ExportObject, CPF_Net, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class USceneComponent*>                     AttachChildren;                                   		// 0x00F8(0x0010) (CPF_ExportObject, CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData00[0x50];                              		// 0x0108(0x0050) UNKNOWN PROPERTY: SetProperty Engine.SceneComponent.ClientAttachedChildren
	struct FName                                       AttachSocketName;                                 		// 0x0158(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bWorldToComponentUpdated : 1;                     		// 0x0160(0x0001) (CPF_Transient)
	unsigned char                                      bAbsoluteLocation : 1;                            		// 0x0160(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_Net)
	unsigned char                                      bAbsoluteRotation : 1;                            		// 0x0160(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_Net)
	unsigned char                                      bAbsoluteScale : 1;                               		// 0x0160(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_Net)
	unsigned char                                      bVisible : 1;                                     		// 0x0160(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net)
	unsigned char                                      bHiddenInGame : 1;                                		// 0x0160(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bShouldUpdatePhysicsVolume : 1;                   		// 0x0160(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bBoundsChangeTriggersStreamingDataRebuild : 1;    		// 0x0161(0x0001)
	unsigned char                                      bUseAttachParentBound : 1;                        		// 0x0161(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bAbsoluteTranslation : 1;                         		// 0x0161(0x0001) (CPF_Deprecated)
	unsigned char                                      UnknownData01[0x2];                               		// 0x0162(0x0002) MISSED OFFSET
	TWeakObjectPtr<class APhysicsVolume>               PhysicsVolume;                                    		// 0x0164(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x74];                              		// 0x016C(0x0074) MISSED OFFSET
	struct FVector                                     RelativeLocation;                                 		// 0x01E0(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                 		// 0x01EC(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x28];                              		// 0x01F8(0x0028) MISSED OFFSET
	struct FVector                                     RelativeScale3D;                                  		// 0x0220(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     RelativeTranslation;                              		// 0x022C(0x000C) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	TEnumAsByte<enum class EComponentMobility>         Mobility;                                         		// 0x0238(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EDetailMode>                DetailMode;                                       		// 0x0239(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x1E];                              		// 0x023A(0x001E) MISSED OFFSET
	struct FVector                                     ComponentVelocity;                                		// 0x0258(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                               		// 0x0264(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    PhysicsVolumeChangedDelegate;                     		// 0x0268(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData06[0x88];                              		// 0x0278(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneComponent");
		return ptr;
	}


	void ToggleVisibility(bool bPropagateToChildren);
	bool SnapTo(class USceneComponent* InParent, const struct FName& InSocketName);
	void SetWorldScale3D(const struct FVector& NewScale);
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void SetRelativeScale3D(const struct FVector& NewScale3D);
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void ResetRelativeTransform();
	void OnRep_Visibility(bool OldValue);
	void OnRep_Transform();
	void OnRep_AttachSocketName();
	void OnRep_AttachParent();
	void OnRep_AttachChildren();
	void K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	struct FTransform K2_GetComponentToWorld();
	struct FVector K2_GetComponentScale();
	struct FRotator K2_GetComponentRotation();
	struct FVector K2_GetComponentLocation();
	void K2_DetachFromComponent(TEnumAsByte<enum class EDetachmentRule> LocationRule, TEnumAsByte<enum class EDetachmentRule> RotationRule, TEnumAsByte<enum class EDetachmentRule> ScaleRule, bool bCallModify);
	bool K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, TEnumAsByte<enum class EAttachmentRule> LocationRule, TEnumAsByte<enum class EAttachmentRule> RotationRule, TEnumAsByte<enum class EAttachmentRule> ScaleRule, bool bWeldSimulatedBodies);
	bool K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<enum class EAttachLocation> AttachType, bool bWeldSimulatedBodies);
	void K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsVisible();
	bool IsSimulatingPhysics(const struct FName& BoneName);
	bool IsAnySimulatingPhysics();
	struct FVector GetUpVector();
	struct FTransform GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<enum class ERelativeTransformSpace> TransformSpace);
	struct FRotator GetSocketRotation(const struct FName& InSocketName);
	struct FQuat GetSocketQuaternion(const struct FName& InSocketName);
	struct FVector GetSocketLocation(const struct FName& InSocketName);
	struct FVector GetRightVector();
	struct FTransform GetRelativeTransform();
	class APhysicsVolume* GetPhysicsVolume();
	void GetParentComponents(TArray<class USceneComponent*>* Parents);
	int GetNumChildrenComponents();
	struct FVector GetForwardVector();
	struct FVector GetComponentVelocity();
	void GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* GetChildComponent(int ChildIndex);
	struct FName GetAttachSocketName();
	class USceneComponent* GetAttachParent();
	TArray<struct FName> GetAllSocketNames();
	bool DoesSocketExist(const struct FName& InSocketName);
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
};


// Class Engine.PrimitiveComponent
// 0x03A0 (0x06A0 - 0x0300)
class UPrimitiveComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0300(0x0008) MISSED OFFSET
	float                                              MinDrawDistance;                                  		// 0x0308(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LDMaxDrawDistance;                                		// 0x030C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CachedMaxDrawDistance;                            		// 0x0310(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	TEnumAsByte<enum class ESceneDepthPriorityGroup>   DepthPriorityGroup;                               		// 0x0314(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ESceneDepthPriorityGroup>   ViewOwnerDepthPriorityGroup;                      		// 0x0315(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                               		// 0x0316(0x0002) MISSED OFFSET
	unsigned char                                      bAlwaysCreatePhysicsState : 1;                    		// 0x0318(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bGenerateOverlapEvents : 1;                       		// 0x0318(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bMultiBodyOverlap : 1;                            		// 0x0318(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bCheckAsyncSceneOnMove : 1;                       		// 0x0318(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bTraceComplexOnMove : 1;                          		// 0x0318(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bReturnMaterialOnMove : 1;                        		// 0x0318(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUseViewOwnerDepthPriorityGroup : 1;              		// 0x0318(0x0001)
	unsigned char                                      bAllowCullDistanceVolume : 1;                     		// 0x0318(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bImportantMesh : 1;                               		// 0x0319(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bHasMotionBlurVelocityMeshes : 1;                 		// 0x0319(0x0001)
	unsigned char                                      bVisibleInReflectionCaptures : 1;                 		// 0x0319(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bRenderInMainPass : 1;                            		// 0x0319(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bReceivesDecals : 1;                              		// 0x0319(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bOwnerNoSee : 1;                                  		// 0x0319(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bOnlyOwnerSee : 1;                                		// 0x0319(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bTreatAsBackgroundForOcclusion : 1;               		// 0x0319(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUseAsOccluder : 1;                               		// 0x031A(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bSelectable : 1;                                  		// 0x031A(0x0001)
	unsigned char                                      bForceMipStreaming : 1;                           		// 0x031A(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bHasPerInstanceHitProxies : 1;                    		// 0x031A(0x0001)
	unsigned char                                      UnknownData02[0x1];                               		// 0x031B(0x0001) MISSED OFFSET
	TEnumAsByte<enum class EIndoorOutdoorMask>         IndoorOutdoorMask;                                		// 0x031C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                               		// 0x031D(0x0003) MISSED OFFSET
	unsigned char                                      CastShadow : 1;                                   		// 0x0320(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;               		// 0x0320(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bAffectDistanceFieldLighting : 1;                 		// 0x0320(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bCastDynamicShadow : 1;                           		// 0x0320(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bCastStaticShadow : 1;                            		// 0x0320(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bCastVolumetricTranslucentShadow : 1;             		// 0x0320(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bSelfShadowOnly : 1;                              		// 0x0320(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bCastFarShadow : 1;                               		// 0x0320(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bCastInsetShadow : 1;                             		// 0x0321(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bCastCinematicShadow : 1;                         		// 0x0321(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bCastHiddenShadow : 1;                            		// 0x0321(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bCastShadowAsTwoSided : 1;                        		// 0x0321(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bLightAsIfStatic : 1;                             		// 0x0321(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bLightAttachmentsAsGroup : 1;                     		// 0x0321(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData04[0x2];                               		// 0x0322(0x0002) MISSED OFFSET
	TEnumAsByte<enum class EIndirectLightingCacheQuality> IndirectLightingCacheQuality;                     		// 0x0324(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                               		// 0x0325(0x0003) MISSED OFFSET
	unsigned char                                      bReceiveCombinedCSMAndStaticShadowsFromStationaryLights : 1;		// 0x0328(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bSingleSampleShadowFromStationaryLights : 1;      		// 0x0328(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData06[0x3];                               		// 0x0329(0x0003) MISSED OFFSET
	struct FLightingChannels                           LightingChannels;                                 		// 0x032C(0x0003) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData07[0x1];                               		// 0x032F(0x0001) MISSED OFFSET
	unsigned char                                      bIgnoreRadialImpulse : 1;                         		// 0x0330(0x0001)
	unsigned char                                      bIgnoreRadialForce : 1;                           		// 0x0330(0x0001)
	unsigned char                                      AlwaysLoadOnClient : 1;                           		// 0x0330(0x0001)
	unsigned char                                      AlwaysLoadOnServer : 1;                           		// 0x0330(0x0001)
	unsigned char                                      bUseEditorCompositing : 1;                        		// 0x0330(0x0001)
	unsigned char                                      bRenderCustomDepth : 1;                           		// 0x0330(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData08[0x3];                               		// 0x0331(0x0003) MISSED OFFSET
	int                                                CustomDepthStencilValue;                          		// 0x0334(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                TranslucencySortPriority;                         		// 0x0338(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                DepthBias;                                        		// 0x033C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                VisibilityId;                                     		// 0x0340(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                               		// 0x0344(0x0004) MISSED OFFSET
	float                                              LpvBiasMultiplier;                                		// 0x0348(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                               		// 0x034C(0x0004) MISSED OFFSET
	struct FBodyInstance                               BodyInstance;                                     		// 0x0350(0x01B0) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData11[0x8];                               		// 0x0500(0x0008) MISSED OFFSET
	TEnumAsByte<enum class EHasCustomNavigableGeometry> bHasCustomNavigableGeometry;                      		// 0x0508(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                               		// 0x0509(0x0003) MISSED OFFSET
	float                                              BoundsScale;                                      		// 0x050C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastSubmitTime;                                   		// 0x0510(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              LastRenderTime;                                   		// 0x0514(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              LastRenderTimeOnScreen;                           		// 0x0518(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TEnumAsByte<enum class ECanBeCharacterBase>        CanBeCharacterBase;                               		// 0x051C(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0x1];                               		// 0x051D(0x0001) MISSED OFFSET
	TEnumAsByte<enum class ECanBeCharacterBase>        CanCharacterStepUpOn;                             		// 0x051E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData14[0x1];                               		// 0x051F(0x0001) MISSED OFFSET
	TArray<class AActor*>                              MoveIgnoreActors;                                 		// 0x0520(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	TArray<class UPrimitiveComponent*>                 MoveIgnoreComponents;                             		// 0x0530(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	unsigned char                                      UnknownData15[0x10];                              		// 0x0540(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnComponentHit;                                   		// 0x0550(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentBeginOverlap;                          		// 0x0560(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentEndOverlap;                            		// 0x0570(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentWake;                                  		// 0x0580(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentSleep;                                 		// 0x0590(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginCursorOver;                                		// 0x05A0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndCursorOver;                                  		// 0x05B0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnClicked;                                        		// 0x05C0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReleased;                                       		// 0x05D0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchBegin;                                		// 0x05E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnd;                                  		// 0x05F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnter;                                		// 0x0600(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchLeave;                                		// 0x0610(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData16[0x18];                              		// 0x0620(0x0018) MISSED OFFSET
	class UPrimitiveComponent*                         LODParentPrimitive;                               		// 0x0638(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_DuplicateTransient, CPF_IsPlainOldData)
	struct FPrimitiveComponentPostPhysicsTickFunction  PostPhysicsComponentTick;                         		// 0x0640(0x0058)
	unsigned char                                      UnknownData17[0x8];                               		// 0x0698(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrimitiveComponent");
		return ptr;
	}


	void WakeRigidBody(const struct FName& BoneName);
	void WakeAllRigidBodies();
	void SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride);
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);
	void SetSimulatePhysics(bool bSimulate);
	void SetRenderInMainPass(bool bValue);
	void SetRenderCustomDepth(bool bValue);
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetOwnerNoSee(bool bNewOwnerNoSee);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void SetMaterialByName(const struct FName& MaterialSlotName, class UMaterialInterface* Material);
	void SetMaterial(int ElementIndex, class UMaterialInterface* Material);
	void SetMassScale(const struct FName& BoneName, float InMassScale);
	void SetMassOverrideInKg(const struct FName& BoneName, float MassInKg, bool bOverrideMass);
	void SetLockedAxis(TEnumAsByte<enum class EDOFMode> LockedAxis);
	void SetLinearDamping(float InDamping);
	void SetEnableGravity(bool bGravityEnabled);
	void SetCustomDepthStencilValue(int Value);
	void SetCullDistance(float NewCullDistance);
	void SetConstraintMode(TEnumAsByte<enum class EDOFMode> ConstraintMode);
	void SetCollisionResponseToChannel(TEnumAsByte<enum class ECollisionChannel> Channel, TEnumAsByte<enum class ECollisionResponse> NewResponse);
	void SetCollisionResponseToAllChannels(TEnumAsByte<enum class ECollisionResponse> NewResponse);
	void SetCollisionProfileName(const struct FName& InCollisionProfileName);
	void SetCollisionObjectType(TEnumAsByte<enum class ECollisionChannel> Channel);
	void SetCollisionEnabled(TEnumAsByte<enum class ECollisionEnabled> NewType);
	void SetCenterOfMass(const struct FVector& CenterOfMassOffset, const struct FName& BoneName);
	void SetCastShadow(bool NewCastShadow);
	void SetBoundsScale(float NewBoundsScale);
	void SetAngularDamping(float InDamping);
	void SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);
	void SetAllMassScale(float InMassScale);
	struct FVector ScaleByMomentOfInertia(const struct FVector& InputVector, const struct FName& BoneName);
	void PutRigidBodyToSleep(const struct FName& BoneName);
	bool K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName);
	bool K2_IsQueryCollisionEnabled();
	bool K2_IsPhysicsCollisionEnabled();
	bool K2_IsCollisionEnabled();
	bool IsOverlappingComponent(class UPrimitiveComponent* OtherComp);
	bool IsOverlappingActor(class AActor* Other);
	bool IsGravityEnabled();
	bool IsAnyRigidBodyAwake();
	void IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore);
	void IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);
	struct FWalkableSlopeOverride GetWalkableSlopeOverride();
	struct FVector GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, const struct FName& BoneName);
	struct FVector GetPhysicsLinearVelocity(const struct FName& BoneName);
	struct FVector GetPhysicsAngularVelocity(const struct FName& BoneName);
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* InOverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	TArray<struct FOverlapInfo> GetOverlapInfos();
	int GetNumMaterials();
	class UMaterialInterface* GetMaterial(int ElementIndex);
	float GetMassScale(const struct FName& BoneName);
	float GetMass();
	float GetLinearDamping();
	struct FVector GetInertiaTensor(const struct FName& BoneName);
	TEnumAsByte<enum class ECollisionResponse> GetCollisionResponseToChannel(TEnumAsByte<enum class ECollisionChannel> Channel);
	struct FName GetCollisionProfileName();
	TEnumAsByte<enum class ECollisionChannel> GetCollisionObjectType();
	TEnumAsByte<enum class ECollisionEnabled> GetCollisionEnabled();
	float GetClosestPointOnCollision(const struct FVector& Point, const struct FName& BoneName, struct FVector* OutPointOnBody);
	struct FVector GetCenterOfMass(const struct FName& BoneName);
	float GetAngularDamping();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, class UMaterialInterface* SourceMaterial);
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UMaterialInterface* Parent);
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);
	TArray<class UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents();
	TArray<class AActor*> CopyArrayOfMoveIgnoreActors();
	void ClearMoveIgnoreComponents();
	void ClearMoveIgnoreActors();
	bool CanCharacterStepUp(class APawn* Pawn);
	void AddTorque(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange);
	void AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<enum class ERadialImpulseFalloff> Falloff, bool bVelChange);
	void AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<enum class ERadialImpulseFalloff> Falloff, bool bAccelChange);
	void AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName);
	void AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
	void AddForceAtLocation(const struct FVector& Force, const struct FVector& Location, const struct FName& BoneName);
	void AddForce(const struct FVector& Force, const struct FName& BoneName, bool bAccelChange);
	void AddAngularImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
};


// Class Engine.MeshComponent
// 0x00B0 (0x0750 - 0x06A0)
class UMeshComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0xB0];                              		// 0x06A0(0x00B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshComponent");
		return ptr;
	}


	void SetVectorParameterValueOnMaterials(const struct FName& ParameterName, const struct FVector& ParameterValue);
	void SetScalarParameterValueOnMaterials(const struct FName& ParameterName, float ParameterValue);
	bool IsMaterialSlotNameValid(const struct FName& MaterialSlotName);
	TArray<struct FName> GetMaterialSlotNames();
	TArray<class UMaterialInterface*> GetMaterials();
	int GetMaterialIndex(const struct FName& MaterialSlotName);
};


// Class Engine.StaticMeshComponent
// 0x0090 (0x07E0 - 0x0750)
class UStaticMeshComponent : public UMeshComponent
{
public:
	int                                                ForcedLodModel;                                   		// 0x0750(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                PreviousLODLevel;                                 		// 0x0754(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideMinLOD : 1;                              		// 0x0758(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0759(0x0003) MISSED OFFSET
	int                                                MinLOD;                                           		// 0x075C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0760(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideWireframeColor : 1;                      		// 0x0768(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0769(0x0003) MISSED OFFSET
	struct FColor                                      WireframeColorOverride;                           		// 0x076C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideNavigationExport : 1;                    		// 0x0770(0x0001) (CPF_Transient)
	unsigned char                                      bForceNavigationObstacle : 1;                     		// 0x0770(0x0001) (CPF_Transient)
	unsigned char                                      bDisallowMeshPaintPerInstance : 1;                		// 0x0770(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bIgnoreInstanceForTextureStreaming : 1;           		// 0x0770(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bOverrideLightMapRes : 1;                         		// 0x0770(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0771(0x0003) MISSED OFFSET
	int                                                OverriddenLightMapRes;                            		// 0x0774(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StreamingDistanceMultiplier;                      		// 0x0778(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SubDivisionStepSize;                              		// 0x077C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseSubDivisions : 1;                             		// 0x0780(0x0001)
	unsigned char                                      UnknownData03[0x7];                               		// 0x0781(0x0007) MISSED OFFSET
	TArray<struct FGuid>                               IrrelevantLights;                                 		// 0x0788(0x0010) (CPF_ZeroConstructor, CPF_Deprecated)
	TArray<struct FStaticMeshComponentLODInfo>         LODData;                                          		// 0x0798(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FStreamingTextureBuildInfo>          StreamingTextureData;                             		// 0x07A8(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bUseDefaultCollision : 1;                         		// 0x07B8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                               		// 0x07B9(0x0003) MISSED OFFSET
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                		// 0x07BC(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData05[0xC];                               		// 0x07D4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshComponent");
		return ptr;
	}


	bool SetStaticMesh(class UStaticMesh* NewMesh);
	void SetForcedLodModel(int NewForcedLodModel);
	void OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);
	void GetLocalBounds(struct FVector* Min, struct FVector* Max);
};


// Class Engine.Info
// 0x0000 (0x0388 - 0x0388)
class AInfo : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Info");
		return ptr;
	}

};


// Class Engine.Controller
// 0x0068 (0x03F0 - 0x0388)
class AController : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0388(0x0008) MISSED OFFSET
	class APawn*                                       Pawn;                                             		// 0x0390(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                               		// 0x0398(0x0008) MISSED OFFSET
	class ACharacter*                                  Character;                                        		// 0x03A0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class APlayerState*                                PlayerState;                                      		// 0x03A8(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class USceneComponent*                             TransformComponent;                               		// 0x03B0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FRotator                                    ControlRotation;                                  		// 0x03B8(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAttachToPawn : 1;                                		// 0x03C4(0x0001) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bIsPlayerController : 1;                          		// 0x03C4(0x0001)
	unsigned char                                      UnknownData02[0x13];                              		// 0x03C5(0x0013) MISSED OFFSET
	struct FName                                       StateName;                                        		// 0x03D8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnInstigatedAnyDamage;                            		// 0x03E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Controller");
		return ptr;
	}


	void UnPossess();
	void StopMovement();
	void SetInitialLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetIgnoreMoveInput(bool bNewMoveInput);
	void SetIgnoreLookInput(bool bNewLookInput);
	void SetControlRotation(const struct FRotator& NewRotation);
	void ResetIgnoreMoveInput();
	void ResetIgnoreLookInput();
	void ResetIgnoreInputFlags();
	void ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser);
	void Possess(class APawn* InPawn);
	void OnRep_PlayerState();
	void OnRep_Pawn();
	bool LineOfSightTo(class AActor* Other, const struct FVector& ViewPoint, bool bAlternateChecks);
	class APawn* K2_GetPawn();
	bool IsPlayerController();
	bool IsMoveInputIgnored();
	bool IsLookInputIgnored();
	bool IsLocalPlayerController();
	bool IsLocalController();
	class AActor* GetViewTarget();
	struct FRotator GetDesiredRotation();
	struct FRotator GetControlRotation();
	void ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera);
	void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	class APlayerController* CastToPlayerController();
};


// Class Engine.Pawn
// 0x0060 (0x03E8 - 0x0388)
class APawn : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0388(0x0008) MISSED OFFSET
	unsigned char                                      bUseControllerRotationPitch : 1;                  		// 0x0390(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUseControllerRotationYaw : 1;                    		// 0x0390(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUseControllerRotationRoll : 1;                   		// 0x0390(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bCanAffectNavigationGeneration : 1;               		// 0x0390(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0391(0x0003) MISSED OFFSET
	float                                              BaseEyeHeight;                                    		// 0x0394(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EAutoReceiveInput>          AutoPossessPlayer;                                		// 0x0398(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EAutoPossessAI>             AutoPossessAI;                                    		// 0x0399(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                               		// 0x039A(0x0006) MISSED OFFSET
	class UClass*                                      AIControllerClass;                                		// 0x03A0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class APlayerState*                                PlayerState;                                      		// 0x03A8(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	uint16_t                                           RemoteViewPitch;                                  		// 0x03B0(0x0002) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                               		// 0x03B2(0x0006) MISSED OFFSET
	class AController*                                 LastHitBy;                                        		// 0x03B8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class AController*                                 Controller;                                       		// 0x03C0(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                               		// 0x03C8(0x0008) MISSED OFFSET
	struct FVector                                     ControlInputVector;                               		// 0x03D0(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     LastControlInputVector;                           		// 0x03DC(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Pawn");
		return ptr;
	}


	void SpawnDefaultController();
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);
	void ReceiveUnpossessed(class AController* OldController);
	void ReceivePossessed(class AController* NewController);
	void PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker);
	void OnRep_PlayerState();
	void OnRep_Controller();
	void LaunchPawn(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	struct FVector K2_GetMovementInputVector();
	bool IsPlayerControlled();
	bool IsMoveInputIgnored();
	bool IsLocallyControlled();
	bool IsControlled();
	struct FVector GetPendingMovementInputVector();
	struct FVector GetNavAgentLocation();
	class UPawnMovementComponent* GetMovementComponent();
	class AActor* STATIC_GetMovementBaseActor(class APawn* Pawn);
	struct FVector GetLastMovementInputVector();
	struct FRotator GetControlRotation();
	class AController* GetController();
	struct FRotator GetBaseAimRotation();
	void DetachFromControllerPendingDestroy();
	struct FVector ConsumeMovementInputVector();
	void AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce);
	void AddControllerYawInput(float Val);
	void AddControllerRollInput(float Val);
	void AddControllerPitchInput(float Val);
};


// Class Engine.Character
// 0x03C8 (0x07B0 - 0x03E8)
class ACharacter : public APawn
{
public:
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UCharacterMovementComponent*                 CharacterMovement;                                		// 0x03F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UCapsuleComponent*                           CapsuleComponent;                                 		// 0x03F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UCapsuleComponent*                           ProneCapsuleComponent;                            		// 0x0400(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FBasedMovementInfo                          BasedMovement;                                    		// 0x0408(0x0030)
	struct FBasedMovementInfo                          ReplicatedBasedMovement;                          		// 0x0438(0x0030) (CPF_Net)
	float                                              AnimRootMotionTranslationScale;                   		// 0x0468(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     BaseTranslationOffset;                            		// 0x046C(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                               		// 0x0478(0x0008) MISSED OFFSET
	struct FQuat                                       BaseRotationOffset;                               		// 0x0480(0x0010) (CPF_IsPlainOldData)
	float                                              ReplicatedServerLastTransformUpdateTimeStamp;     		// 0x0490(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      ReplicatedMovementMode;                           		// 0x0494(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bInBaseReplication : 1;                           		// 0x0495(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                               		// 0x0496(0x0002) MISSED OFFSET
	float                                              CrouchedEyeHeight;                                		// 0x0498(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsCrouched : 1;                                  		// 0x049C(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net)
	unsigned char                                      bReplayHasRootMotionSources : 1;                  		// 0x049C(0x0001) (CPF_Net)
	unsigned char                                      bPressedJump : 1;                                 		// 0x049C(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bClientUpdating : 1;                              		// 0x049C(0x0001) (CPF_Transient)
	unsigned char                                      bClientWasFalling : 1;                            		// 0x049C(0x0001) (CPF_Transient)
	unsigned char                                      bClientResimulateRootMotion : 1;                  		// 0x049C(0x0001) (CPF_Transient)
	unsigned char                                      bClientResimulateRootMotionSources : 1;           		// 0x049C(0x0001) (CPF_Transient)
	unsigned char                                      bSimGravityDisabled : 1;                          		// 0x049C(0x0001)
	unsigned char                                      bClientCheckEncroachmentOnNetUpdate : 1;          		// 0x049D(0x0001) (CPF_Transient)
	unsigned char                                      bServerMoveIgnoreRootMotion : 1;                  		// 0x049D(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData02[0x2];                               		// 0x049E(0x0002) MISSED OFFSET
	float                                              JumpKeyHoldTime;                                  		// 0x04A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              JumpMaxHoldTime;                                  		// 0x04A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                JumpMaxCount;                                     		// 0x04A8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                JumpCurrentCount;                                 		// 0x04AC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      bWasJumping : 1;                                  		// 0x04B0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnTemplate, CPF_Transient, CPF_EditConst)
	unsigned char                                      UnknownData03[0x7];                               		// 0x04B1(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnReachedJumpApex;                                		// 0x04B8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData04[0x20];                              		// 0x04C8(0x0020) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCharacterMovementUpdated;                       		// 0x04E8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FRootMotionSourceGroup                      SavedRootMotion;                                  		// 0x04F8(0x0100) (CPF_Transient)
	unsigned char                                      UnknownData05[0x8];                               		// 0x05F8(0x0008) MISSED OFFSET
	struct FRootMotionMovementParams                   ClientRootMotionParams;                           		// 0x0600(0x0040) (CPF_Transient)
	TArray<struct FSimulatedRootMotionReplicatedMove>  RootMotionRepMoves;                               		// 0x0640(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FRepRootMotionMontage                       RepRootMotion;                                    		// 0x0650(0x0160) (CPF_Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Character");
		return ptr;
	}


	void UnCrouch(bool bClientSimulation);
	void StopJumping();
	void StopAnimMontage(class UAnimMontage* AnimMontage);
	void SetReplicateMovement(bool bInReplicateMovement);
	float PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName);
	void OnWalkingOffLedge(const struct FVector& PreviousFloorImpactNormal, const struct FVector& PreviousFloorContactNormal, const struct FVector& PreviousLocation, float TimeDelta);
	void OnRep_RootMotion();
	void OnRep_ReplicatedBasedMovement();
	void OnRep_IsCrouched();
	void OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void OnLanded(const struct FHitResult& Hit);
	void OnJumped();
	void LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void K2_UpdateCustomMovement(float DeltaTime);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnMovementModeChanged(TEnumAsByte<enum class EMovementMode> PrevMovementMode, TEnumAsByte<enum class EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode);
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void Jump();
	bool IsPlayingRootMotion();
	bool IsPlayingNetworkedRootMotionMontage();
	bool IsJumpProvidingForce();
	class UAnimMontage* GetCurrentMontage();
	struct FVector GetBaseTranslationOffset();
	struct FRotator GetBaseRotationOffsetRotator();
	float GetAnimRootMotionTranslationScale();
	void Crouch(bool bClientSimulation);
	void ClientCheatWalk();
	void ClientCheatGhost();
	void ClientCheatFly();
	bool CanJumpInternal();
	bool CanJump();
};


// Class Engine.MovementComponent
// 0x0048 (0x0138 - 0x00F0)
class UMovementComponent : public UActorComponent
{
public:
	class USceneComponent*                             UpdatedComponent;                                 		// 0x00F0(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_DuplicateTransient, CPF_IsPlainOldData)
	class UPrimitiveComponent*                         UpdatedPrimitive;                                 		// 0x00F8(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_DuplicateTransient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0100(0x0004) MISSED OFFSET
	struct FVector                                     Velocity;                                         		// 0x0104(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bConstrainToPlane : 1;                            		// 0x0110(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bSnapToPlaneAtStart : 1;                          		// 0x0110(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0111(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EPlaneConstraintAxisSetting> PlaneConstraintAxisSetting;                       		// 0x0114(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0115(0x0003) MISSED OFFSET
	struct FVector                                     PlaneConstraintNormal;                            		// 0x0118(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     PlaneConstraintOrigin;                            		// 0x0124(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUpdateOnlyIfRendered : 1;                        		// 0x0130(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bAutoUpdateTickRegistration : 1;                  		// 0x0130(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bTickBeforeOwner : 1;                             		// 0x0130(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bAutoRegisterUpdatedComponent : 1;                		// 0x0130(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MovementComponent");
		return ptr;
	}


	void StopMovementImmediately();
	void SnapUpdatedComponentToPlane();
	void SetUpdatedComponent(class USceneComponent* NewUpdatedComponent);
	void SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin);
	void SetPlaneConstraintNormal(const struct FVector& PlaneNormal);
	void SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up);
	void SetPlaneConstraintEnabled(bool bEnabled);
	void SetPlaneConstraintAxisSetting(TEnumAsByte<enum class EPlaneConstraintAxisSetting> NewAxisSetting);
	void PhysicsVolumeChanged(class APhysicsVolume* NewVolume);
	bool K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* OutHit);
	float K2_GetModifiedMaxSpeed();
	float K2_GetMaxSpeedModifier();
	bool IsExceedingMaxSpeed(float MaxSpeed);
	struct FVector GetPlaneConstraintOrigin();
	struct FVector GetPlaneConstraintNormal();
	TEnumAsByte<enum class EPlaneConstraintAxisSetting> GetPlaneConstraintAxisSetting();
	class APhysicsVolume* GetPhysicsVolume();
	float GetMaxSpeed();
	float GetGravityZ();
	struct FVector ConstrainNormalToPlane(const struct FVector& Normal);
	struct FVector ConstrainLocationToPlane(const struct FVector& Location);
	struct FVector ConstrainDirectionToPlane(const struct FVector& Direction);
};


// Class Engine.NavMovementComponent
// 0x0038 (0x0170 - 0x0138)
class UNavMovementComponent : public UMovementComponent
{
public:
	struct FNavAgentProperties                         NavAgentProps;                                    		// 0x0138(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	float                                              FixedPathBrakingDistance;                         		// 0x0158(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUpdateNavAgentWithOwnersCollision : 1;           		// 0x015C(0x0001) (CPF_Edit)
	unsigned char                                      bUseAccelerationForPaths : 1;                     		// 0x015C(0x0001) (CPF_Edit, CPF_Config, CPF_GlobalConfig)
	unsigned char                                      bUseFixedBrakingDistanceForPaths : 1;             		// 0x015C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x015D(0x0003) MISSED OFFSET
	struct FMovementProperties                         MovementState;                                    		// 0x0160(0x0004)
	unsigned char                                      UnknownData01[0xC];                               		// 0x0164(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMovementComponent");
		return ptr;
	}


	void StopMovementKeepPathing();
	void StopActiveMovement();
	bool IsSwimming();
	bool IsMovingOnGround();
	bool IsFlying();
	bool IsFalling();
	bool IsCrouching();
};


// Class Engine.PawnMovementComponent
// 0x0008 (0x0178 - 0x0170)
class UPawnMovementComponent : public UNavMovementComponent
{
public:
	class APawn*                                       PawnOwner;                                        		// 0x0170(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PawnMovementComponent");
		return ptr;
	}


	struct FVector K2_GetInputVector();
	bool IsMoveInputIgnored();
	struct FVector GetPendingInputVector();
	class APawn* GetPawnOwner();
	struct FVector GetLastInputVector();
	struct FVector ConsumeInputVector();
	void AddInputVector(const struct FVector& WorldVector, bool bForce);
};


// Class Engine.SpringArmComponent
// 0x0090 (0x0390 - 0x0300)
class USpringArmComponent : public USceneComponent
{
public:
	float                                              TargetArmLength;                                  		// 0x0300(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     SocketOffset;                                     		// 0x0304(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     TargetOffset;                                     		// 0x0310(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ProbeSize;                                        		// 0x031C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ECollisionChannel>          ProbeChannel;                                     		// 0x0320(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0321(0x0003) MISSED OFFSET
	unsigned char                                      bDoCollisionTest : 1;                             		// 0x0324(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUsePawnControlRotation : 1;                      		// 0x0324(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bInheritPitch : 1;                                		// 0x0324(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bInheritYaw : 1;                                  		// 0x0324(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bInheritRoll : 1;                                 		// 0x0324(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bEnableCameraLag : 1;                             		// 0x0324(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bEnableCameraRotationLag : 1;                     		// 0x0324(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUseCameraLagSubstepping : 1;                     		// 0x0324(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bDrawDebugLagMarkers : 1;                         		// 0x0325(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData01[0x2];                               		// 0x0326(0x0002) MISSED OFFSET
	float                                              CameraLagSpeed;                                   		// 0x0328(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CameraRotationLagSpeed;                           		// 0x032C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CameraLagMaxTimeStep;                             		// 0x0330(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CameraLagMaxDistance;                             		// 0x0334(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x58];                              		// 0x0338(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpringArmComponent");
		return ptr;
	}

};


// Class Engine.NavigationObjectBase
// 0x0028 (0x03B0 - 0x0388)
class ANavigationObjectBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0388(0x0008) MISSED OFFSET
	class UCapsuleComponent*                           CapsuleComponent;                                 		// 0x0390(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UBillboardComponent*                         GoodSprite;                                       		// 0x0398(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UBillboardComponent*                         BadSprite;                                        		// 0x03A0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bIsPIEPlayerStart : 1;                            		// 0x03A8(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationObjectBase");
		return ptr;
	}

};


// Class Engine.PlayerStart
// 0x0008 (0x03B8 - 0x03B0)
class APlayerStart : public ANavigationObjectBase
{
public:
	struct FName                                       PlayerStartTag;                                   		// 0x03B0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerStart");
		return ptr;
	}

};


// Class Engine.Brush
// 0x0038 (0x03C0 - 0x0388)
class ABrush : public AActor
{
public:
	TEnumAsByte<enum class EBrushType>                 BrushType;                                        		// 0x0388(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0389(0x0003) MISSED OFFSET
	struct FColor                                      BrushColor;                                       		// 0x038C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                PolyFlags;                                        		// 0x0390(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bColored : 1;                                     		// 0x0394(0x0001)
	unsigned char                                      bSolidWhenSelected : 1;                           		// 0x0394(0x0001)
	unsigned char                                      bPlaceableFromClassBrowser : 1;                   		// 0x0394(0x0001)
	unsigned char                                      bNotForClientOrServer : 1;                        		// 0x0394(0x0001)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0395(0x0003) MISSED OFFSET
	class UModel*                                      Brush;                                            		// 0x0398(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBrushComponent*                             BrushComponent;                                   		// 0x03A0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bInManipulation : 1;                              		// 0x03A8(0x0001)
	unsigned char                                      UnknownData02[0x7];                               		// 0x03A9(0x0007) MISSED OFFSET
	TArray<struct FGeomSelection>                      SavedSelections;                                  		// 0x03B0(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Brush");
		return ptr;
	}

};


// Class Engine.Volume
// 0x0000 (0x03C0 - 0x03C0)
class AVolume : public ABrush
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Volume");
		return ptr;
	}

};


// Class Engine.AnimInstance
// 0x0470 (0x0498 - 0x0028)
class UAnimInstance : public UObject
{
public:
	float                                              DeltaTime;                                        		// 0x0028(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x002C(0x0004) MISSED OFFSET
	class USkeleton*                                   CurrentSkeleton;                                  		// 0x0030(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x40];                              		// 0x0038(0x0040) MISSED OFFSET
	TEnumAsByte<enum class ERootMotionMode>            RootMotionMode;                                   		// 0x0078(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bRunUpdatesInWorkerThreads : 1;                   		// 0x0079(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bCanUseParallelUpdateAnimation : 1;               		// 0x007A(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bWarnAboutBlueprintUsage : 1;                     		// 0x007B(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                               		// 0x007C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMontageBlendingOut;                             		// 0x0080(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMontageStarted;                                 		// 0x0090(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMontageEnded;                                   		// 0x00A0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData03[0x70];                              		// 0x00B0(0x0070) MISSED OFFSET
	unsigned char                                      bQueueMontageEvents : 1;                          		// 0x0120(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x18F];                             		// 0x0121(0x018F) MISSED OFFSET
	TArray<struct FAnimNotifyEvent>                    ActiveAnimNotifyState;                            		// 0x02B0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData05[0x1D8];                             		// 0x02C0(0x01D8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimInstance");
		return ptr;
	}


	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);
	class APawn* TryGetPawnOwner();
	void StopSlotAnimation(float InBlendOutTime, const struct FName& SlotNodeName);
	void SetRootMotionMode(TEnumAsByte<enum class ERootMotionMode> Value);
	void SetMorphTarget(const struct FName& MorphTargetName, float Value);
	class UAnimMontage* PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);
	float PlaySlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);
	void Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage);
	void Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate);
	void Montage_SetNextSection(const struct FName& SectionNameToChange, const struct FName& NextSection, class UAnimMontage* Montage);
	void Montage_Resume(class UAnimMontage* Montage);
	float Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, TEnumAsByte<enum class EMontagePlayReturnType> ReturnValueType, float InTimeToStartMontageAt);
	void Montage_Pause(class UAnimMontage* Montage);
	void Montage_JumpToSectionsEnd(const struct FName& SectionName, class UAnimMontage* Montage);
	void Montage_JumpToSection(const struct FName& SectionName, class UAnimMontage* Montage);
	bool Montage_IsPlaying(class UAnimMontage* Montage);
	bool Montage_IsActive(class UAnimMontage* Montage);
	struct FName Montage_GetCurrentSection(class UAnimMontage* Montage);
	void LockAIResources(bool bLockMovement, bool LockAILogic);
	bool IsSyncGroupBetweenMarkers(const struct FName& InSyncGroupName, const struct FName& PreviousMarker, const struct FName& NextMarker, bool bRespectMarkerOrder);
	bool IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName);
	bool HasMarkerBeenHitThisFrame(const struct FName& SyncGroup, const struct FName& MarkerName);
	bool GetTimeToClosestMarker(const struct FName& SyncGroup, const struct FName& MarkerName, float* OutMarkerTime);
	struct FMarkerSyncAnimPosition GetSyncGroupPosition(const struct FName& InSyncGroupName);
	float GetStateWeight(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);
	class USkeletalMeshComponent* GetOwningComponent();
	class AActor* GetOwningActor();
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);
	float GetInstanceMachineWeight(int MachineIndex);
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);
	float GetCurveValue(const struct FName& CurveName);
	struct FName GetCurrentStateName(int MachineIndex);
	float GetCurrentStateElapsedTime(int MachineIndex);
	float STATIC_GetAnimAssetPlayerTimeFromEndFraction(class UAnimationAsset* AnimAsset, float CurrentTime);
	float GetAnimAssetPlayerTimeFromEnd(class UAnimationAsset* AnimAsset, float CurrentTime);
	float STATIC_GetAnimAssetPlayerTimeFraction(class UAnimationAsset* AnimAsset, float CurrentTime);
	float STATIC_GetAnimAssetPlayerLength(class UAnimationAsset* AnimAsset);
	void ClearMorphTargets();
	float CalculateDirection(const struct FVector& Velocity, const struct FRotator& BaseRotation);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintPostEvaluateAnimation();
	void BlueprintInitializeAnimation();
};


// Class Engine.PlayerController
// 0x02C8 (0x06B8 - 0x03F0)
class APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                           		// 0x03F0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                               		// 0x03F8(0x0008) MISSED OFFSET
	class APawn*                                       AcknowledgedPawn;                                 		// 0x0400(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                          		// 0x0408(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                               		// 0x0410(0x0008) MISSED OFFSET
	class AHUD*                                        MyHUD;                                            		// 0x0418(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class APlayerCameraManager*                        PlayerCameraManager;                              		// 0x0420(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      PlayerCameraManagerClass;                         		// 0x0428(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAutoManageActiveCameraTarget : 1;                		// 0x0430(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0431(0x0003) MISSED OFFSET
	struct FRotator                                    TargetViewRotation;                               		// 0x0434(0x000C) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                               		// 0x0440(0x000C) MISSED OFFSET
	float                                              SmoothTargetViewRotationSpeed;                    		// 0x044C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class AActor*>                              HiddenActors;                                     		// 0x0450(0x0010) (CPF_ZeroConstructor)
	float                                              LastSpectatorStateSynchTime;                      		// 0x0460(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LastSpectatorSyncLocation;                        		// 0x0464(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FRotator                                    LastSpectatorSyncRotation;                        		// 0x0470(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                ClientCap;                                        		// 0x047C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCheatManager*                               CheatManager;                                     		// 0x0480(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UClass*                                      CheatClass;                                       		// 0x0488(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UPlayerInput*                                PlayerInput;                                      		// 0x0490(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FActiveForceFeedbackEffect>          ActiveForceFeedbackEffects;                       		// 0x0498(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData04[0x80];                              		// 0x04A8(0x0080) MISSED OFFSET
	unsigned char                                      bPlayerIsWaiting : 1;                             		// 0x0528(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnTemplate, CPF_EditConst)
	unsigned char                                      UnknownData05[0x3];                               		// 0x0529(0x0003) MISSED OFFSET
	unsigned char                                      NetPlayerIndex;                                   		// 0x052C(0x0001) (CPF_ZeroConstructor, CPF_DuplicateTransient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x3B];                              		// 0x052D(0x003B) MISSED OFFSET
	class UNetConnection*                              PendingSwapConnection;                            		// 0x0568(0x0008) (CPF_ZeroConstructor, CPF_DuplicateTransient, CPF_IsPlainOldData)
	class UNetConnection*                              NetConnection;                                    		// 0x0570(0x0008) (CPF_ZeroConstructor, CPF_DuplicateTransient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0xC];                               		// 0x0578(0x000C) MISSED OFFSET
	float                                              InputYawScale;                                    		// 0x0584(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              InputPitchScale;                                  		// 0x0588(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              InputRollScale;                                   		// 0x058C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bShowMouseCursor : 1;                             		// 0x0590(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bEnableClickEvents : 1;                           		// 0x0590(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bEnableTouchEvents : 1;                           		// 0x0590(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bEnableMouseOverEvents : 1;                       		// 0x0590(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bEnableTouchOverEvents : 1;                       		// 0x0590(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bForceFeedbackEnabled : 1;                        		// 0x0590(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData08[0x7];                               		// 0x0591(0x0007) MISSED OFFSET
	TArray<struct FKey>                                ClickEventKeys;                                   		// 0x0598(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	TEnumAsByte<enum class EMouseCursor>               DefaultMouseCursor;                               		// 0x05A8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EMouseCursor>               CurrentMouseCursor;                               		// 0x05A9(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ECollisionChannel>          DefaultClickTraceChannel;                         		// 0x05AA(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ECollisionChannel>          CurrentClickTraceChannel;                         		// 0x05AB(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              HitResultTraceDistance;                           		// 0x05AC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x80];                              		// 0x05B0(0x0080) MISSED OFFSET
	class UInputComponent*                             InactiveStateInputComponent;                      		// 0x0630(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x18];                              		// 0x0638(0x0018) MISSED OFFSET
	class UTouchInterface*                             CurrentTouchInterface;                            		// 0x0650(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x40];                              		// 0x0658(0x0040) MISSED OFFSET
	class ASpectatorPawn*                              SpectatorPawn;                                    		// 0x0698(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     SpawnLocation;                                    		// 0x06A0(0x000C) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                               		// 0x06AC(0x0004) MISSED OFFSET
	unsigned char                                      bIsLocalPlayerController : 1;                     		// 0x06B0(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0x1];                               		// 0x06B1(0x0001) MISSED OFFSET
	uint16_t                                           SeamlessTravelCount;                              		// 0x06B2(0x0002) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	uint16_t                                           LastCompletedSeamlessTravelCount;                 		// 0x06B4(0x0002) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerController");
		return ptr;
	}


	bool WasInputKeyJustReleased(const struct FKey& Key);
	bool WasInputKeyJustPressed(const struct FKey& Key);
	void ToggleSpeaking(bool bInSpeaking);
	void SwitchLevel(const struct FString& URL);
	void StopHapticEffect(TEnumAsByte<enum class EControllerHand> Hand);
	void StartFire(unsigned char FireModeNum);
	void SetVirtualJoystickVisibility(bool bVisible);
	void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<enum class EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing);
	void SetName(const struct FString& S);
	void SetMouseLocation(int X, int Y);
	void SetHapticsByValue(float Frequency, float Amplitude, TEnumAsByte<enum class EControllerHand> Hand);
	void SetControllerLightColor(const struct FColor& Color);
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	void SetAudioListenerOverride(class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation);
	void ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerVerifyViewTarget();
	void ServerUpdateLevelVisibility(const struct FName& PackageName, bool bIsVisible);
	void ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int CamPitchAndYaw);
	void ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ServerToggleAILogging();
	void ServerShortTimeout();
	void ServerSetSpectatorWaiting(bool bWaiting);
	void ServerSetSpectatorLocation(const struct FVector& NewLoc, const struct FRotator& NewRot);
	void ServerRestartPlayer();
	void ServerPause();
	void ServerNotifyLoadedWorld(const struct FName& WorldPackageName);
	void ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ServerCheckClientPossessionReliable();
	void ServerCheckClientPossession();
	void ServerChangeName(const struct FString& S);
	void ServerCamera(const struct FName& NewMode);
	void ServerAcknowledgePossession(class APawn* P);
	void SendToConsole(const struct FString& Command);
	void RestartLevel();
	bool ProjectWorldLocationToScreen(const struct FVector& WorldLocation, bool bPlayerViewportRelative, struct FVector2D* ScreenLocation);
	void PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, TEnumAsByte<enum class EControllerHand> Hand, float Scale, bool bLoop);
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<enum class EDynamicForceFeedbackAction> Action, const struct FLatentActionInfo& LatentInfo);
	void Pause();
	void OnServerStartedVisualLogger(bool bIsLogging);
	void LocalTravel(const struct FString& URL);
	bool IsInputKeyDown(const struct FKey& Key);
	void GetViewportSize(int* SizeX, int* SizeY);
	class ASpectatorPawn* GetSpectatorPawn();
	bool GetMousePosition(float* LocationX, float* LocationY);
	struct FVector GetInputVectorKeyState(const struct FKey& Key);
	void GetInputTouchState(TEnumAsByte<enum class ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	void GetInputMouseDelta(float* DeltaX, float* DeltaY);
	void GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration);
	float GetInputKeyTimeDown(const struct FKey& Key);
	void GetInputAnalogStickState(TEnumAsByte<enum class EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float GetInputAnalogKeyState(const struct FKey& Key);
	class AHUD* GetHUD();
	bool GetHitResultUnderFingerForObjects(TEnumAsByte<enum class ETouchIndex> FingerIndex, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFingerByChannel(TEnumAsByte<enum class ETouchIndex> FingerIndex, TEnumAsByte<enum class ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFinger(TEnumAsByte<enum class ETouchIndex> FingerIndex, TEnumAsByte<enum class ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorByChannel(TEnumAsByte<enum class ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursor(TEnumAsByte<enum class ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	struct FVector GetFocalLocation();
	void FOV(float NewFOV);
	void EnableCheats();
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection);
	bool DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection);
	void ConsoleKey(const struct FKey& Key);
	void ClientWasKicked(const struct FText& KickReason);
	void ClientVoiceHandshakeComplete();
	void ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);
	void ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ClientTravelInternal(const struct FString& URL, TEnumAsByte<enum class ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTravel(const struct FString& URL, TEnumAsByte<enum class ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTeamMessage(class APlayerState* SenderPlayerState, const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag);
	void ClientStopCameraShake(class UClass* Shake, bool bImmediately);
	void ClientStopCameraAnim(class UCameraAnim* AnimToStop);
	void ClientStartOnlineSession();
	void ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);
	void ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams);
	void ClientSetSpectatorWaiting(bool bWaiting);
	void ClientSetHUD(class UClass* NewHUDClass);
	void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void ClientSetCameraMode(const struct FName& NewCamMode);
	void ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio);
	void ClientSetBlockOnAsyncLoading();
	void ClientReturnToMainMenu(const struct FString& ReturnReason);
	void ClientRetryClientRestart(class APawn* NewPawn);
	void ClientRestart(class APawn* NewPawn);
	void ClientReset();
	void ClientRepObjRef(class UObject* Object);
	void ClientReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerState* RelatedPlayerState_2, class APlayerState* RelatedPlayerState_3, class UObject* OptionalObject);
	void ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);
	void ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast);
	void ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, const struct FName& Tag);
	void ClientPlayCameraShake(class UClass* Shake, float Scale, TEnumAsByte<enum class ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<enum class ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace);
	void ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ClientIgnoreMoveInput(bool bIgnore);
	void ClientIgnoreLookInput(bool bIgnore);
	void ClientGotoState(const struct FName& NewState);
	void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);
	void ClientForceGarbageCollection();
	void ClientFlushLevelStreaming();
	void ClientEndOnlineSession();
	void ClientEnableNetworkVoice(bool bEnable);
	void ClientCommitMapChange();
	void ClientClearCameraLensEffects();
	void ClientCapBandwidth(int Cap);
	void ClientCancelPendingMapChange();
	void ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation);
	void ClearAudioListenerOverride();
	void Camera(const struct FName& NewMode);
	void AddYawInput(float Val);
	void AddRollInput(float Val);
	void AddPitchInput(float Val);
	void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);
};


// Class Engine.CameraComponent
// 0x0540 (0x0840 - 0x0300)
class UCameraComponent : public USceneComponent
{
public:
	float                                              FieldOfView;                                      		// 0x0300(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OrthoWidth;                                       		// 0x0304(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OrthoNearClipPlane;                               		// 0x0308(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OrthoFarClipPlane;                                		// 0x030C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AspectRatio;                                      		// 0x0310(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bConstrainAspectRatio : 1;                        		// 0x0314(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUseFieldOfViewForLOD : 1;                        		// 0x0314(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bLockToHmd : 1;                                   		// 0x0314(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUsePawnControlRotation : 1;                      		// 0x0314(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0315(0x0003) MISSED OFFSET
	TEnumAsByte<enum class ECameraProjectionMode>      ProjectionMode;                                   		// 0x0318(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0319(0x0003) MISSED OFFSET
	float                                              PostProcessBlendWeight;                           		// 0x031C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FPostProcessSettings                        PostProcessSettings;                              		// 0x0320(0x04C0) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData02[0x58];                              		// 0x07E0(0x0058) MISSED OFFSET
	unsigned char                                      bUseControllerViewRotation : 1;                   		// 0x0838(0x0001) (CPF_Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraComponent");
		return ptr;
	}


	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);
	void SetProjectionMode(TEnumAsByte<enum class ECameraProjectionMode> InProjectionMode);
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);
	void SetOrthoWidth(float InOrthoWidth);
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);
	void SetFieldOfView(float InFieldOfView);
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);
	void SetAspectRatio(float InAspectRatio);
	void GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView);
	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.CharacterMovementComponent
// 0x05C8 (0x0740 - 0x0178)
class UCharacterMovementComponent : public UPawnMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x0178(0x0010) MISSED OFFSET
	class ACharacter*                                  CharacterOwner;                                   		// 0x0188(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient, CPF_IsPlainOldData)
	float                                              GravityScale;                                     		// 0x0190(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxStepHeight;                                    		// 0x0194(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              JumpZVelocity;                                    		// 0x0198(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              JumpOffJumpZFactor;                               		// 0x019C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WalkableFloorAngle;                               		// 0x01A0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WalkableFloorZ;                                   		// 0x01A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	float                                              ProneWalkableFloorAngle;                          		// 0x01A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ProneWalkableFloorZ;                              		// 0x01AC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                               		// 0x01B0(0x0004) MISSED OFFSET
	TEnumAsByte<enum class EMovementMode>              MovementMode;                                     		// 0x01B4(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      CustomMovementMode;                               		// 0x01B5(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x2A];                              		// 0x01B6(0x002A) MISSED OFFSET
	float                                              GroundFriction;                                   		// 0x01E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxWalkSpeed;                                     		// 0x01E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxWalkSpeedCrouched;                             		// 0x01E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxSwimSpeed;                                     		// 0x01EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxFlySpeed;                                      		// 0x01F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxCustomMovementSpeed;                           		// 0x01F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxAcceleration;                                  		// 0x01F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BrakingFrictionFactor;                            		// 0x01FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BrakingFriction;                                  		// 0x0200(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseSeparateBrakingFriction : 1;                  		// 0x0204(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData03[0x3];                               		// 0x0205(0x0003) MISSED OFFSET
	float                                              BrakingDecelerationWalking;                       		// 0x0208(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BrakingDecelerationFalling;                       		// 0x020C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BrakingDecelerationSwimming;                      		// 0x0210(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BrakingDecelerationFlying;                        		// 0x0214(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AirControl;                                       		// 0x0218(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AirControlBoostMultiplier;                        		// 0x021C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AirControlBoostVelocityThreshold;                 		// 0x0220(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FallingLateralFriction;                           		// 0x0224(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CrouchedHalfHeight;                               		// 0x0228(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PronedHalfHeight;                                 		// 0x022C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PronedRadius;                                     		// 0x0230(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Buoyancy;                                         		// 0x0234(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PerchRadiusThreshold;                             		// 0x0238(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PerchAdditionalHeight;                            		// 0x023C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    RotationRate;                                     		// 0x0240(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseControllerDesiredRotation : 1;                		// 0x024C(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bOrientRotationToMovement : 1;                    		// 0x024C(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bMovementInProgress : 1;                          		// 0x024C(0x0001)
	unsigned char                                      bEnableScopedMovementUpdates : 1;                 		// 0x024C(0x0001) (CPF_Edit)
	unsigned char                                      bForceMaxAccel : 1;                               		// 0x024C(0x0001)
	unsigned char                                      bRunPhysicsWithNoController : 1;                  		// 0x024C(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bForceNextFloorCheck : 1;                         		// 0x024C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnTemplate, CPF_EditConst)
	unsigned char                                      bShrinkProxyCapsule : 1;                          		// 0x024C(0x0001)
	unsigned char                                      bCanWalkOffLedges : 1;                            		// 0x024D(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bCanWalkOffLedgesWhenCrouching : 1;               		// 0x024D(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bDeferUpdateMoveComponent : 1;                    		// 0x024D(0x0001)
	unsigned char                                      UnknownData04[0x2];                               		// 0x024E(0x0002) MISSED OFFSET
	class USceneComponent*                             DeferredUpdatedMoveComponent;                     		// 0x0250(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              MaxOutOfWaterStepHeight;                          		// 0x0258(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OutofWaterZ;                                      		// 0x025C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Mass;                                             		// 0x0260(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnablePhysicsInteraction : 1;                    		// 0x0264(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bTouchForceScaledToMass : 1;                      		// 0x0265(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPushForceScaledToMass : 1;                       		// 0x0266(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPushForceUsingZOffset : 1;                       		// 0x0267(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bScalePushForceToVelocity : 1;                    		// 0x0268(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                               		// 0x0269(0x0003) MISSED OFFSET
	float                                              StandingDownwardForceScale;                       		// 0x026C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              InitialPushForceFactor;                           		// 0x0270(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PushForceFactor;                                  		// 0x0274(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PushForcePointZOffsetFactor;                      		// 0x0278(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TouchForceFactor;                                 		// 0x027C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinTouchForce;                                    		// 0x0280(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxTouchForce;                                    		// 0x0284(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RepulsionForce;                                   		// 0x0288(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bForceBraking : 1;                                		// 0x028C(0x0001) (CPF_Deprecated)
	unsigned char                                      UnknownData06[0x3];                               		// 0x028D(0x0003) MISSED OFFSET
	float                                              CrouchedSpeedMultiplier;                          		// 0x0290(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              UpperImpactNormalScale;                           		// 0x0294(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FVector                                     Acceleration;                                     		// 0x0298(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LastUpdateLocation;                               		// 0x02A4(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FQuat                                       LastUpdateRotation;                               		// 0x02B0(0x0010) (CPF_IsPlainOldData)
	struct FVector                                     LastUpdateVelocity;                               		// 0x02C0(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ServerLastTransformUpdateTimeStamp;               		// 0x02CC(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     PendingImpulseToApply;                            		// 0x02D0(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     PendingForceToApply;                              		// 0x02DC(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnalogInputModifier;                              		// 0x02E8(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x8];                               		// 0x02EC(0x0008) MISSED OFFSET
	float                                              MaxSimulationTimeStep;                            		// 0x02F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxSimulationIterations;                          		// 0x02F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxDepenetrationWithGeometry;                     		// 0x02FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxDepenetrationWithGeometryAsProxy;              		// 0x0300(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxDepenetrationWithPawn;                         		// 0x0304(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxDepenetrationWithPawnAsProxy;                  		// 0x0308(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NetworkSimulatedSmoothLocationTime;               		// 0x030C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              NetworkSimulatedSmoothRotationTime;               		// 0x0310(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ListenServerNetworkSimulatedSmoothLocationTime;   		// 0x0314(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              ListenServerNetworkSimulatedSmoothRotationTime;   		// 0x0318(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              NetworkMaxSmoothUpdateDistance;                   		// 0x031C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              NetworkNoSmoothUpdateDistance;                    		// 0x0320(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	TEnumAsByte<enum class ENetworkSmoothingMode>      NetworkSmoothingMode;                             		// 0x0324(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                               		// 0x0325(0x0003) MISSED OFFSET
	float                                              LedgeCheckThreshold;                              		// 0x0328(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              JumpOutOfWaterPitch;                              		// 0x032C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FFindFloorResult                            CurrentFloor;                                     		// 0x0330(0x0098) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnTemplate, CPF_EditConst)
	TEnumAsByte<enum class EMovementMode>              DefaultLandMovementMode;                          		// 0x03C8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EMovementMode>              DefaultWaterMovementMode;                         		// 0x03C9(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EMovementMode>              GroundMovementMode;                               		// 0x03CA(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x1];                               		// 0x03CB(0x0001) MISSED OFFSET
	unsigned char                                      bMaintainHorizontalGroundVelocity : 1;            		// 0x03CC(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityX : 1;                         		// 0x03CC(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityY : 1;                         		// 0x03CC(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityZ : 1;                         		// 0x03CC(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bImpartBaseAngularVelocity : 1;                   		// 0x03CC(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bJustTeleported : 1;                              		// 0x03CC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnTemplate, CPF_Transient, CPF_EditConst)
	unsigned char                                      bNetworkUpdateReceived : 1;                       		// 0x03CC(0x0001) (CPF_Transient)
	unsigned char                                      bNetworkMovementModeChanged : 1;                  		// 0x03CC(0x0001) (CPF_Transient)
	unsigned char                                      bIgnoreClientMovementErrorChecksAndCorrection : 1;		// 0x03CD(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_Transient)
	unsigned char                                      bNotifyApex : 1;                                  		// 0x03CD(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_EditConst)
	unsigned char                                      bCheatFlying : 1;                                 		// 0x03CD(0x0001)
	unsigned char                                      bWantsToCrouch : 1;                               		// 0x03CD(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnTemplate, CPF_EditConst)
	unsigned char                                      bCrouchMaintainsBaseLocation : 1;                 		// 0x03CD(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnTemplate, CPF_EditConst)
	unsigned char                                      UnknownData10[0x2];                               		// 0x03CE(0x0002) MISSED OFFSET
	TEnumAsByte<enum class EStanceMode>                StanceMode;                                       		// 0x03D0(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EStanceMode>                WantsToStanceMode;                                		// 0x03D1(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x2];                               		// 0x03D2(0x0002) MISSED OFFSET
	unsigned char                                      bIgnoreBaseRotation : 1;                          		// 0x03D4(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bFastAttachedMove : 1;                            		// 0x03D4(0x0001)
	unsigned char                                      bAlwaysCheckFloor : 1;                            		// 0x03D4(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUseFlatBaseForFloorChecks : 1;                   		// 0x03D4(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bPerformingJumpOff : 1;                           		// 0x03D4(0x0001)
	unsigned char                                      bWantsToLeaveNavWalking : 1;                      		// 0x03D4(0x0001)
	unsigned char                                      bUseRVOAvoidance : 1;                             		// 0x03D4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bRequestedMoveUseAcceleration : 1;                		// 0x03D4(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bHasRequestedVelocity : 1;                        		// 0x03D5(0x0001) (CPF_Transient)
	unsigned char                                      bRequestedMoveWithMaxSpeed : 1;                   		// 0x03D5(0x0001) (CPF_Transient)
	unsigned char                                      bWasAvoidanceUpdated : 1;                         		// 0x03D5(0x0001) (CPF_Transient)
	unsigned char                                      bProjectNavMeshWalking : 1;                       		// 0x03D5(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bProjectNavMeshOnBothWorldChannels : 1;           		// 0x03D5(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData12[0x12];                              		// 0x03D6(0x0012) MISSED OFFSET
	float                                              AvoidanceConsiderationRadius;                     		// 0x03E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     RequestedVelocity;                                		// 0x03EC(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                AvoidanceUID;                                     		// 0x03F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	struct FNavAvoidanceMask                           AvoidanceGroup;                                   		// 0x03FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FNavAvoidanceMask                           GroupsToAvoid;                                    		// 0x0400(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FNavAvoidanceMask                           GroupsToIgnore;                                   		// 0x0404(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AvoidanceWeight;                                  		// 0x0408(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     PendingLaunchVelocity;                            		// 0x040C(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0xA0];                              		// 0x0418(0x00A0) MISSED OFFSET
	float                                              NavMeshProjectionInterval;                        		// 0x04B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NavMeshProjectionTimer;                           		// 0x04BC(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              NavMeshProjectionInterpSpeed;                     		// 0x04C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NavMeshProjectionHeightScaleUp;                   		// 0x04C4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NavMeshProjectionHeightScaleDown;                 		// 0x04C8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData14[0x1C];                              		// 0x04CC(0x001C) MISSED OFFSET
	struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;                          		// 0x04E8(0x0058)
	unsigned char                                      UnknownData15[0x10];                              		// 0x0540(0x0010) MISSED OFFSET
	float                                              MinTimeBetweenTimeStampResets;                    		// 0x0550(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData16[0x4];                               		// 0x0554(0x0004) MISSED OFFSET
	struct FRootMotionSourceGroup                      CurrentRootMotion;                                		// 0x0558(0x0100) (CPF_Transient)
	unsigned char                                      UnknownData17[0x98];                              		// 0x0658(0x0098) MISSED OFFSET
	struct FRootMotionMovementParams                   RootMotionParams;                                 		// 0x06F0(0x0040) (CPF_Transient)
	struct FVector                                     AnimRootMotionVelocity;                           		// 0x0730(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bWasSimulatingRootMotion : 1;                     		// 0x073C(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CharacterMovementComponent");
		return ptr;
	}


	void SeverAddRotationVelocity(const struct FVector& RotationVelocity);
	void SetWalkableFloorZ(float InWalkableFloorZ);
	void SetWalkableFloorAngle(float InWalkableFloorAngle);
	void SetProneWalkableFloorAngle(float InWalkableFloorAngle);
	void SetMovementMode(TEnumAsByte<enum class EMovementMode> NewMovementMode, unsigned char NewCustomMode);
	void SetGroupsToIgnoreMask(const struct FNavAvoidanceMask& GroupMask);
	void SetGroupsToIgnore(int GroupFlags);
	void SetGroupsToAvoidMask(const struct FNavAvoidanceMask& GroupMask);
	void SetGroupsToAvoid(int GroupFlags);
	void SetAvoidanceGroupMask(const struct FNavAvoidanceMask& GroupMask);
	void SetAvoidanceGroup(int GroupFlags);
	void SetAvoidanceEnabled(bool bEnable);
	void ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize10& OldAccel, unsigned char OldMoveFlags);
	void ServerMoveDualHybridRootMotion(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void ServerMove(float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	float K2_GetWalkableFloorZ();
	float K2_GetWalkableFloorAngle();
	float K2_GetModifiedMaxAcceleration();
	void K2_FindFloor(const struct FVector& CapsuleLocation, struct FFindFloorResult* FloorResult);
	void K2_ComputeFloorDist(const struct FVector& CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult* FloorResult);
	bool IsWalking();
	bool IsWalkable(const struct FHitResult& Hit);
	float GetValidPerchRadius();
	float GetPerchRadiusThreshold();
	class UPrimitiveComponent* GetMovementBase();
	float GetMaxJumpHeight();
	float GetMaxAcceleration();
	struct FVector GetImpartedMovementBaseVelocity();
	struct FVector GetCurrentAcceleration();
	class ACharacter* GetCharacterOwner();
	float GetAnalogInputModifier();
	void DisableMovement();
	void ClientVeryShortAdjustPosition(float TimeStamp, const struct FVector& NewLoc, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, const struct FRootMotionSourceGroup& ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustPosition(float TimeStamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAckGoodMove(float TimeStamp);
	void CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);
	void AddImpulse(const struct FVector& Impulse, bool bVelocityChange);
	void AddForce(const struct FVector& Force);
};


// Class Engine.CheatManager
// 0x0050 (0x0078 - 0x0028)
class UCheatManager : public UObject
{
public:
	class ADebugCameraController*                      DebugCameraControllerRef;                         		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      DebugCameraControllerClass;                       		// 0x0030(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x40];                              		// 0x0038(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CheatManager");
		return ptr;
	}


	void Walk();
	void ViewSelf();
	void ViewPlayer(const struct FString& S);
	void ViewClass(class UClass* DesiredClass);
	void ViewActor(const struct FName& ActorName);
	void ToggleDebugCamera();
	void ToggleAILogging();
	void TestCollisionDistance();
	void Teleport();
	void Summon(const struct FString& ClassName);
	void StreamLevelOut(const struct FName& PackageName);
	void StreamLevelIn(const struct FName& PackageName);
	void Slomo(float NewTimeDilation);
	void SetWorldOrigin();
	void SetNavDrawDistance(float DrawDistance);
	void SetMouseSensitivityToDefault();
	void ServerToggleAILogging();
	void ReceiveInitCheatManager();
	void ReceiveEndPlay();
	void RebuildNavigation();
	void PlayersOnly();
	void OnlyLoadLevel(const struct FName& PackageName);
	void LogLoc();
	void InvertMouse();
	void God();
	void Ghost();
	void FreezeFrame(float Delay);
	void Fly();
	void FlushLog();
	void EnableDebugCamera();
	void DumpVoiceMutingState();
	void DumpPartyState();
	void DumpOnlineSessionState();
	void DumpChatState();
	void DisableDebugCamera();
	void DestroyTarget();
	void DestroyPawns(class UClass* aClass);
	void DestroyAllPawnsExceptTarget();
	void DestroyAll(class UClass* aClass);
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);
	void DebugCapsuleSweepPawn();
	void DebugCapsuleSweepComplex(bool bTraceComplex);
	void DebugCapsuleSweepClear();
	void DebugCapsuleSweepChannel(TEnumAsByte<enum class ECollisionChannel> Channel);
	void DebugCapsuleSweepCapture();
	void DebugCapsuleSweep();
	void DamageTarget(float DamageAmount);
	void CheatScript(const struct FString& ScriptName);
	void ChangeSize(float F);
	void BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, struct FString* GoString, struct FString* LocString);
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
	void BugIt(const struct FString& ScreenShotDescription);
};


// Class Engine.Engine
// 0x0C88 (0x0CB0 - 0x0028)
class UEngine : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET
	class UFont*                                       TinyFont;                                         		// 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       TinyFontName;                                     		// 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UFont*                                       SmallFont;                                        		// 0x0048(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       SmallFontName;                                    		// 0x0050(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UFont*                                       MediumFont;                                       		// 0x0060(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       MediumFontName;                                   		// 0x0068(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UFont*                                       LargeFont;                                        		// 0x0078(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       LargeFontName;                                    		// 0x0080(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UFont*                                       SubtitleFont;                                     		// 0x0090(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       SubtitleFontName;                                 		// 0x0098(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<class UFont*>                               AdditionalFonts;                                  		// 0x00A8(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                               		// 0x00B8(0x0008) MISSED OFFSET
	TArray<struct FString>                             AdditionalFontNames;                              		// 0x00C0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UClass*                                      ConsoleClass;                                     		// 0x00D0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       ConsoleClassName;                                 		// 0x00D8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	class UClass*                                      GameViewportClientClass;                          		// 0x00E8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       GameViewportClientClassName;                      		// 0x00F0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	class UClass*                                      LocalPlayerClass;                                 		// 0x0100(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       LocalPlayerClassName;                             		// 0x0108(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	class UClass*                                      WorldSettingsClass;                               		// 0x0118(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       WorldSettingsClassName;                           		// 0x0120(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	struct FStringClassReference                       NavigationSystemClassName;                        		// 0x0130(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	class UClass*                                      NavigationSystemClass;                            		// 0x0140(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       AvoidanceManagerClassName;                        		// 0x0148(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	class UClass*                                      AvoidanceManagerClass;                            		// 0x0158(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      PhysicsCollisionHandlerClass;                     		// 0x0160(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       PhysicsCollisionHandlerClassName;                 		// 0x0168(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	struct FStringClassReference                       GameUserSettingsClassName;                        		// 0x0178(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	class UClass*                                      GameUserSettingsClass;                            		// 0x0188(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       AIControllerClassName;                            		// 0x0190(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	class UGameUserSettings*                           GameUserSettings;                                 		// 0x01A0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      LevelScriptActorClass;                            		// 0x01A8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       LevelScriptActorClassName;                        		// 0x01B0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	struct FStringClassReference                       DefaultBlueprintBaseClassName;                    		// 0x01C0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	struct FStringClassReference                       GameSingletonClassName;                           		// 0x01D0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	class UObject*                                     GameSingleton;                                    		// 0x01E0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTireType*                                   DefaultTireType;                                  		// 0x01E8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       DefaultTireTypeName;                              		// 0x01F0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	struct FString                                     PlayOnConsoleSaveDir;                             		// 0x0200(0x0010) (CPF_ZeroConstructor, CPF_Config)
	class UTexture2D*                                  DefaultTexture;                                   		// 0x0210(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       DefaultTextureName;                               		// 0x0218(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UTexture*                                    DefaultDiffuseTexture;                            		// 0x0228(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       DefaultDiffuseTextureName;                        		// 0x0230(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UTexture2D*                                  DefaultBSPVertexTexture;                          		// 0x0240(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       DefaultBSPVertexTextureName;                      		// 0x0248(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UTexture2D*                                  HighFrequencyNoiseTexture;                        		// 0x0258(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       HighFrequencyNoiseTextureName;                    		// 0x0260(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UTexture2D*                                  DefaultBokehTexture;                              		// 0x0270(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       DefaultBokehTextureName;                          		// 0x0278(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   WireframeMaterial;                                		// 0x0288(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     WireframeMaterialName;                            		// 0x0290(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   DebugMeshMaterial;                                		// 0x02A0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       DebugMeshMaterialName;                            		// 0x02A8(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   LevelColorationLitMaterial;                       		// 0x02B8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     LevelColorationLitMaterialName;                   		// 0x02C0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   LevelColorationUnlitMaterial;                     		// 0x02D0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     LevelColorationUnlitMaterialName;                 		// 0x02D8(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   LightingTexelDensityMaterial;                     		// 0x02E8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     LightingTexelDensityName;                         		// 0x02F0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                 		// 0x0300(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     ShadedLevelColorationLitMaterialName;             		// 0x0308(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;               		// 0x0318(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     ShadedLevelColorationUnlitMaterialName;           		// 0x0320(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   RemoveSurfaceMaterial;                            		// 0x0330(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       RemoveSurfaceMaterialName;                        		// 0x0338(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   VertexColorMaterial;                              		// 0x0348(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     VertexColorMaterialName;                          		// 0x0350(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;            		// 0x0360(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_ColorOnly;        		// 0x0368(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;         		// 0x0378(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_AlphaAsColor;     		// 0x0380(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;              		// 0x0390(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_RedOnly;          		// 0x0398(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;            		// 0x03A8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_GreenOnly;        		// 0x03B0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;             		// 0x03C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_BlueOnly;         		// 0x03C8(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   ConstraintLimitMaterial;                          		// 0x03D8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialX;                         		// 0x03E0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialXAxis;                     		// 0x03E8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialY;                         		// 0x03F0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialYAxis;                     		// 0x03F8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZ;                         		// 0x0400(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZAxis;                     		// 0x0408(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialPrismatic;                 		// 0x0410(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterial*                                   InvalidLightmapSettingsMaterial;                  		// 0x0418(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       InvalidLightmapSettingsMaterialName;              		// 0x0420(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   PreviewShadowsIndicatorMaterial;                  		// 0x0430(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       PreviewShadowsIndicatorMaterialName;              		// 0x0438(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   ArrowMaterial;                                    		// 0x0448(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       ArrowMaterialName;                                		// 0x0450(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	struct FLinearColor                                LightingOnlyBrightness;                           		// 0x0460(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	TArray<struct FLinearColor>                        ShaderComplexityColors;                           		// 0x0470(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FLinearColor>                        QuadComplexityColors;                             		// 0x0480(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FLinearColor>                        LightComplexityColors;                            		// 0x0490(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FLinearColor>                        StationaryLightOverlapColors;                     		// 0x04A0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FLinearColor>                        LODColorationColors;                              		// 0x04B0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FLinearColor>                        HLODColorationColors;                             		// 0x04C0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FLinearColor>                        StreamingAccuracyColors;                          		// 0x04D0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	float                                              MaxPixelShaderAdditiveComplexityCount;            		// 0x04E0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MaxES2PixelShaderAdditiveComplexityCount;         		// 0x04E4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MinLightMapDensity;                               		// 0x04E8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              IdealLightMapDensity;                             		// 0x04EC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MaxLightMapDensity;                               		// 0x04F0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      bRenderLightMapDensityGrayscale : 1;              		// 0x04F4(0x0001) (CPF_Config, CPF_GlobalConfig)
	unsigned char                                      UnknownData02[0x3];                               		// 0x04F5(0x0003) MISSED OFFSET
	float                                              RenderLightMapDensityGrayscaleScale;              		// 0x04F8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              RenderLightMapDensityColorScale;                  		// 0x04FC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	struct FLinearColor                                LightMapDensityVertexMappedColor;                 		// 0x0500(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	struct FLinearColor                                LightMapDensitySelectedColor;                     		// 0x0510(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	TArray<struct FStatColorMapping>                   StatColorMappings;                                		// 0x0520(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UPhysicalMaterial*                           DefaultPhysMaterial;                              		// 0x0530(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       DefaultPhysMaterialName;                          		// 0x0538(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FGameNameRedirect>                   ActiveGameNameRedirects;                          		// 0x0548(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FClassRedirect>                      ActiveClassRedirects;                             		// 0x0558(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FPluginRedirect>                     ActivePluginRedirects;                            		// 0x0568(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FStructRedirect>                     ActiveStructRedirects;                            		// 0x0578(0x0010) (CPF_ZeroConstructor, CPF_Config)
	class UTexture2D*                                  PreIntegratedSkinBRDFTexture;                     		// 0x0588(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       PreIntegratedSkinBRDFTextureName;                 		// 0x0590(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UTexture2D*                                  MiniFontTexture;                                  		// 0x05A0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       MiniFontTextureName;                              		// 0x05A8(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UTexture*                                    WeightMapPlaceholderTexture;                      		// 0x05B8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       WeightMapPlaceholderTextureName;                  		// 0x05C0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UTexture2D*                                  LightMapDensityTexture;                           		// 0x05D0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       LightMapDensityTextureName;                       		// 0x05D8(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	unsigned char                                      UnknownData03[0x8];                               		// 0x05E8(0x0008) MISSED OFFSET
	class UGameViewportClient*                         GameViewport;                                     		// 0x05F0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FString>                             DeferredCommands;                                 		// 0x05F8(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData04[0x18];                              		// 0x0608(0x0018) MISSED OFFSET
	int                                                TickCycles;                                       		// 0x0620(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                GameCycles;                                       		// 0x0624(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ClientCycles;                                     		// 0x0628(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NearClipPlane;                                    		// 0x062C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bHardwareSurveyEnabled : 1;                       		// 0x0630(0x0001) (CPF_Deprecated)
	unsigned char                                      bSubtitlesEnabled : 1;                            		// 0x0630(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bSubtitlesForcedOff : 1;                          		// 0x0630(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData05[0x3];                               		// 0x0631(0x0003) MISSED OFFSET
	int                                                MaximumLoopIterationCount;                        		// 0x0634(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bCanBlueprintsTickByDefault : 1;                  		// 0x0638(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bOptimizeAnimBlueprintMemberVariableAccess : 1;   		// 0x0638(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bEnableEditorPSysRealtimeLOD : 1;                 		// 0x0638(0x0001) (CPF_Config)
	unsigned char                                      bSmoothFrameRate : 1;                             		// 0x0638(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bUseFixedFrameRate : 1;                           		// 0x0638(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData06[0x3];                               		// 0x0639(0x0003) MISSED OFFSET
	float                                              FixedFrameRate;                                   		// 0x063C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FFloatRange                                 SmoothedFrameRateRange;                           		// 0x0640(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bCheckForMultiplePawnsSpawnedInAFrame : 1;        		// 0x0650(0x0001) (CPF_Config)
	unsigned char                                      UnknownData07[0x3];                               		// 0x0651(0x0003) MISSED OFFSET
	int                                                NumPawnsAllowedToBeSpawnedInAFrame;               		// 0x0654(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bShouldGenerateLowQualityLightmaps : 1;           		// 0x0658(0x0001) (CPF_Config, CPF_GlobalConfig, CPF_Deprecated)
	unsigned char                                      UnknownData08[0x3];                               		// 0x0659(0x0003) MISSED OFFSET
	struct FColor                                      C_WorldBox;                                       		// 0x065C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_BrushWire;                                      		// 0x0660(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_AddWire;                                        		// 0x0664(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_SubtractWire;                                   		// 0x0668(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_SemiSolidWire;                                  		// 0x066C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_NonSolidWire;                                   		// 0x0670(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_WireBackground;                                 		// 0x0674(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_ScaleBoxHi;                                     		// 0x0678(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_VolumeCollision;                                		// 0x067C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_BSPCollision;                                   		// 0x0680(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_OrthoBackground;                                		// 0x0684(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_Volume;                                         		// 0x0688(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_BrushShape;                                     		// 0x068C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StreamingDistanceFactor;                          		// 0x0690(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ETransitionType>            TransitionType;                                   		// 0x0694(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                               		// 0x0695(0x0003) MISSED OFFSET
	struct FString                                     TransitionDescription;                            		// 0x0698(0x0010) (CPF_ZeroConstructor)
	struct FString                                     TransitionGameMode;                               		// 0x06A8(0x0010) (CPF_ZeroConstructor)
	float                                              MeshLODRange;                                     		// 0x06B8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bAllowMatureLanguage : 1;                         		// 0x06BC(0x0001) (CPF_Config)
	unsigned char                                      UnknownData10[0x3];                               		// 0x06BD(0x0003) MISSED OFFSET
	float                                              CameraRotationThreshold;                          		// 0x06C0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CameraTranslationThreshold;                       		// 0x06C4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              PrimitiveProbablyVisibleTime;                     		// 0x06C8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MaxOcclusionPixelsFraction;                       		// 0x06CC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bPauseOnLossOfFocus : 1;                          		// 0x06D0(0x0001) (CPF_Config)
	unsigned char                                      UnknownData11[0x3];                               		// 0x06D1(0x0003) MISSED OFFSET
	int                                                MaxParticleResize;                                		// 0x06D4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxParticleResizeWarn;                            		// 0x06D8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                               		// 0x06DC(0x0004) MISSED OFFSET
	TArray<struct FDropNoteInfo>                       PendingDroppedNotes;                              		// 0x06E0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FRigidBodyErrorCorrection                   PhysicErrorCorrection;                            		// 0x06F0(0x001C) (CPF_Config)
	float                                              NetClientTicksPerSecond;                          		// 0x070C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              DisplayGamma;                                     		// 0x0710(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MinDesiredFrameRate;                              		// 0x0714(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FLinearColor                                DefaultSelectedMaterialColor;                     		// 0x0718(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	struct FLinearColor                                SelectedMaterialColor;                            		// 0x0728(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FLinearColor                                SelectionOutlineColor;                            		// 0x0738(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FLinearColor                                SubduedSelectionOutlineColor;                     		// 0x0748(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FLinearColor                                SelectedMaterialColorOverride;                    		// 0x0758(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsOverridingSelectedColor : 1;                   		// 0x0768(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                               		// 0x0769(0x0003) MISSED OFFSET
	unsigned char                                      bEnableOnScreenDebugMessages : 1;                 		// 0x076C(0x0001) (CPF_Config, CPF_GlobalConfig)
	unsigned char                                      bEnableOnScreenDebugMessagesDisplay : 1;          		// 0x076C(0x0001) (CPF_Transient)
	unsigned char                                      bSuppressMapWarnings : 1;                         		// 0x076C(0x0001) (CPF_Config, CPF_GlobalConfig)
	unsigned char                                      bDisableAILogging : 1;                            		// 0x076C(0x0001) (CPF_Config, CPF_GlobalConfig)
	unsigned char                                      UnknownData14[0x3];                               		// 0x076D(0x0003) MISSED OFFSET
	uint32_t                                           bEnableVisualLogRecordingOnStart;                 		// 0x0770(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                               		// 0x0774(0x0004) MISSED OFFSET
	int                                                ScreenSaverInhibitorSemaphore;                    		// 0x0778(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bLockReadOnlyLevels : 1;                          		// 0x077C(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData16[0x3];                               		// 0x077D(0x0003) MISSED OFFSET
	struct FString                                     ParticleEventManagerClassPath;                    		// 0x0780(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	unsigned char                                      UnknownData17[0x10];                              		// 0x0790(0x0010) MISSED OFFSET
	float                                              SelectionHighlightIntensity;                      		// 0x07A0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              SelectionMeshSectionHighlightIntensity;           		// 0x07A4(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              BSPSelectionHighlightIntensity;                   		// 0x07A8(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              HoverHighlightIntensity;                          		// 0x07AC(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              SelectionHighlightIntensityBillboards;            		// 0x07B0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData18[0x3DC];                             		// 0x07B4(0x03DC) MISSED OFFSET
	TArray<struct FNetDriverDefinition>                NetDriverDefinitions;                             		// 0x0B90(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_Config)
	TArray<struct FString>                             ServerActors;                                     		// 0x0BA0(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             RuntimeServerActors;                              		// 0x0BB0(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bStartedLoadMapMovie : 1;                         		// 0x0BC0(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData19[0x17];                              		// 0x0BC1(0x0017) MISSED OFFSET
	int                                                NextWorldContextHandle;                           		// 0x0BD8(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData20[0xD4];                              		// 0x0BDC(0x00D4) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Engine");
		return ptr;
	}

};


// Class Engine.ScriptViewportClient
// 0x0008 (0x0030 - 0x0028)
class UScriptViewportClient : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ScriptViewportClient");
		return ptr;
	}

};


// Class Engine.GameViewportClient
// 0x0460 (0x0490 - 0x0030)
class UGameViewportClient : public UScriptViewportClient
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0030(0x0008) MISSED OFFSET
	class UConsole*                                    ViewportConsole;                                  		// 0x0038(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FDebugDisplayProperty>               DebugProperties;                                  		// 0x0040(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x30];                              		// 0x0050(0x0030) MISSED OFFSET
	class UWorld*                                      World;                                            		// 0x0080(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UGameInstance*                               GameInstance;                                     		// 0x0088(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x400];                             		// 0x0090(0x0400) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameViewportClient");
		return ptr;
	}


	void SSSwapControllers();
	void ShowTitleSafeArea();
	void SetConsoleTarget(int PlayerIndex);
};


// Class Engine.Console
// 0x0108 (0x0130 - 0x0028)
class UConsole : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x0028(0x0010) MISSED OFFSET
	class ULocalPlayer*                                ConsoleTargetPlayer;                              		// 0x0038(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture2D*                                  DefaultTexture_Black;                             		// 0x0040(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture2D*                                  DefaultTexture_White;                             		// 0x0048(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                              		// 0x0050(0x0018) MISSED OFFSET
	TArray<struct FString>                             HistoryBuffer;                                    		// 0x0068(0x0010) (CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData02[0xB8];                              		// 0x0078(0x00B8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Console");
		return ptr;
	}

};


// Class Engine.DamageType
// 0x0018 (0x0040 - 0x0028)
class UDamageType : public UObject
{
public:
	unsigned char                                      bCausedByWorld : 1;                               		// 0x0028(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bScaleMomentumByMass : 1;                         		// 0x0028(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bRadialDamageVelChange : 1;                       		// 0x0028(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0029(0x0003) MISSED OFFSET
	float                                              DamageImpulse;                                    		// 0x002C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DestructibleImpulse;                              		// 0x0030(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DestructibleDamageSpreadScale;                    		// 0x0034(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DamageFalloff;                                    		// 0x0038(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DamageType");
		return ptr;
	}

};


// Class Engine.SkinnedMeshComponent
// 0x0170 (0x08C0 - 0x0750)
class USkinnedMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x0750(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TWeakObjectPtr<class USkinnedMeshComponent>        MasterPoseComponent;                              		// 0x0758(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x54];                              		// 0x0760(0x0054) MISSED OFFSET
	unsigned char                                      bUseBoundsFromMasterPoseComponent : 1;            		// 0x07B4(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData01[0x23];                              		// 0x07B5(0x0023) MISSED OFFSET
	class UPhysicsAsset*                               PhysicsAssetOverride;                             		// 0x07D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ForcedLodModel;                                   		// 0x07E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MinLodModel;                                      		// 0x07E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                              		// 0x07E8(0x0010) MISSED OFFSET
	TArray<struct FSkelMeshComponentLODInfo>           LODInfo;                                          		// 0x07F8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	float                                              StreamingDistanceMultiplier;                      		// 0x0808(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      WireframeColor;                                   		// 0x080C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bForceWireframe : 1;                              		// 0x0810(0x0001)
	unsigned char                                      bDisplayBones : 1;                                		// 0x0810(0x0001)
	unsigned char                                      bDisableMorphTarget : 1;                          		// 0x0810(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bHideSkin : 1;                                    		// 0x0810(0x0001)
	unsigned char                                      UnknownData03[0x17];                              		// 0x0811(0x0017) MISSED OFFSET
	unsigned char                                      bPerBoneMotionBlur : 1;                           		// 0x0828(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bComponentUseFixedSkelBounds : 1;                 		// 0x0828(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bConsiderAllBodiesForBounds : 1;                  		// 0x0828(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData04[0x3];                               		// 0x0829(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EMeshComponentUpdateFlag>   MeshComponentUpdateFlag;                          		// 0x082C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                               		// 0x082D(0x0003) MISSED OFFSET
	unsigned char                                      bForceMeshObjectUpdate : 1;                       		// 0x0830(0x0001) (CPF_Transient)
	unsigned char                                      bCanHighlightSelectedSections : 1;                		// 0x0830(0x0001) (CPF_Transient)
	unsigned char                                      bRecentlyRendered : 1;                            		// 0x0830(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData06[0x3];                               		// 0x0831(0x0003) MISSED OFFSET
	unsigned char                                      CustomSortAlternateIndexMode;                     		// 0x0834(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                               		// 0x0835(0x0003) MISSED OFFSET
	unsigned char                                      bCastCapsuleDirectShadow : 1;                     		// 0x0838(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bCastCapsuleIndirectShadow : 1;                   		// 0x0838(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData08[0x3];                               		// 0x0839(0x0003) MISSED OFFSET
	float                                              CapsuleIndirectShadowMinVisibility;               		// 0x083C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCPUSkinning : 1;                                 		// 0x0840(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData09[0x13];                              		// 0x0841(0x0013) MISSED OFFSET
	struct FBoxSphereBounds                            CachedLocalBounds;                                		// 0x0854(0x001C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bCachedLocalBoundsUpToDate : 1;                   		// 0x0870(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bEnableUpdateRateOptimizations : 1;               		// 0x0871(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDisplayDebugUpdateRateOptimizations : 1;         		// 0x0872(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x4D];                              		// 0x0873(0x004D) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkinnedMeshComponent");
		return ptr;
	}


	void UnHideBoneByName(const struct FName& BoneName);
	void TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bReinitPose);
	void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);
	void SetMinLOD(int InNewMinLOD);
	void SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent);
	void SetForcedLOD(int InNewForcedLOD);
	bool IsBoneHiddenByName(const struct FName& BoneName);
	void HideBoneByName(const struct FName& BoneName, TEnumAsByte<enum class EPhysBodyOp> PhysBodyOption);
	struct FName GetSocketBoneName(const struct FName& InSocketName);
	struct FName GetParentBone(const struct FName& BoneName);
	int GetNumBones();
	struct FName GetBoneName(int BoneIndex);
	int GetBoneIndex(const struct FName& BoneName);
	struct FName FindClosestBone_K2(const struct FVector& TestLocation, float IgnoreScale, bool bRequirePhysicsAsset, struct FVector* BoneLocation);
	bool BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName);
};


// Class Engine.DestructibleComponent
// 0x00D0 (0x0990 - 0x08C0)
class UDestructibleComponent : public USkinnedMeshComponent
{
public:
	unsigned char                                      bFractureEffectOverride : 1;                      		// 0x08C0(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                               		// 0x08C1(0x0007) MISSED OFFSET
	TArray<struct FFractureEffect>                     FractureEffects;                                  		// 0x08C8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_EditFixedSize, CPF_ZeroConstructor)
	unsigned char                                      bEnableHardSleeping : 1;                          		// 0x08D8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x08D9(0x0003) MISSED OFFSET
	float                                              LargeChunkThreshold;                              		// 0x08DC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                              		// 0x08E0(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnComponentFracture;                              		// 0x08F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData03[0x90];                              		// 0x0900(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DestructibleComponent");
		return ptr;
	}


	void SetDestructibleMesh(class UDestructibleMesh* NewMesh);
	class UDestructibleMesh* GetDestructibleMesh();
	void ApplyRadiusDamage(float BaseDamage, const struct FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);
	void ApplyDamage(float DamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength);
};


// Class Engine.StaticMeshActor
// 0x0010 (0x0398 - 0x0388)
class AStaticMeshActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bStaticMeshReplicateMovement : 1;                 		// 0x0390(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ENavDataGatheringMode>      NavigationGeometryGatheringMode;                  		// 0x0391(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshActor");
		return ptr;
	}

};


// Class Engine.GameEngine
// 0x0050 (0x0D00 - 0x0CB0)
class UGameEngine : public UEngine
{
public:
	class UGameInstance*                               GameInstance;                                     		// 0x0CB0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x48];                              		// 0x0CB8(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameEngine");
		return ptr;
	}

};


// Class Engine.GameModeBase
// 0x0090 (0x0418 - 0x0388)
class AGameModeBase : public AInfo
{
public:
	struct FString                                     OptionsString;                                    		// 0x0388(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	class UClass*                                      GameSessionClass;                                 		// 0x0398(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      GameStateClass;                                   		// 0x03A0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	class UClass*                                      PlayerControllerClass;                            		// 0x03A8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	class UClass*                                      PlayerStateClass;                                 		// 0x03B0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	class UClass*                                      HUDClass;                                         		// 0x03B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      DefaultPawnClass;                                 		// 0x03C0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      SpectatorClass;                                   		// 0x03C8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	class UClass*                                      ReplaySpectatorPlayerControllerClass;             		// 0x03D0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	class AGameSession*                                GameSession;                                      		// 0x03D8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class AGameStateBase*                              GameState;                                        		// 0x03E0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FText                                       DefaultPlayerName;                                		// 0x03E8(0x0018) (CPF_Edit)
	unsigned char                                      bUseSeamlessTravel : 1;                           		// 0x0400(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bStartPlayersAsSpectators : 1;                    		// 0x0400(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bPauseable : 1;                                   		// 0x0400(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x17];                              		// 0x0401(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameModeBase");
		return ptr;
	}


	void StartPlay();
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot);
	class APawn* SpawnDefaultPawnAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform);
	bool ShouldReset(class AActor* ActorToReset);
	void ReturnToMainMenuHost();
	void RestartPlayerAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform);
	void RestartPlayerAtPlayerStart(class AController* NewPlayer, class AActor* StartSpot);
	void RestartPlayer(class AController* NewPlayer);
	void ResetLevel();
	bool PlayerCanRestart(class APlayerController* Player);
	bool MustSpectate(class APlayerController* NewPlayerController);
	void K2_PostLogin(class APlayerController* NewPlayer);
	void K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);
	void K2_OnRestartPlayer(class AController* NewPlayer);
	void K2_OnLogout(class AController* ExitingController);
	void K2_OnChangeName(class AController* Other, const struct FString& NewName, bool bNameChange);
	class AActor* K2_FindPlayerStart(class AController* Player, const struct FString& IncomingName);
	void InitStartSpot(class AActor* StartSpot, class AController* NewPlayer);
	void InitializeHUDForPlayer(class APlayerController* NewPlayer);
	bool HasMatchStarted();
	void HandleStartingNewPlayer(class APlayerController* NewPlayer);
	int GetNumSpectators();
	int GetNumPlayers();
	class UClass* GetDefaultPawnClassForController(class AController* InController);
	class AActor* FindPlayerStart(class AController* Player, const struct FString& IncomingName);
	class AActor* ChoosePlayerStart(class AController* Player);
	void ChangeName(class AController* Controller, const struct FString& NewName, bool bNameChange);
	bool CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget);
};


// Class Engine.GameMode
// 0x0040 (0x0458 - 0x0418)
class AGameMode : public AGameModeBase
{
public:
	struct FName                                       MatchState;                                       		// 0x0418(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bDelayedStart : 1;                                		// 0x0420(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0421(0x0003) MISSED OFFSET
	int                                                NumSpectators;                                    		// 0x0424(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumPlayers;                                       		// 0x0428(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumBots;                                          		// 0x042C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinRespawnDelay;                                  		// 0x0430(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumTravellingPlayers;                             		// 0x0434(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      EngineMessageClass;                               		// 0x0438(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class APlayerState*>                        InactivePlayerArray;                              		// 0x0440(0x0010) (CPF_ZeroConstructor)
	float                                              InactivePlayerStateLifeSpan;                      		// 0x0450(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHandleDedicatedServerReplays : 1;                		// 0x0454(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameMode");
		return ptr;
	}


	void StartMatch();
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);
	void Say(const struct FString& Msg);
	void RestartGame();
	bool ReadyToStartMatch();
	bool ReadyToEndMatch();
	void K2_OnSetMatchState(const struct FName& NewState);
	bool IsMatchInProgress();
	bool HasMatchEnded();
	struct FName GetMatchState();
	void EndMatch();
	void AbortMatch();
};


// Class Engine.GameInstance
// 0x00C8 (0x00F0 - 0x0028)
class UGameInstance : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x0028(0x0010) MISSED OFFSET
	TArray<class ULocalPlayer*>                        LocalPlayers;                                     		// 0x0038(0x0010) (CPF_ZeroConstructor)
	class UOnlineSession*                              OnlineSession;                                    		// 0x0048(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xA0];                              		// 0x0050(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameInstance");
		return ptr;
	}


	void ReceiveShutdown();
	void ReceiveInit();
	void HandleTravelError(TEnumAsByte<enum class ETravelFailure> FailureType);
	void HandleNetworkError(TEnumAsByte<enum class ENetworkFailure> FailureType, bool bIsServer);
	void DebugRemovePlayer(int ControllerId);
	void DebugCreatePlayer(int ControllerId);
};


// Class Engine.BlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBlueprintFunctionLibrary : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlueprintFunctionLibrary");
		return ptr;
	}


	struct FStringAssetReference STATIC_MakeStringAssetReference(const struct FString& AssetLongPathname);
};


// Class Engine.GameSession
// 0x0018 (0x03A0 - 0x0388)
class AGameSession : public AInfo
{
public:
	int                                                MaxSpectators;                                    		// 0x0388(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	int                                                MaxPlayers;                                       		// 0x038C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	int                                                MaxPartySize;                                     		// 0x0390(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      MaxSplitscreensPerConnection;                     		// 0x0394(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      bRequiresPushToTalk : 1;                          		// 0x0395(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                               		// 0x0396(0x0002) MISSED OFFSET
	struct FName                                       SessionName;                                      		// 0x0398(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameSession");
		return ptr;
	}

};


// Class Engine.GameStateBase
// 0x0040 (0x03C8 - 0x0388)
class AGameStateBase : public AInfo
{
public:
	class UClass*                                      GameModeClass;                                    		// 0x0388(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class AGameModeBase*                               AuthorityGameMode;                                		// 0x0390(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UClass*                                      SpectatorClass;                                   		// 0x0398(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<class APlayerState*>                        PlayerArray;                                      		// 0x03A0(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      bReplicatedHasBegunPlay : 1;                      		// 0x03B0(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x03B1(0x0003) MISSED OFFSET
	float                                              ReplicatedWorldTimeSeconds;                       		// 0x03B4(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              ServerWorldTimeSecondsDelta;                      		// 0x03B8(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              ServerWorldTimeSecondsUpdateFrequency;            		// 0x03BC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                               		// 0x03C0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameStateBase");
		return ptr;
	}


	void OnRep_SpectatorClass();
	void OnRep_ReplicatedWorldTimeSeconds();
	void OnRep_ReplicatedHasBegunPlay();
	void OnRep_GameModeClass();
	bool HasMatchStarted();
	bool HasBegunPlay();
	float GetServerWorldTimeSeconds();
	float GetPlayerStartTime(class AController* Controller);
	float GetPlayerRespawnDelay(class AController* Controller);
};


// Class Engine.GameState
// 0x0020 (0x03E8 - 0x03C8)
class AGameState : public AGameStateBase
{
public:
	struct FName                                       MatchState;                                       		// 0x03C8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	struct FName                                       PreviousMatchState;                               		// 0x03D0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	int                                                ElapsedTime;                                      		// 0x03D8(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                               		// 0x03DC(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameState");
		return ptr;
	}


	void OnRep_MatchState();
	void OnRep_ElapsedTime();
};


// Class Engine.GameUserSettings
// 0x00D8 (0x0100 - 0x0028)
class UGameUserSettings : public UObject
{
public:
	unsigned char                                      bUseVSync : 1;                                    		// 0x0028(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4F];                              		// 0x0029(0x004F) MISSED OFFSET
	uint32_t                                           ResolutionSizeX;                                  		// 0x0078(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	uint32_t                                           ResolutionSizeY;                                  		// 0x007C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	uint32_t                                           LastUserConfirmedResolutionSizeX;                 		// 0x0080(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	uint32_t                                           LastUserConfirmedResolutionSizeY;                 		// 0x0084(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                WindowPosX;                                       		// 0x0088(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                WindowPosY;                                       		// 0x008C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                FullscreenMode;                                   		// 0x0090(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                LastConfirmedFullscreenMode;                      		// 0x0094(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                PreferredFullscreenMode;                          		// 0x0098(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	uint32_t                                           Version;                                          		// 0x009C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                AudioQualityLevel;                                		// 0x00A0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              FrameRateLimit;                                   		// 0x00A4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                               		// 0x00A8(0x0004) MISSED OFFSET
	int                                                DesiredScreenWidth;                               		// 0x00AC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bUseDesiredScreenHeight : 1;                      		// 0x00B0(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                               		// 0x00B1(0x0003) MISSED OFFSET
	int                                                DesiredScreenHeight;                              		// 0x00B4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              LastRecommendedScreenWidth;                       		// 0x00B8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              LastRecommendedScreenHeight;                      		// 0x00BC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              LastCPUBenchmarkResult;                           		// 0x00C0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              LastGPUBenchmarkResult;                           		// 0x00C4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TArray<float>                                      LastCPUBenchmarkSteps;                            		// 0x00C8(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<float>                                      LastGPUBenchmarkSteps;                            		// 0x00D8(0x0010) (CPF_ZeroConstructor, CPF_Config)
	float                                              LastGPUBenchmarkMultiplier;                       		// 0x00E8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                               		// 0x00EC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnGameUserSettingsUINeedsUpdate;                  		// 0x00F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameUserSettings");
		return ptr;
	}


	void ValidateSettings();
	void SetVSyncEnabled(bool bEnable);
	void SetVisualEffectQuality(int Value);
	void SetViewDistanceQuality(int Value);
	void SetToDefaults();
	void SetTextureQuality(int Value);
	void SetShadowQuality(int Value);
	void SetScreenResolution(const struct FIntPoint& Resolution);
	void SetResolutionScaleValueEx(float NewScaleValue);
	void SetResolutionScaleValue(int NewScaleValue);
	void SetResolutionScaleNormalized(float NewScaleNormalized);
	void SetPostProcessingQuality(int Value);
	void SetOverallScalabilityLevel(int Value);
	void SetFullscreenMode(TEnumAsByte<enum class EWindowMode> InFullscreenMode);
	void SetFrameRateLimit(float NewLimit);
	void SetFoliageQuality(int Value);
	void SetBenchmarkFallbackValues();
	void SetAudioQualityLevel(int QualityLevel);
	void SetAntiAliasingQuality(int Value);
	void SaveSettings();
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);
	void RevertVideoMode();
	void ResetToCurrentSettings();
	void LoadSettings(bool bForceReload);
	bool IsVSyncEnabled();
	bool IsVSyncDirty();
	bool IsScreenResolutionDirty();
	bool IsFullscreenModeDirty();
	bool IsDirty();
	int GetVisualEffectQuality();
	int GetViewDistanceQuality();
	int GetTextureQuality();
	int GetShadowQuality();
	struct FIntPoint GetScreenResolution();
	void GetResolutionScaleInformationEx(float* CurrentScaleNormalized, float* CurrentScaleValue, float* MinScaleValue, float* MaxScaleValue);
	void GetResolutionScaleInformation(float* CurrentScaleNormalized, int* CurrentScaleValue, int* MinScaleValue, int* MaxScaleValue);
	TEnumAsByte<enum class EWindowMode> GetPreferredFullscreenMode();
	int GetPostProcessingQuality();
	int GetOverallScalabilityLevel();
	struct FIntPoint GetLastConfirmedScreenResolution();
	TEnumAsByte<enum class EWindowMode> GetLastConfirmedFullscreenMode();
	class UGameUserSettings* STATIC_GetGameUserSettings();
	TEnumAsByte<enum class EWindowMode> GetFullScreenMode();
	float GetFrameRateLimit();
	int GetFoliageQuality();
	struct FIntPoint GetDesktopResolution();
	struct FIntPoint STATIC_GetDefaultWindowPosition();
	TEnumAsByte<enum class EWindowMode> STATIC_GetDefaultWindowMode();
	float GetDefaultResolutionScale();
	struct FIntPoint STATIC_GetDefaultResolution();
	int GetAudioQualityLevel();
	int GetAntiAliasingQuality();
	void ConfirmVideoMode();
	void ApplySettings(bool bCheckForCommandLineOverrides);
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);
	void ApplyNonResolutionSettings();
	void ApplyHardwareBenchmarkResults();
};


// Class Engine.InstancedStaticMeshComponent
// 0x00B0 (0x0890 - 0x07E0)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x07E0(0x0008) MISSED OFFSET
	int                                                InstancingRandomSeed;                             		// 0x07E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                InstanceStartCullDistance;                        		// 0x07EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                InstanceEndCullDistance;                          		// 0x07F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                               		// 0x07F4(0x0004) MISSED OFFSET
	TArray<int>                                        InstanceReorderTable;                             		// 0x07F8(0x0010) (CPF_ZeroConstructor)
	TArray<int>                                        RemovedInstances;                                 		// 0x0808(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData02[0x58];                              		// 0x0818(0x0058) MISSED OFFSET
	class UPhysicsSerializer*                          PhysicsSerializer;                                		// 0x0870(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	int                                                NumPendingLightmaps;                              		// 0x0878(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                               		// 0x087C(0x0004) MISSED OFFSET
	TArray<struct FInstancedStaticMeshMappingInfo>     CachedMappings;                                   		// 0x0880(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InstancedStaticMeshComponent");
		return ptr;
	}


	bool UpdateInstanceTransform(int InstanceIndex, const struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);
	void SetCullDistances(int StartCullDistance, int EndCullDistance);
	bool RemoveInstance(int InstanceIndex);
	bool GetInstanceTransform(int InstanceIndex, bool bWorldSpace, struct FTransform* OutInstanceTransform);
	TArray<int> GetInstancesOverlappingSphere(const struct FVector& Center, float Radius, bool bSphereInWorldSpace);
	TArray<int> GetInstancesOverlappingBox(const struct FBox& Box, bool bBoxInWorldSpace);
	int GetInstanceCount();
	void ClearInstances();
	int AddInstanceWorldSpace(const struct FTransform& WorldTransform);
	int AddInstance(const struct FTransform& InstanceTransform);
};


// Class Engine.HierarchicalInstancedStaticMeshComponent
// 0x0120 (0x09B0 - 0x0890)
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x68];                              		// 0x0890(0x0068) MISSED OFFSET
	TArray<int>                                        SortedInstances;                                  		// 0x08F8(0x0010) (CPF_ZeroConstructor)
	int                                                NumBuiltInstances;                                		// 0x0908(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                               		// 0x090C(0x0004) MISSED OFFSET
	struct FBox                                        BuiltInstanceBounds;                              		// 0x0910(0x001C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FBox                                        UnbuiltInstanceBounds;                            		// 0x092C(0x001C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FBox>                                UnbuiltInstanceBoundsList;                        		// 0x0948(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bEnableDensityScaling : 1;                        		// 0x0958(0x0001)
	unsigned char                                      UnknownData02[0x27];                              		// 0x0959(0x0027) MISSED OFFSET
	int                                                OcclusionLayerNumNodes;                           		// 0x0980(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                               		// 0x0984(0x0003) MISSED OFFSET
	unsigned char                                      bDisableCollision : 1;                            		// 0x0987(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x28];                              		// 0x0988(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HierarchicalInstancedStaticMeshComponent");
		return ptr;
	}


	bool RemoveInstances(TArray<int> InstancesToRemove);
};


// Class Engine.GridInstancedStaticMeshComponent
// 0x0000 (0x09B0 - 0x09B0)
class UGridInstancedStaticMeshComponent : public UHierarchicalInstancedStaticMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GridInstancedStaticMeshComponent");
		return ptr;
	}

};


// Class Engine.SaveGame
// 0x0000 (0x0028 - 0x0028)
class USaveGame : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SaveGame");
		return ptr;
	}

};


// Class Engine.Player
// 0x0020 (0x0048 - 0x0028)
class UPlayer : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET
	class APlayerController*                           PlayerController;                                 		// 0x0030(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                CurrentNetSpeed;                                  		// 0x0038(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ConfiguredInternetSpeed;                          		// 0x003C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	int                                                ConfiguredLanSpeed;                               		// 0x0040(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Player");
		return ptr;
	}

};


// Class Engine.LocalPlayer
// 0x0148 (0x0190 - 0x0048)
class ULocalPlayer : public UPlayer
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x0048(0x0010) MISSED OFFSET
	class UGameViewportClient*                         ViewportClient;                                   		// 0x0058(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                              		// 0x0060(0x0020) MISSED OFFSET
	class UClass*                                      PendingLevelPlayerControllerClass;                		// 0x0080(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bSentSplitJoin : 1;                               		// 0x0088(0x0001) (CPF_Edit, CPF_Transient, CPF_EditConst)
	unsigned char                                      UnknownData02[0x107];                             		// 0x0089(0x0107) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LocalPlayer");
		return ptr;
	}

};


// Class Engine.PhysicsVolume
// 0x0010 (0x03D0 - 0x03C0)
class APhysicsVolume : public AVolume
{
public:
	float                                              TerminalVelocity;                                 		// 0x03C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                Priority;                                         		// 0x03C4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FluidFriction;                                    		// 0x03C8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bWaterVolume : 1;                                 		// 0x03CC(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bPhysicsOnContact : 1;                            		// 0x03CC(0x0001) (CPF_Edit, CPF_BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsVolume");
		return ptr;
	}

};


// Class Engine.PlayerCameraManager
// 0x1648 (0x19D0 - 0x0388)
class APlayerCameraManager : public AActor
{
public:
	class APlayerController*                           PCOwner;                                          		// 0x0388(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class USceneComponent*                             TransformComponent;                               		// 0x0390(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                               		// 0x0398(0x0008) MISSED OFFSET
	float                                              DefaultFOV;                                       		// 0x03A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                               		// 0x03A4(0x0004) MISSED OFFSET
	float                                              DefaultOrthoWidth;                                		// 0x03A8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                               		// 0x03AC(0x0004) MISSED OFFSET
	float                                              DefaultAspectRatio;                               		// 0x03B0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4C];                              		// 0x03B4(0x004C) MISSED OFFSET
	struct FCameraCacheEntry                           CameraCache;                                      		// 0x0400(0x0520) (CPF_Transient)
	struct FCameraCacheEntry                           LastFrameCameraCache;                             		// 0x0920(0x0520) (CPF_Transient)
	struct FTViewTarget                                ViewTarget;                                       		// 0x0E40(0x0530) (CPF_Transient)
	struct FTViewTarget                                PendingViewTarget;                                		// 0x1370(0x0530) (CPF_Transient)
	unsigned char                                      UnknownData04[0x18];                              		// 0x18A0(0x0018) MISSED OFFSET
	TArray<class UCameraModifier*>                     ModifierList;                                     		// 0x18B8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class UClass*>                              DefaultModifiers;                                 		// 0x18C8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	float                                              FreeCamDistance;                                  		// 0x18D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     FreeCamOffset;                                    		// 0x18DC(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     ViewTargetOffset;                                 		// 0x18E8(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x14];                              		// 0x18F4(0x0014) MISSED OFFSET
	TArray<class AEmitterCameraLensEffectBase*>        CameraLensEffects;                                		// 0x1908(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class UCameraModifier_CameraShake*                 CachedCameraShakeMod;                             		// 0x1918(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UCameraAnimInst*                             AnimInstPool[0x8];                                		// 0x1920(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FPostProcessSettings>                PostProcessBlendCache;                            		// 0x1960(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData06[0x10];                              		// 0x1970(0x0010) MISSED OFFSET
	TArray<class UCameraAnimInst*>                     ActiveAnims;                                      		// 0x1980(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class UCameraAnimInst*>                     FreeAnims;                                        		// 0x1990(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class ACameraActor*                                AnimCameraActor;                                  		// 0x19A0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsOrthographic : 1;                              		// 0x19A8(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUseClientSideCameraUpdates : 1;                  		// 0x19A8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData07[0x3];                               		// 0x19A9(0x0003) MISSED OFFSET
	float                                              ViewPitchMin;                                     		// 0x19AC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ViewPitchMax;                                     		// 0x19B0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ViewYawMin;                                       		// 0x19B4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ViewYawMax;                                       		// 0x19B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ViewRollMin;                                      		// 0x19BC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ViewRollMax;                                      		// 0x19C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0xC];                               		// 0x19C4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerCameraManager");
		return ptr;
	}


	void StopCameraShake(class UCameraShake* ShakeInstance, bool bImmediately);
	void StopCameraFade();
	void StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate);
	void StopAllInstancesOfCameraShake(class UClass* Shake, bool bImmediately);
	void StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate);
	void StopAllCameraShakes(bool bImmediately);
	void StopAllCameraAnims(bool bImmediate);
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const struct FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished);
	void SetManualCameraFade(float InFadeAmount, const struct FLinearColor& Color, bool bInFadeAudio);
	bool RemoveCameraModifier(class UCameraModifier* ModifierToRemove);
	void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter);
	class UCameraShake* PlayCameraShake(class UClass* ShakeClass, float Scale, TEnumAsByte<enum class ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	class UCameraAnimInst* PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, TEnumAsByte<enum class ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void PhotographyCameraModify(const struct FVector& NewCameraLocation, const struct FVector& PreviousCameraLocation, const struct FVector& OriginalCameraLocation, struct FVector* ResultCameraLocation);
	void OnPhotographySessionStart();
	void OnPhotographySessionEnd();
	void OnPhotographyMultiPartCaptureStart();
	void OnPhotographyMultiPartCaptureEnd();
	class APlayerController* GetOwningPlayerController();
	float GetFOVAngle();
	struct FRotator GetCameraRotation();
	struct FVector GetCameraLocation();
	class UCameraModifier* FindCameraModifierByClass(class UClass* ModifierClass);
	void ClearCameraLensEffects();
	bool BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV);
	class UCameraModifier* AddNewCameraModifier(class UClass* ModifierClass);
	class AEmitterCameraLensEffectBase* AddCameraLensEffect(class UClass* LensEffectEmitterClass);
};


// Class Engine.PlayerState
// 0x0090 (0x0418 - 0x0388)
class APlayerState : public AInfo
{
public:
	float                                              Score;                                            		// 0x0388(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      Ping;                                             		// 0x038C(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x038D(0x0003) MISSED OFFSET
	struct FString                                     PlayerName;                                       		// 0x0390(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                              		// 0x03A0(0x0010) MISSED OFFSET
	int                                                PlayerId;                                         		// 0x03B0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsSpectator : 1;                                 		// 0x03B4(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net)
	unsigned char                                      bOnlySpectator : 1;                               		// 0x03B4(0x0001) (CPF_Net)
	unsigned char                                      bIsABot : 1;                                      		// 0x03B4(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net)
	unsigned char                                      bIsInactive : 1;                                  		// 0x03B4(0x0001) (CPF_Net)
	unsigned char                                      bFromPreviousLevel : 1;                           		// 0x03B4(0x0001) (CPF_Net)
	unsigned char                                      UnknownData02[0x3];                               		// 0x03B5(0x0003) MISSED OFFSET
	int                                                StartTime;                                        		// 0x03B8(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                               		// 0x03BC(0x0004) MISSED OFFSET
	class UClass*                                      EngineMessageClass;                               		// 0x03C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                               		// 0x03C8(0x0008) MISSED OFFSET
	struct FString                                     SavedNetworkAddress;                              		// 0x03D0(0x0010) (CPF_ZeroConstructor)
	struct FUniqueNetIdRepl                            UniqueId;                                         		// 0x03E0(0x0018) (CPF_Net)
	unsigned char                                      UnknownData05[0x20];                              		// 0x03F8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerState");
		return ptr;
	}


	void ReceiveOverrideWith(class APlayerState* OldPlayerState);
	void ReceiveCopyProperties(class APlayerState* NewPlayerState);
	void OnRep_UniqueId();
	void OnRep_Score();
	void OnRep_PlayerName();
	void OnRep_bIsInactive();
};


// Class Engine.SceneCaptureComponent
// 0x00C0 (0x03C0 - 0x0300)
class USceneCaptureComponent : public USceneComponent
{
public:
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  HiddenComponents;                                 		// 0x0300(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	TArray<class AActor*>                              HiddenActors;                                     		// 0x0310(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  ShowOnlyComponents;                               		// 0x0320(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	TArray<class AActor*>                              ShowOnlyActors;                                   		// 0x0330(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	unsigned char                                      bCaptureEveryFrame : 1;                           		// 0x0340(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCaptureOnMovement : 1;                           		// 0x0341(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                               		// 0x0342(0x0002) MISSED OFFSET
	float                                              MaxViewDistanceOverride;                          		// 0x0344(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FEngineShowFlagsSetting>             ShowFlagSettings;                                 		// 0x0348(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x68];                              		// 0x0358(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureComponent");
		return ptr;
	}


	void ShowOnlyComponent(class UPrimitiveComponent* InComponent);
	void ShowOnlyActorComponents(class AActor* InActor);
	void HideComponent(class UPrimitiveComponent* InComponent);
	void HideActorComponents(class AActor* InActor);
};


// Class Engine.SceneCaptureComponent2D
// 0x04F0 (0x08B0 - 0x03C0)
class USceneCaptureComponent2D : public USceneCaptureComponent
{
public:
	float                                              OrthoWidth;                                       		// 0x03C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x03C4(0x0004) MISSED OFFSET
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x03C8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ESceneCaptureSource>        CaptureSource;                                    		// 0x03D0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ESceneCaptureCompositeMode> CompositeMode;                                    		// 0x03D1(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xE];                               		// 0x03D2(0x000E) MISSED OFFSET
	struct FPostProcessSettings                        PostProcessSettings;                              		// 0x03E0(0x04C0) (CPF_Edit, CPF_BlueprintVisible)
	float                                              PostProcessBlendWeight;                           		// 0x08A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                               		// 0x08A4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureComponent2D");
		return ptr;
	}


	void CaptureScene();
	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.DefaultPawn
// 0x0028 (0x0410 - 0x03E8)
class ADefaultPawn : public APawn
{
public:
	float                                              BaseTurnRate;                                     		// 0x03E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	float                                              BaseLookUpRate;                                   		// 0x03EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	class UPawnMovementComponent*                      MovementComponent;                                		// 0x03F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USphereComponent*                            CollisionComponent;                               		// 0x03F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UStaticMeshComponent*                        MeshComponent;                                    		// 0x0400(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bAddDefaultMovementBindings : 1;                  		// 0x0408(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DefaultPawn");
		return ptr;
	}


	void TurnAtRate(float Rate);
	void Turn(float Val);
	void MoveUp_World(float Val);
	void MoveRight(float Val);
	void MoveForward(float Val);
	void LookUpAtRate(float Rate);
	void LookUp(float Val);
};


// Class Engine.SpectatorPawn
// 0x0000 (0x0410 - 0x0410)
class ASpectatorPawn : public ADefaultPawn
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpectatorPawn");
		return ptr;
	}

};


// Class Engine.FloatingPawnMovement
// 0x0018 (0x0190 - 0x0178)
class UFloatingPawnMovement : public UPawnMovementComponent
{
public:
	float                                              MaxSpeed;                                         		// 0x0178(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Acceleration;                                     		// 0x017C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Deceleration;                                     		// 0x0180(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TurningBoost;                                     		// 0x0184(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPositionCorrected : 1;                           		// 0x0188(0x0001) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FloatingPawnMovement");
		return ptr;
	}

};


// Class Engine.SpectatorPawnMovement
// 0x0008 (0x0198 - 0x0190)
class USpectatorPawnMovement : public UFloatingPawnMovement
{
public:
	unsigned char                                      bIgnoreTimeDilation : 1;                          		// 0x0190(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpectatorPawnMovement");
		return ptr;
	}

};


// Class Engine.VehicleWheel
// 0x00C0 (0x00E8 - 0x0028)
class UVehicleWheel : public UObject
{
public:
	class UStaticMesh*                                 CollisionMesh;                                    		// 0x0028(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bDontCreateShape : 1;                             		// 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bAutoAdjustCollisionSize : 1;                     		// 0x0031(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                               		// 0x0032(0x0002) MISSED OFFSET
	struct FVector                                     Offset;                                           		// 0x0034(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ShapeRadius;                                      		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ShapeWidth;                                       		// 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Mass;                                             		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DampingRate;                                      		// 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SteerAngle;                                       		// 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAffectedByHandbrake : 1;                         		// 0x0054(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0055(0x0003) MISSED OFFSET
	class UTireType*                                   TireType;                                         		// 0x0058(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LatStiffMaxLoad;                                  		// 0x0060(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LatStiffValue;                                    		// 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LongStiffValue;                                   		// 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SuspensionForceOffset;                            		// 0x006C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SuspensionMaxRaise;                               		// 0x0070(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SuspensionMaxDrop;                                		// 0x0074(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SuspensionNaturalFrequency;                       		// 0x0078(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SuspensionDampingRatio;                           		// 0x007C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxBrakeTorque;                                   		// 0x0080(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxHandBrakeTorque;                               		// 0x0084(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ECollisionChannel>          QueryChannel;                                     		// 0x0088(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                               		// 0x0089(0x0007) MISSED OFFSET
	class UWheeledVehicleMovementComponent*            VehicleSim;                                       		// 0x0090(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	int                                                WheelIndex;                                       		// 0x0098(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DebugLongSlip;                                    		// 0x009C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DebugLatSlip;                                     		// 0x00A0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DebugNormalizedTireLoad;                          		// 0x00A4(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                               		// 0x00A8(0x0004) MISSED OFFSET
	float                                              DebugWheelTorque;                                 		// 0x00AC(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DebugLongForce;                                   		// 0x00B0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DebugLatForce;                                    		// 0x00B4(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     Location;                                         		// 0x00B8(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     OldLocation;                                      		// 0x00C4(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     Velocity;                                         		// 0x00D0(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                               		// 0x00DC(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VehicleWheel");
		return ptr;
	}


	float GetSuspensionOffset();
	float GetSteerAngle();
	float GetRotationAngle();
	float GetLongitudinalSlip();
	float GetLateralSlip();
};


// Class Engine.WheeledVehicle
// 0x0010 (0x03F8 - 0x03E8)
class AWheeledVehicle : public APawn
{
public:
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x03E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UWheeledVehicleMovementComponent*            VehicleMovement;                                  		// 0x03F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WheeledVehicle");
		return ptr;
	}

};


// Class Engine.WheeledVehicleMovementComponent
// 0x0170 (0x02A8 - 0x0138)
class UWheeledVehicleMovementComponent : public UMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0138(0x0008) MISSED OFFSET
	unsigned char                                      bDeprecatedSpringOffsetMode : 1;                  		// 0x0140(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x7];                               		// 0x0141(0x0007) MISSED OFFSET
	TArray<unsigned char>                              TirePunctured;                                    		// 0x0148(0x0010) (CPF_Net, CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FWheelSetup>                         WheelSetups;                                      		// 0x0158(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	float                                              Mass;                                             		// 0x0168(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DragCoefficient;                                  		// 0x016C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ChassisWidth;                                     		// 0x0170(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ChassisHeight;                                    		// 0x0174(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bReverseAsBrake : 1;                              		// 0x0178(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0179(0x0003) MISSED OFFSET
	float                                              DragArea;                                         		// 0x017C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              EstimatedMaxEngineSpeed;                          		// 0x0180(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              MaxEngineRPM;                                     		// 0x0184(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DebugDragMagnitude;                               		// 0x0188(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     InertiaTensorScale;                               		// 0x018C(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinNormalizedTireLoad;                            		// 0x0198(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinNormalizedTireLoadFiltered;                    		// 0x019C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxNormalizedTireLoad;                            		// 0x01A0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxNormalizedTireLoadFiltered;                    		// 0x01A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ThresholdLongitudinalSpeed;                       		// 0x01A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LowForwardSpeedSubStepCount;                      		// 0x01AC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                HighForwardSpeedSubStepCount;                     		// 0x01B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                               		// 0x01B4(0x0004) MISSED OFFSET
	TArray<class UVehicleWheel*>                       Wheels;                                           		// 0x01B8(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	unsigned char                                      UnknownData04[0x18];                              		// 0x01C8(0x0018) MISSED OFFSET
	unsigned char                                      bUseRVOAvoidance : 1;                             		// 0x01E0(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData05[0x3];                               		// 0x01E1(0x0003) MISSED OFFSET
	float                                              RVOAvoidanceRadius;                               		// 0x01E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RVOAvoidanceHeight;                               		// 0x01E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AvoidanceConsiderationRadius;                     		// 0x01EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RVOSteeringStep;                                  		// 0x01F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RVOThrottleStep;                                  		// 0x01F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                AvoidanceUID;                                     		// 0x01F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	struct FNavAvoidanceMask                           AvoidanceGroup;                                   		// 0x01FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FNavAvoidanceMask                           GroupsToAvoid;                                    		// 0x0200(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FNavAvoidanceMask                           GroupsToIgnore;                                   		// 0x0204(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AvoidanceWeight;                                  		// 0x0208(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     PendingLaunchVelocity;                            		// 0x020C(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FReplicatedVehicleState                     ReplicatedState;                                  		// 0x0218(0x0014) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                               		// 0x022C(0x0004) MISSED OFFSET
	float                                              RawSteeringInput;                                 		// 0x0230(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              RawThrottleInput;                                 		// 0x0234(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              RawBrakeInput;                                    		// 0x0238(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bRawHandbrakeInput : 1;                           		// 0x023C(0x0001) (CPF_Transient)
	unsigned char                                      bRawGearUpInput : 1;                              		// 0x023C(0x0001) (CPF_Transient)
	unsigned char                                      bRawGearDownInput : 1;                            		// 0x023C(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData07[0x3];                               		// 0x023D(0x0003) MISSED OFFSET
	float                                              SteeringInput;                                    		// 0x0240(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              ThrottleInput;                                    		// 0x0244(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              BrakeInput;                                       		// 0x0248(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              HandbrakeInput;                                   		// 0x024C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              IdleBrakeInput;                                   		// 0x0250(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StopThreshold;                                    		// 0x0254(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WrongDirectionThreshold;                          		// 0x0258(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVehicleInputRate                           ThrottleInputRate;                                		// 0x025C(0x0008) (CPF_Edit)
	struct FVehicleInputRate                           BrakeInputRate;                                   		// 0x0264(0x0008) (CPF_Edit)
	struct FVehicleInputRate                           HandbrakeInputRate;                               		// 0x026C(0x0008) (CPF_Edit)
	struct FVehicleInputRate                           SteeringInputRate;                                		// 0x0274(0x0008) (CPF_Edit)
	unsigned char                                      bWasAvoidanceUpdated : 1;                         		// 0x027C(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData08[0x2B];                              		// 0x027D(0x002B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WheeledVehicleMovementComponent");
		return ptr;
	}


	void SetUseAutoGears(bool bUseAuto);
	void SetThrottleInput(float Throttle);
	void SetTargetGear(int GearNum, bool bImmediate);
	void SetSteeringInput(float Steering);
	void SetHandbrakeInput(bool bNewHandbrake);
	void SetGroupsToIgnoreMask(const struct FNavAvoidanceMask& GroupMask);
	void SetGroupsToIgnore(int GroupFlags);
	void SetGroupsToAvoidMask(const struct FNavAvoidanceMask& GroupMask);
	void SetGroupsToAvoid(int GroupFlags);
	void SetGearUp(bool bNewGearUp);
	void SetGearDown(bool bNewGearDown);
	void SetBrakeInput(float Brake);
	void SetAvoidanceGroupMask(const struct FNavAvoidanceMask& GroupMask);
	void SetAvoidanceGroup(int GroupFlags);
	void SetAvoidanceEnabled(bool bEnable);
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);
	void OnRep_TirePunctured(TArray<unsigned char> LastTirePunctured);
	bool GetUseAutoGears();
	int GetTargetGear();
	float GetForwardSpeed();
	float GetEngineRotationSpeed();
	float GetEngineMaxRotationSpeed();
	int GetCurrentGear();
};


// Class Engine.WheeledVehicleMovementComponent4W
// 0x0170 (0x0418 - 0x02A8)
class UWheeledVehicleMovementComponent4W : public UWheeledVehicleMovementComponent
{
public:
	struct FVehicleEngineData                          EngineSetup;                                      		// 0x02A8(0x0098) (CPF_Edit)
	struct FVehicleDifferential4WData                  DifferentialSetup;                                		// 0x0340(0x001C) (CPF_Edit)
	unsigned char                                      UnknownData00[0x4];                               		// 0x035C(0x0004) MISSED OFFSET
	struct FVehicleTransmissionData                    TransmissionSetup;                                		// 0x0360(0x0030) (CPF_Edit)
	struct FRuntimeFloatCurve                          SteeringCurve;                                    		// 0x0390(0x0080) (CPF_Edit)
	float                                              AckermannAccuracy;                                		// 0x0410(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WheeledVehicleMovementComponent4W");
		return ptr;
	}

};


// Class Engine.MaterialInterface
// 0x0048 (0x0070 - 0x0028)
class UMaterialInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET
	class USubsurfaceProfile*                          SubsurfaceProfile;                                		// 0x0030(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                               		// 0x0038(0x0008) MISSED OFFSET
	struct FLightmassMaterialInterfaceSettings         LightmassSettings;                                		// 0x0040(0x0014) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0054(0x0004) MISSED OFFSET
	TArray<struct FMaterialTextureInfo>                TextureStreamingData;                             		// 0x0058(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData03[0x8];                               		// 0x0068(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInterface");
		return ptr;
	}


	class UPhysicalMaterial* GetPhysicalMaterial();
	class UMaterial* GetBaseMaterial();
};


// Class Engine.MaterialInstance
// 0x0140 (0x01B0 - 0x0070)
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x0070(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInterface*                          Parent;                                           		// 0x0078(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHasStaticPermutationResource : 1;                		// 0x0080(0x0001)
	unsigned char                                      bOverrideSubsurfaceProfile : 1;                   		// 0x0080(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0081(0x0007) MISSED OFFSET
	TArray<struct FFontParameterValue>                 FontParameterValues;                              		// 0x0088(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                            		// 0x0098(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                           		// 0x00A8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                            		// 0x00B8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	unsigned char                                      bOverrideBaseProperties : 1;                      		// 0x00C8(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x00C9(0x0003) MISSED OFFSET
	struct FMaterialInstanceBasePropertyOverrides      BasePropertyOverrides;                            		// 0x00CC(0x0014) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData02[0xD0];                              		// 0x00E0(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstance");
		return ptr;
	}

};


// Class Engine.MaterialInstanceConstant
// 0x0000 (0x01B0 - 0x01B0)
class UMaterialInstanceConstant : public UMaterialInstance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstanceConstant");
		return ptr;
	}

};


// Class Engine.MaterialExpression
// 0x0038 (0x0060 - 0x0028)
class UMaterialExpression : public UObject
{
public:
	class UMaterial*                                   Material;                                         		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialFunction*                           Function;                                         		// 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     Desc;                                             		// 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FColor                                      BorderColor;                                      		// 0x0048(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRealtimePreview : 1;                             		// 0x004C(0x0001)
	unsigned char                                      bNeedToUpdatePreview : 1;                         		// 0x004C(0x0001) (CPF_Transient)
	unsigned char                                      bIsParameterExpression : 1;                       		// 0x004C(0x0001)
	unsigned char                                      bCommentBubbleVisible : 1;                        		// 0x004C(0x0001)
	unsigned char                                      bShowOutputNameOnPin : 1;                         		// 0x004C(0x0001)
	unsigned char                                      bHidePreviewWindow : 1;                           		// 0x004C(0x0001)
	unsigned char                                      bCollapsed : 1;                                   		// 0x004C(0x0001)
	unsigned char                                      bShaderInputData : 1;                             		// 0x004C(0x0001)
	unsigned char                                      bShowInputs : 1;                                  		// 0x004D(0x0001)
	unsigned char                                      bShowOutputs : 1;                                 		// 0x004D(0x0001)
	unsigned char                                      UnknownData00[0x2];                               		// 0x004E(0x0002) MISSED OFFSET
	TArray<struct FExpressionOutput>                   Outputs;                                          		// 0x0050(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpression");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCustomOutput
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionCustomOutput : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCustomOutput");
		return ptr;
	}

};


// Class Engine.BlueprintAsyncActionBase
// 0x0000 (0x0028 - 0x0028)
class UBlueprintAsyncActionBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlueprintAsyncActionBase");
		return ptr;
	}


	void Activate();
};


// Class Engine.BlueprintGeneratedClass
// 0x00D0 (0x02F8 - 0x0228)
class UBlueprintGeneratedClass : public UClass
{
public:
	int                                                NumReplicatedProperties;                          		// 0x0228(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x022C(0x0004) MISSED OFFSET
	TArray<class UDynamicBlueprintBinding*>            DynamicBindingObjects;                            		// 0x0230(0x0010) (CPF_ZeroConstructor)
	TArray<class UActorComponent*>                     ComponentTemplates;                               		// 0x0240(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	TArray<class UTimelineTemplate*>                   Timelines;                                        		// 0x0250(0x0010) (CPF_ZeroConstructor)
	class USimpleConstructionScript*                   SimpleConstructionScript;                         		// 0x0260(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UInheritableComponentHandler*                InheritableComponentHandler;                      		// 0x0268(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UStructProperty*                             UberGraphFramePointerProperty;                    		// 0x0270(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UFunction*                                   UberGraphFunction;                                		// 0x0278(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FEventGraphFastCallPair>             FastCallPairs;                                    		// 0x0280(0x0010) (CPF_ZeroConstructor, CPF_Deprecated)
	unsigned char                                      bHasInstrumentation : 1;                          		// 0x0290(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                               		// 0x0291(0x0007) MISSED OFFSET
	TMap<struct FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData;                    		// 0x0298(0x0050) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData02[0x10];                              		// 0x02E8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlueprintGeneratedClass");
		return ptr;
	}

};


// Class Engine.CameraActor
// 0x04F8 (0x0880 - 0x0388)
class ACameraActor : public AActor
{
public:
	TEnumAsByte<enum class EAutoReceiveInput>          AutoActivateForPlayer;                            		// 0x0388(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0389(0x0007) MISSED OFFSET
	class UCameraComponent*                            CameraComponent;                                  		// 0x0390(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USceneComponent*                             SceneComponent;                                   		// 0x0398(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                               		// 0x03A0(0x0008) MISSED OFFSET
	unsigned char                                      bConstrainAspectRatio : 1;                        		// 0x03A8(0x0001) (CPF_Deprecated)
	unsigned char                                      UnknownData02[0x3];                               		// 0x03A9(0x0003) MISSED OFFSET
	float                                              AspectRatio;                                      		// 0x03AC(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              FOVAngle;                                         		// 0x03B0(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              PostProcessBlendWeight;                           		// 0x03B4(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                               		// 0x03B8(0x0008) MISSED OFFSET
	struct FPostProcessSettings                        PostProcessSettings;                              		// 0x03C0(0x04C0) (CPF_Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraActor");
		return ptr;
	}


	int GetAutoActivatePlayerIndex();
};


// Class Engine.AISystemBase
// 0x0020 (0x0048 - 0x0028)
class UAISystemBase : public UObject
{
public:
	struct FStringClassReference                       AISystemClassName;                                		// 0x0028(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	struct FName                                       AISystemModuleName;                               		// 0x0038(0x0008) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear, CPF_IsPlainOldData)
	unsigned char                                      bInstantiateAISystemOnClient : 1;                 		// 0x0040(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AISystemBase");
		return ptr;
	}

};


// Class Engine.UserDefinedStruct
// 0x0010 (0x00A8 - 0x0098)
class UUserDefinedStruct : public UScriptStruct
{
public:
	struct FGuid                                       Guid;                                             		// 0x0098(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UserDefinedStruct");
		return ptr;
	}

};


// Class Engine.NavigationQueryFilter
// 0x0020 (0x0048 - 0x0028)
class UNavigationQueryFilter : public UObject
{
public:
	TArray<struct FNavigationFilterArea>               Areas;                                            		// 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FNavigationFilterFlags                      IncludeFlags;                                     		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FNavigationFilterFlags                      ExcludeFlags;                                     		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                               		// 0x0040(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationQueryFilter");
		return ptr;
	}

};


// Class Engine.OnlineBlueprintCallProxyBase
// 0x0000 (0x0028 - 0x0028)
class UOnlineBlueprintCallProxyBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineBlueprintCallProxyBase");
		return ptr;
	}


	void Activate();
};


// Class Engine.Model
// 0x0550 (0x0578 - 0x0028)
class UModel : public UObject
{
public:
	unsigned char                                      UnknownData00[0x550];                             		// 0x0028(0x0550) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Model");
		return ptr;
	}

};


// Class Engine.EngineBaseTypes
// 0x0000 (0x0028 - 0x0028)
class UEngineBaseTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EngineBaseTypes");
		return ptr;
	}

};


// Class Engine.EngineTypes
// 0x0000 (0x0028 - 0x0028)
class UEngineTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EngineTypes");
		return ptr;
	}

};


// Class Engine.EdGraphNode
// 0x0078 (0x00A0 - 0x0028)
class UEdGraphNode : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x0028(0x0010) MISSED OFFSET
	TArray<class UEdGraphPin_Deprecated*>              DeprecatedPins;                                   		// 0x0038(0x0010) (CPF_ZeroConstructor)
	int                                                NodePosX;                                         		// 0x0048(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NodePosY;                                         		// 0x004C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NodeWidth;                                        		// 0x0050(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NodeHeight;                                       		// 0x0054(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHasCompilerMessage : 1;                          		// 0x0058(0x0001)
	unsigned char                                      UnknownData01[0x7];                               		// 0x0059(0x0007) MISSED OFFSET
	struct FString                                     NodeComment;                                      		// 0x0060(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bCommentBubblePinned : 1;                         		// 0x0070(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCommentBubbleVisible : 1;                        		// 0x0071(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                               		// 0x0072(0x0002) MISSED OFFSET
	int                                                ErrorType;                                        		// 0x0074(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     ErrorMsg;                                         		// 0x0078(0x0010) (CPF_ZeroConstructor)
	struct FGuid                                       NodeGuid;                                         		// 0x0088(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ENodeAdvancedPins>          AdvancedPinDisplay;                               		// 0x0098(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ENodeEnabledState>          EnabledState;                                     		// 0x0099(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUserSetEnabledState : 1;                         		// 0x009A(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsNodeEnabled : 1;                               		// 0x009B(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EdGraphNode");
		return ptr;
	}

};


// Class Engine.EdGraphPin_Deprecated
// 0x0118 (0x0140 - 0x0028)
class UEdGraphPin_Deprecated : public UObject
{
public:
	struct FString                                     PinName;                                          		// 0x0028(0x0010) (CPF_ZeroConstructor)
	struct FString                                     PinToolTip;                                       		// 0x0038(0x0010) (CPF_ZeroConstructor)
	TEnumAsByte<enum class EEdGraphPinDirection>       Direction;                                        		// 0x0048(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0049(0x0007) MISSED OFFSET
	struct FEdGraphPinType                             PinType;                                          		// 0x0050(0x0080)
	struct FString                                     DefaultValue;                                     		// 0x00D0(0x0010) (CPF_ZeroConstructor)
	struct FString                                     AutogeneratedDefaultValue;                        		// 0x00E0(0x0010) (CPF_ZeroConstructor)
	class UObject*                                     DefaultObject;                                    		// 0x00F0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FText                                       DefaultTextValue;                                 		// 0x00F8(0x0018)
	TArray<class UEdGraphPin_Deprecated*>              LinkedTo;                                         		// 0x0110(0x0010) (CPF_ZeroConstructor)
	TArray<class UEdGraphPin_Deprecated*>              SubPins;                                          		// 0x0120(0x0010) (CPF_ZeroConstructor)
	class UEdGraphPin_Deprecated*                      ParentPin;                                        		// 0x0130(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UEdGraphPin_Deprecated*                      ReferencePassThroughConnection;                   		// 0x0138(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EdGraphPin_Deprecated");
		return ptr;
	}

};


// Class Engine.BlueprintCore
// 0x0028 (0x0050 - 0x0028)
class UBlueprintCore : public UObject
{
public:
	class UClass*                                      SkeletonGeneratedClass;                           		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UClass*                                      GeneratedClass;                                   		// 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLegacyNeedToPurgeSkelRefs : 1;                   		// 0x0038(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLegacyGeneratedClassIsAuthoritative : 1;         		// 0x0039(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                               		// 0x003A(0x0002) MISSED OFFSET
	struct FGuid                                       BlueprintGuid;                                    		// 0x003C(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlueprintCore");
		return ptr;
	}

};


// Class Engine.Blueprint
// 0x0140 (0x0190 - 0x0050)
class UBlueprint : public UBlueprintCore
{
public:
	unsigned char                                      bRecompileOnLoad : 1;                             		// 0x0050(0x0001) (CPF_Config)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0051(0x0007) MISSED OFFSET
	class UClass*                                      ParentClass;                                      		// 0x0058(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UObject*                                     PRIVATE_InnermostPreviousCDO;                     		// 0x0060(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bHasBeenRegenerated : 1;                          		// 0x0068(0x0001) (CPF_Transient)
	unsigned char                                      bIsRegeneratingOnLoad : 1;                        		// 0x0068(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData01[0x7];                               		// 0x0069(0x0007) MISSED OFFSET
	class USimpleConstructionScript*                   SimpleConstructionScript;                         		// 0x0070(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UActorComponent*>                     ComponentTemplates;                               		// 0x0078(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	TArray<class UTimelineTemplate*>                   Timelines;                                        		// 0x0088(0x0010) (CPF_ZeroConstructor)
	class UInheritableComponentHandler*                InheritableComponentHandler;                      		// 0x0098(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EBlueprintType>             BlueprintType;                                    		// 0x00A0(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                               		// 0x00A1(0x0003) MISSED OFFSET
	int                                                BlueprintSystemVersion;                           		// 0x00A4(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0xE8];                              		// 0x00A8(0x00E8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Blueprint");
		return ptr;
	}

};


// Class Engine.Interface_AssetUserData
// 0x0000 (0x0028 - 0x0028)
class UInterface_AssetUserData : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_AssetUserData");
		return ptr;
	}

};


// Class Engine.MapBuildDataRegistry
// 0x00F8 (0x0120 - 0x0028)
class UMapBuildDataRegistry : public UObject
{
public:
	TEnumAsByte<enum class ELightingBuildQuality>      LevelLightingQuality;                             		// 0x0028(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xF7];                              		// 0x0029(0x00F7) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MapBuildDataRegistry");
		return ptr;
	}

};


// Class Engine.Level
// 0x02E8 (0x0310 - 0x0028)
class ULevel : public UObject
{
public:
	unsigned char                                      UnknownData00[0x88];                              		// 0x0028(0x0088) MISSED OFFSET
	class UWorld*                                      OwningWorld;                                      		// 0x00B0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UModel*                                      Model;                                            		// 0x00B8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UModelComponent*>                     ModelComponents;                                  		// 0x00C0(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	int                                                NumTextureStreamingUnbuiltComponents;             		// 0x00D0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumTextureStreamingDirtyResources;                		// 0x00D4(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ALevelScriptActor*                           LevelScriptActor;                                 		// 0x00D8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ANavigationObjectBase*                       NavListStart;                                     		// 0x00E0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ANavigationObjectBase*                       NavListEnd;                                       		// 0x00E8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UNavigationDataChunk*>                NavDataChunks;                                    		// 0x00F0(0x0010) (CPF_ZeroConstructor)
	float                                              LightmapTotalSize;                                		// 0x0100(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	float                                              ShadowmapTotalSize;                               		// 0x0104(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	TArray<struct FVector>                             StaticNavigableGeometry;                          		// 0x0108(0x0010) (CPF_ZeroConstructor)
	TArray<struct FGuid>                               StreamingTextureGuids;                            		// 0x0118(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x90];                              		// 0x0128(0x0090) MISSED OFFSET
	unsigned char                                      bIsLightingScenario : 1;                          		// 0x01B8(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                               		// 0x01B9(0x0003) MISSED OFFSET
	struct FGuid                                       LevelBuildDataId;                                 		// 0x01BC(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                               		// 0x01CC(0x0004) MISSED OFFSET
	class UMapBuildDataRegistry*                       MapBuildData;                                     		// 0x01D0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FIntVector                                  LightBuildLevelOffset;                            		// 0x01D8(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bTextureStreamingRotationChanged : 1;             		// 0x01E4(0x0001)
	unsigned char                                      bIsVisible : 1;                                   		// 0x01E4(0x0001) (CPF_Transient)
	unsigned char                                      bLocked : 1;                                      		// 0x01E4(0x0001)
	unsigned char                                      UnknownData04[0xFB];                              		// 0x01E5(0x00FB) MISSED OFFSET
	class AWorldSettings*                              WorldSettings;                                    		// 0x02E0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                               		// 0x02E8(0x0008) MISSED OFFSET
	TArray<class UAssetUserData*>                      AssetUserData;                                    		// 0x02F0(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      UnknownData06[0x10];                              		// 0x0300(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Level");
		return ptr;
	}

};


// Class Engine.AmbientSound
// 0x0008 (0x0390 - 0x0388)
class AAmbientSound : public AActor
{
public:
	class UAudioComponent*                             AudioComponent;                                   		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSound");
		return ptr;
	}


	void Stop();
	void Play(float StartTime);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
};


// Class Engine.BrushShape
// 0x0000 (0x03C0 - 0x03C0)
class ABrushShape : public ABrush
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BrushShape");
		return ptr;
	}

};


// Class Engine.AudioVolume
// 0x0048 (0x0408 - 0x03C0)
class AAudioVolume : public AVolume
{
public:
	float                                              Priority;                                         		// 0x03C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                     		// 0x03C4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net)
	unsigned char                                      UnknownData00[0x3];                               		// 0x03C5(0x0003) MISSED OFFSET
	struct FReverbSettings                             Settings;                                         		// 0x03C8(0x0018) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	struct FInteriorSettings                           AmbientZoneSettings;                              		// 0x03E0(0x0024) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AudioVolume");
		return ptr;
	}


	void SetReverbSettings(const struct FReverbSettings& NewReverbSettings);
	void SetPriority(float NewPriority);
	void SetInteriorSettings(const struct FInteriorSettings& NewInteriorSettings);
	void SetEnabled(bool bNewEnabled);
	void OnRep_bEnabled();
};


// Class Engine.BlockingVolume
// 0x0000 (0x03C0 - 0x03C0)
class ABlockingVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlockingVolume");
		return ptr;
	}

};


// Class Engine.CameraBlockingVolume
// 0x0000 (0x03C0 - 0x03C0)
class ACameraBlockingVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraBlockingVolume");
		return ptr;
	}

};


// Class Engine.CullDistanceVolume
// 0x0028 (0x03E8 - 0x03C0)
class ACullDistanceVolume : public AVolume
{
public:
	TArray<struct FCullDistanceSizePair>               CullDistances;                                    		// 0x03C0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	unsigned char                                      bEnabled : 1;                                     		// 0x03D0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                               		// 0x03D1(0x0003) MISSED OFFSET
	float                                              CullDistanceForLODActor;                          		// 0x03D4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CullDistanceForLODActorTooFar;                    		// 0x03D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseActorBound : 1;                               		// 0x03DC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x03DD(0x0003) MISSED OFFSET
	float                                              IgnoreActorBoundSize;                             		// 0x03E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CullDistanceVolume");
		return ptr;
	}

};


// Class Engine.LevelStreamingVolume
// 0x0018 (0x03D8 - 0x03C0)
class ALevelStreamingVolume : public AVolume
{
public:
	TArray<struct FName>                               StreamingLevelNames;                              		// 0x03C0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst)
	unsigned char                                      bEditorPreVisOnly : 1;                            		// 0x03D0(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bDisabled : 1;                                    		// 0x03D0(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                               		// 0x03D1(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EStreamingVolumeUsage>      StreamingUsage;                                   		// 0x03D4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingVolume");
		return ptr;
	}

};


// Class Engine.LightmassCharacterIndirectDetailVolume
// 0x0000 (0x03C0 - 0x03C0)
class ALightmassCharacterIndirectDetailVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmassCharacterIndirectDetailVolume");
		return ptr;
	}

};


// Class Engine.LightmassImportanceVolume
// 0x0000 (0x03C0 - 0x03C0)
class ALightmassImportanceVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmassImportanceVolume");
		return ptr;
	}

};


// Class Engine.MeshMergeCullingVolume
// 0x0000 (0x03C0 - 0x03C0)
class AMeshMergeCullingVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshMergeCullingVolume");
		return ptr;
	}

};


// Class Engine.NavMeshBoundsVolume
// 0x0008 (0x03C8 - 0x03C0)
class ANavMeshBoundsVolume : public AVolume
{
public:
	struct FNavAgentSelector                           SupportedAgents;                                  		// 0x03C0(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshBoundsVolume");
		return ptr;
	}

};


// Class Engine.NavigationTypes
// 0x0000 (0x0028 - 0x0028)
class UNavigationTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationTypes");
		return ptr;
	}

};


// Class Engine.NavRelevantInterface
// 0x0000 (0x0028 - 0x0028)
class UNavRelevantInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavRelevantInterface");
		return ptr;
	}

};


// Class Engine.NavModifierVolume
// 0x0010 (0x03D0 - 0x03C0)
class ANavModifierVolume : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x03C0(0x0008) MISSED OFFSET
	class UClass*                                      AreaClass;                                        		// 0x03C8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavModifierVolume");
		return ptr;
	}


	void SetAreaClass(class UClass* NewAreaClass);
};


// Class Engine.DefaultPhysicsVolume
// 0x0000 (0x03D0 - 0x03D0)
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DefaultPhysicsVolume");
		return ptr;
	}

};


// Class Engine.KillZVolume
// 0x0000 (0x03D0 - 0x03D0)
class AKillZVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KillZVolume");
		return ptr;
	}

};


// Class Engine.PainCausingVolume
// 0x0028 (0x03F8 - 0x03D0)
class APainCausingVolume : public APhysicsVolume
{
public:
	unsigned char                                      bPainCausing : 1;                                 		// 0x03D0(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                               		// 0x03D1(0x0003) MISSED OFFSET
	float                                              DamagePerSec;                                     		// 0x03D4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      DamageType;                                       		// 0x03D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PainInterval;                                     		// 0x03E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEntryPain : 1;                                   		// 0x03E4(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      BACKUP_bPainCausing : 1;                          		// 0x03E4(0x0001)
	unsigned char                                      UnknownData01[0x3];                               		// 0x03E5(0x0003) MISSED OFFSET
	class AController*                                 DamageInstigator;                                 		// 0x03E8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                               		// 0x03F0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PainCausingVolume");
		return ptr;
	}

};


// Class Engine.BlendableInterface
// 0x0000 (0x0028 - 0x0028)
class UBlendableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlendableInterface");
		return ptr;
	}

};


// Class Engine.Scene
// 0x0000 (0x0028 - 0x0028)
class UScene : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Scene");
		return ptr;
	}

};


// Class Engine.Interface_PostProcessVolume
// 0x0000 (0x0028 - 0x0028)
class UInterface_PostProcessVolume : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_PostProcessVolume");
		return ptr;
	}

};


// Class Engine.PostProcessVolume
// 0x04E0 (0x08A0 - 0x03C0)
class APostProcessVolume : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x03C0(0x0010) MISSED OFFSET
	struct FPostProcessSettings                        Settings;                                         		// 0x03D0(0x04C0) (CPF_Edit, CPF_BlueprintVisible)
	float                                              Priority;                                         		// 0x0890(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BlendRadius;                                      		// 0x0894(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BlendWeight;                                      		// 0x0898(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                     		// 0x089C(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUnbound : 1;                                     		// 0x089C(0x0001) (CPF_Edit, CPF_BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PostProcessVolume");
		return ptr;
	}


	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.PrecomputedVisibilityOverrideVolume
// 0x0030 (0x03F0 - 0x03C0)
class APrecomputedVisibilityOverrideVolume : public AVolume
{
public:
	TArray<class AActor*>                              OverrideVisibleActors;                            		// 0x03C0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	TArray<class AActor*>                              OverrideInvisibleActors;                          		// 0x03D0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	TArray<struct FName>                               OverrideInvisibleLevels;                          		// 0x03E0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrecomputedVisibilityOverrideVolume");
		return ptr;
	}

};


// Class Engine.PrecomputedVisibilityVolume
// 0x0000 (0x03C0 - 0x03C0)
class APrecomputedVisibilityVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrecomputedVisibilityVolume");
		return ptr;
	}

};


// Class Engine.PreCullTrianglesVolume
// 0x0000 (0x03C0 - 0x03C0)
class APreCullTrianglesVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PreCullTrianglesVolume");
		return ptr;
	}

};


// Class Engine.TriggerVolume
// 0x0000 (0x03C0 - 0x03C0)
class ATriggerVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggerVolume");
		return ptr;
	}

};


// Class Engine.NavAgentInterface
// 0x0000 (0x0028 - 0x0028)
class UNavAgentInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavAgentInterface");
		return ptr;
	}

};


// Class Engine.CameraShake
// 0x0138 (0x0160 - 0x0028)
class UCameraShake : public UObject
{
public:
	unsigned char                                      bSingleInstance : 1;                              		// 0x0028(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0029(0x0003) MISSED OFFSET
	float                                              OscillationDuration;                              		// 0x002C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OscillationBlendInTime;                           		// 0x0030(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OscillationBlendOutTime;                          		// 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FROscillator                                RotOscillation;                                   		// 0x0038(0x0024) (CPF_Edit)
	struct FVOscillator                                LocOscillation;                                   		// 0x005C(0x0024) (CPF_Edit)
	struct FFOscillator                                FOVOscillation;                                   		// 0x0080(0x000C) (CPF_Edit)
	float                                              AnimPlayRate;                                     		// 0x008C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimScale;                                        		// 0x0090(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimBlendInTime;                                  		// 0x0094(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimBlendOutTime;                                 		// 0x0098(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RandomAnimSegmentDuration;                        		// 0x009C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCameraAnim*                                 Anim;                                             		// 0x00A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRandomAnimSegment : 1;                           		// 0x00A8(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x17];                              		// 0x00A9(0x0017) MISSED OFFSET
	class APlayerCameraManager*                        CameraOwner;                                      		// 0x00C0(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x80];                              		// 0x00C8(0x0080) MISSED OFFSET
	float                                              ShakeScale;                                       		// 0x0148(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              OscillatorTimeRemaining;                          		// 0x014C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UCameraAnimInst*                             AnimInst;                                         		// 0x0150(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                               		// 0x0158(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraShake");
		return ptr;
	}


	void ReceiveStopShake(bool bImmediately);
	void ReceivePlayShake(float Scale);
	bool ReceiveIsFinished();
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, const struct FMinimalViewInfo& POV, struct FMinimalViewInfo* ModifiedPOV);
};


// Class Engine.InputComponent
// 0x0078 (0x0168 - 0x00F0)
class UInputComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x78];                              		// 0x00F0(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputComponent");
		return ptr;
	}


	bool WasControllerKeyJustReleased(const struct FKey& Key);
	bool WasControllerKeyJustPressed(const struct FKey& Key);
	bool IsControllerKeyDown(const struct FKey& Key);
	void GetTouchState(int FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	struct FVector GetControllerVectorKeyState(const struct FKey& Key);
	void GetControllerMouseDelta(float* DeltaX, float* DeltaY);
	float GetControllerKeyTimeDown(const struct FKey& Key);
	void GetControllerAnalogStickState(TEnumAsByte<enum class EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float GetControllerAnalogKeyState(const struct FKey& Key);
};


// Class Engine.CurveBase
// 0x0008 (0x0030 - 0x0028)
class UCurveBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurveBase");
		return ptr;
	}


	void GetValueRange(float* MinValue, float* MaxValue);
	void GetTimeRange(float* MinTime, float* MaxTime);
};


// Class Engine.CurveFloat
// 0x0080 (0x00B0 - 0x0030)
class UCurveFloat : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurve;                                       		// 0x0030(0x0078)
	unsigned char                                      bIsEventCurve : 1;                                		// 0x00A8(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurveFloat");
		return ptr;
	}


	float GetFloatValue(float InTime);
};


// Class Engine.ForceFeedbackEffect
// 0x0018 (0x0040 - 0x0028)
class UForceFeedbackEffect : public UObject
{
public:
	TArray<struct FForceFeedbackChannelDetails>        ChannelDetails;                                   		// 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	float                                              Duration;                                         		// 0x0038(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFeedbackEffect");
		return ptr;
	}

};


// Class Engine.DebugCameraController
// 0x0048 (0x0700 - 0x06B8)
class ADebugCameraController : public APlayerController
{
public:
	unsigned char                                      bShowSelectedInfo : 1;                            		// 0x06B8(0x0001) (CPF_Config, CPF_GlobalConfig)
	unsigned char                                      bIsFrozenRendering : 1;                           		// 0x06B8(0x0001)
	unsigned char                                      UnknownData00[0x7];                               		// 0x06B9(0x0007) MISSED OFFSET
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x06C0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                              		// 0x06C8(0x0020) MISSED OFFSET
	float                                              SpeedScale;                                       		// 0x06E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              InitialMaxSpeed;                                  		// 0x06EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              InitialAccel;                                     		// 0x06F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              InitialDecel;                                     		// 0x06F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                               		// 0x06F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DebugCameraController");
		return ptr;
	}


	void ToggleDisplay();
	void ShowDebugSelectedInfo();
	void SetPawnMovementSpeedScale(float NewSpeedScale);
	void ReceiveOnDeactivate(class APlayerController* RestoredPC);
	void ReceiveOnActorSelected(class AActor* NewSelectedActor, const struct FVector& SelectHitLocation, const struct FVector& SelectHitNormal, const struct FHitResult& Hit);
	void ReceiveOnActivate(class APlayerController* OriginalPC);
	class AActor* GetSelectedActor();
};


// Class Engine.DecalActor
// 0x0008 (0x0390 - 0x0388)
class ADecalActor : public AActor
{
public:
	class UDecalComponent*                             Decal;                                            		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalActor");
		return ptr;
	}


	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	class UMaterialInterface* GetDecalMaterial();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
};


// Class Engine.DestructibleActor
// 0x0020 (0x03A8 - 0x0388)
class ADestructibleActor : public AActor
{
public:
	class UDestructibleComponent*                      DestructibleComponent;                            		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bAffectNavigation : 1;                            		// 0x0390(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_Config)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0391(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnActorFracture;                                  		// 0x0398(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DestructibleActor");
		return ptr;
	}

};


// Class Engine.DistanceFieldCapture
// 0x0008 (0x0390 - 0x0388)
class ADistanceFieldCapture : public AActor
{
public:
	class UDistanceFieldCaptureComponent*              CaptureComponent;                                 		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistanceFieldCapture");
		return ptr;
	}

};


// Class Engine.DocumentationActor
// 0x0008 (0x0390 - 0x0388)
class ADocumentationActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0388(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DocumentationActor");
		return ptr;
	}

};


// Class Engine.Emitter
// 0x0050 (0x03D8 - 0x0388)
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                          		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bDestroyOnSystemFinish : 1;                       		// 0x0390(0x0001)
	unsigned char                                      bPostUpdateTickGroup : 1;                         		// 0x0390(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bCurrentlyActive : 1;                             		// 0x0390(0x0001) (CPF_Net)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0391(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                  		// 0x0398(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                  		// 0x03A8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                  		// 0x03B8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                		// 0x03C8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Emitter");
		return ptr;
	}


	void ToggleActive();
	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	void OnRep_bCurrentlyActive();
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
	bool IsActive();
	void Deactivate();
	void Activate();
};


// Class Engine.EmitterCameraLensEffectBase
// 0x0068 (0x0440 - 0x03D8)
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	class UParticleSystem*                             PS_CameraEffect;                                  		// 0x03D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class UParticleSystem*                             PS_CameraEffectNonExtremeContent;                 		// 0x03E0(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	class APlayerCameraManager*                        BaseCamera;                                       		// 0x03E8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FTransform                                  RelativeTransform;                                		// 0x03F0(0x0030) (CPF_Edit, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              BaseFOV;                                          		// 0x0420(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bAllowMultipleInstances : 1;                      		// 0x0424(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0425(0x0003) MISSED OFFSET
	TArray<class UClass*>                              EmittersToTreatAsSame;                            		// 0x0428(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	float                                              DistFromCamera;                                   		// 0x0438(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EmitterCameraLensEffectBase");
		return ptr;
	}

};


// Class Engine.DebugCameraHUD
// 0x0000 (0x0470 - 0x0470)
class ADebugCameraHUD : public AHUD
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DebugCameraHUD");
		return ptr;
	}

};


// Class Engine.AtmosphericFog
// 0x0008 (0x0390 - 0x0388)
class AAtmosphericFog : public AInfo
{
public:
	class UAtmosphericFogComponent*                    AtmosphericFogComponent;                          		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AtmosphericFog");
		return ptr;
	}

};


// Class Engine.ExponentialHeightFog
// 0x0010 (0x0398 - 0x0388)
class AExponentialHeightFog : public AInfo
{
public:
	class UExponentialHeightFogComponent*              Component;                                        		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                     		// 0x0390(0x0001) (CPF_Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ExponentialHeightFog");
		return ptr;
	}


	void OnRep_bEnabled();
};


// Class Engine.GameNetworkManager
// 0x0078 (0x0400 - 0x0388)
class AGameNetworkManager : public AInfo
{
public:
	int                                                AdjustedNetSpeed;                                 		// 0x0388(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastNetSpeedUpdateTime;                           		// 0x038C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                TotalNetBandwidth;                                		// 0x0390(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	int                                                MinDynamicBandwidth;                              		// 0x0394(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	int                                                MaxDynamicBandwidth;                              		// 0x0398(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      bIsStandbyCheckingEnabled : 1;                    		// 0x039C(0x0001) (CPF_Config)
	unsigned char                                      bHasStandbyCheatTriggered : 1;                    		// 0x039C(0x0001)
	unsigned char                                      UnknownData00[0x3];                               		// 0x039D(0x0003) MISSED OFFSET
	float                                              StandbyRxCheatTime;                               		// 0x03A0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              StandbyTxCheatTime;                               		// 0x03A4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                BadPingThreshold;                                 		// 0x03A8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              PercentMissingForRxStandby;                       		// 0x03AC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              PercentMissingForTxStandby;                       		// 0x03B0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              PercentForBadPing;                                		// 0x03B4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              JoinInProgressStandbyWaitTime;                    		// 0x03B8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MoveRepSize;                                      		// 0x03BC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MAXPOSITIONERRORSQUARED;                          		// 0x03C0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MAXNEARZEROVELOCITYSQUARED;                       		// 0x03C4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              CLIENTADJUSTUPDATECOST;                           		// 0x03C8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MAXCLIENTUPDATEINTERVAL;                          		// 0x03CC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MaxMoveDeltaTime;                                 		// 0x03D0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      ClientAuthorativePosition : 1;                    		// 0x03D4(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x03D5(0x0003) MISSED OFFSET
	float                                              ClientErrorUpdateRateLimit;                       		// 0x03D8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      bMovementTimeDiscrepancyDetection : 1;            		// 0x03DC(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      bMovementTimeDiscrepancyResolution : 1;           		// 0x03DD(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                               		// 0x03DE(0x0002) MISSED OFFSET
	float                                              MovementTimeDiscrepancyMaxTimeMargin;             		// 0x03E0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MovementTimeDiscrepancyMinTimeMargin;             		// 0x03E4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MovementTimeDiscrepancyResolutionRate;            		// 0x03E8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MovementTimeDiscrepancyDriftAllowance;            		// 0x03EC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      bMovementTimeDiscrepancyForceCorrectionsDuringResolution : 1;		// 0x03F0(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      bUseDistanceBasedRelevancy : 1;                   		// 0x03F1(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0xE];                               		// 0x03F2(0x000E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameNetworkManager");
		return ptr;
	}

};


// Class Engine.SkyLight
// 0x0010 (0x0398 - 0x0388)
class ASkyLight : public AInfo
{
public:
	class USkyLightComponent*                          LightComponent;                                   		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                     		// 0x0390(0x0001) (CPF_Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkyLight");
		return ptr;
	}


	void OnRep_bEnabled();
};


// Class Engine.WindDirectionalSource
// 0x0008 (0x0390 - 0x0388)
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                        		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WindDirectionalSource");
		return ptr;
	}

};


// Class Engine.WorldSettings
// 0x01A8 (0x0530 - 0x0388)
class AWorldSettings : public AInfo
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0388(0x0008) MISSED OFFSET
	unsigned char                                      bEnableWorldBoundsChecks : 1;                     		// 0x0390(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bEnableNavigationSystem : 1;                      		// 0x0390(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Config)
	unsigned char                                      bEnableAISystem : 1;                              		// 0x0390(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Config)
	unsigned char                                      bEnableWorldComposition : 1;                      		// 0x0390(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUseClientSideLevelStreamingVolumes : 1;          		// 0x0390(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bEnableWorldOriginRebasing : 1;                   		// 0x0390(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bWorldGravitySet : 1;                             		// 0x0390(0x0001) (CPF_Transient)
	unsigned char                                      bGlobalGravitySet : 1;                            		// 0x0390(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0391(0x0003) MISSED OFFSET
	float                                              KillZ;                                            		// 0x0394(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      KillZDamageType;                                  		// 0x0398(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WorldGravityZ;                                    		// 0x03A0(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              GlobalGravityZ;                                   		// 0x03A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      DefaultPhysicsVolumeClass;                        		// 0x03A8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	class UClass*                                      PhysicsCollisionHandlerClass;                     		// 0x03B0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      DefaultGameMode;                                  		// 0x03B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      GameNetworkManagerClass;                          		// 0x03C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                PackedLightAndShadowMapTextureSize;               		// 0x03C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bMinimizeBSPSections : 1;                         		// 0x03CC(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData02[0x3];                               		// 0x03CD(0x0003) MISSED OFFSET
	struct FVector                                     DefaultColorScale;                                		// 0x03D0(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DefaultMaxDistanceFieldOcclusionDistance;         		// 0x03DC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              GlobalDistanceFieldViewDistance;                  		// 0x03E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPrecomputeVisibility : 1;                        		// 0x03E4(0x0001) (CPF_Edit)
	unsigned char                                      bPlaceCellsOnlyAlongCameraTracks : 1;             		// 0x03E4(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData03[0x3];                               		// 0x03E5(0x0003) MISSED OFFSET
	int                                                VisibilityCellSize;                               		// 0x03E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EVisibilityAggressiveness>  VisibilityAggressiveness;                         		// 0x03EC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                               		// 0x03ED(0x0003) MISSED OFFSET
	unsigned char                                      bForceNoPrecomputedLighting : 1;                  		// 0x03F0(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData05[0x3];                               		// 0x03F1(0x0003) MISSED OFFSET
	struct FLightmassWorldInfoSettings                 LightmassSettings;                                		// 0x03F4(0x0044) (CPF_Edit)
	struct FReverbSettings                             DefaultReverbSettings;                            		// 0x0438(0x0018) (CPF_Edit, CPF_Config)
	struct FInteriorSettings                           DefaultAmbientZoneSettings;                       		// 0x0450(0x0024) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData06[0x4];                               		// 0x0474(0x0004) MISSED OFFSET
	class USoundMix*                                   DefaultBaseSoundMix;                              		// 0x0478(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WorldToMeters;                                    		// 0x0480(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                               		// 0x0484(0x0004) MISSED OFFSET
	class UBookMark*                                   BookMarks[0xA];                                   		// 0x0488(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UExtendedReflectionSettings*                 ReflectionSettings;                               		// 0x04D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TimeDilation;                                     		// 0x04E0(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              MatineeTimeDilation;                              		// 0x04E4(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DemoPlayTimeDilation;                             		// 0x04E8(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              MinGlobalTimeDilation;                            		// 0x04EC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MaxGlobalTimeDilation;                            		// 0x04F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MinUndilatedFrameTime;                            		// 0x04F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MaxUndilatedFrameTime;                            		// 0x04F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                               		// 0x04FC(0x0004) MISSED OFFSET
	class APlayerState*                                Pauser;                                           		// 0x0500(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bHighPriorityLoading : 1;                         		// 0x0508(0x0001) (CPF_Net)
	unsigned char                                      bHighPriorityLoadingLocal : 1;                    		// 0x0508(0x0001)
	unsigned char                                      UnknownData09[0x7];                               		// 0x0509(0x0007) MISSED OFFSET
	TArray<struct FNetViewer>                          ReplicationViewers;                               		// 0x0510(0x0010) (CPF_ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                    		// 0x0520(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WorldSettings");
		return ptr;
	}


	void OnRep_WorldGravityZ();
};


// Class Engine.LevelBounds
// 0x0008 (0x0390 - 0x0388)
class ALevelBounds : public AActor
{
public:
	unsigned char                                      bAutoUpdateBounds : 1;                            		// 0x0388(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelBounds");
		return ptr;
	}

};


// Class Engine.LevelScriptActor
// 0x0008 (0x0390 - 0x0388)
class ALevelScriptActor : public AActor
{
public:
	unsigned char                                      bInputEnabled : 1;                                		// 0x0388(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelScriptActor");
		return ptr;
	}


	void WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	bool RemoteEvent(const struct FName& EventName);
	void LevelReset();
};


// Class Engine.LightComponentBase
// 0x0030 (0x0330 - 0x0300)
class ULightComponentBase : public USceneComponent
{
public:
	struct FGuid                                       LightGuid;                                        		// 0x0300(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Brightness;                                       		// 0x0310(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              Intensity;                                        		// 0x0314(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      LightColor;                                       		// 0x0318(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAffectsWorld : 1;                                		// 0x031C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      CastShadows : 1;                                  		// 0x031C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      CastStaticShadows : 1;                            		// 0x031C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      CastDynamicShadows : 1;                           		// 0x031C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bAffectTranslucentLighting : 1;                   		// 0x031C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                               		// 0x031D(0x0003) MISSED OFFSET
	float                                              IndirectLightingIntensity;                        		// 0x0320(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                               		// 0x0324(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightComponentBase");
		return ptr;
	}


	void SetCastShadows(bool bNewValue);
	struct FLinearColor GetLightColor();
};


// Class Engine.LightComponent
// 0x00F0 (0x0420 - 0x0330)
class ULightComponent : public ULightComponentBase
{
public:
	float                                              MaxDistanceFadeRange;                             		// 0x0330(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseTemperature : 1;                              		// 0x0334(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0335(0x0003) MISSED OFFSET
	int                                                ShadowMapChannel;                                 		// 0x0338(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                               		// 0x033C(0x0004) MISSED OFFSET
	float                                              MinRoughness;                                     		// 0x0340(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ShadowBias;                                       		// 0x0344(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ShadowSharpen;                                    		// 0x0348(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ContactShadowLength;                              		// 0x034C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      InverseSquaredFalloff : 1;                        		// 0x0350(0x0001) (CPF_Deprecated)
	unsigned char                                      CastTranslucentShadows : 1;                       		// 0x0350(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bCastShadowsFromCinematicObjectsOnly : 1;         		// 0x0350(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;               		// 0x0350(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0351(0x0003) MISSED OFFSET
	struct FLightingChannels                           LightingChannels;                                 		// 0x0354(0x0003) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData03[0x1];                               		// 0x0357(0x0001) MISSED OFFSET
	class UMaterialInterface*                          LightFunctionMaterial;                            		// 0x0358(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LightFunctionScale;                               		// 0x0360(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                               		// 0x036C(0x0004) MISSED OFFSET
	class UTextureLightProfile*                        IESTexture;                                       		// 0x0370(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseIESBrightness : 1;                            		// 0x0378(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData05[0x3];                               		// 0x0379(0x0003) MISSED OFFSET
	float                                              IESBrightnessScale;                               		// 0x037C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LightFunctionFadeDistance;                        		// 0x0380(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DisabledBrightness;                               		// 0x0384(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnableLightShaftBloom : 1;                       		// 0x0388(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData06[0x3];                               		// 0x0389(0x0003) MISSED OFFSET
	float                                              BloomScale;                                       		// 0x038C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BloomThreshold;                                   		// 0x0390(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      BloomTint;                                        		// 0x0394(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseRayTracedDistanceFieldShadows : 1;            		// 0x0398(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                               		// 0x0399(0x0003) MISSED OFFSET
	float                                              RayStartOffsetDepthScale;                         		// 0x039C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x80];                              		// 0x03A0(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightComponent");
		return ptr;
	}


	void SetTemperature(float NewTemperature);
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightFunctionDisabledBrightness(float NewValue);
	void SetLightColor(const struct FLinearColor& NewLightColor, bool bSRGB);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetIESTexture(class UTextureLightProfile* NewValue);
	void SetEnableLightShaftBloom(bool bNewValue);
	void SetBloomTint(const struct FColor& NewValue);
	void SetBloomThreshold(float NewValue);
	void SetBloomScale(float NewValue);
	void SetAffectTranslucentLighting(bool bNewValue);
	void SetAffectDynamicIndirectLighting(bool bNewValue);
};


// Class Engine.Light
// 0x0010 (0x0398 - 0x0388)
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                   		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                     		// 0x0390(0x0001) (CPF_Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Light");
		return ptr;
	}


	void ToggleEnabled();
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetEnabled(bool bSetEnabled);
	void SetCastShadows(bool bNewValue);
	void SetBrightness(float NewBrightness);
	void SetAffectTranslucentLighting(bool bNewValue);
	void OnRep_bEnabled();
	bool IsEnabled();
	struct FLinearColor GetLightColor();
	float GetBrightness();
};


// Class Engine.DirectionalLight
// 0x0000 (0x0398 - 0x0398)
class ADirectionalLight : public ALight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DirectionalLight");
		return ptr;
	}

};


// Class Engine.PointLight
// 0x0008 (0x03A0 - 0x0398)
class APointLight : public ALight
{
public:
	class UPointLightComponent*                        PointLightComponent;                              		// 0x0398(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PointLight");
		return ptr;
	}


	void SetRadius(float NewRadius);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
};


// Class Engine.SpotLight
// 0x0008 (0x03A0 - 0x0398)
class ASpotLight : public ALight
{
public:
	class USpotLightComponent*                         SpotLightComponent;                               		// 0x0398(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpotLight");
		return ptr;
	}


	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetInnerConeAngle(float NewInnerConeAngle);
};


// Class Engine.GeneratedMeshAreaLight
// 0x0000 (0x03A0 - 0x03A0)
class AGeneratedMeshAreaLight : public ASpotLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GeneratedMeshAreaLight");
		return ptr;
	}

};


// Class Engine.LightmassPortal
// 0x0008 (0x0390 - 0x0388)
class ALightmassPortal : public AActor
{
public:
	class ULightmassPortalComponent*                   PortalComponent;                                  		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmassPortal");
		return ptr;
	}

};


// Class Engine.LODActor
// 0x0038 (0x03C0 - 0x0388)
class ALODActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0388(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class AActor*>                              SubActors;                                        		// 0x0390(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst)
	float                                              LODDrawDistance;                                  		// 0x03A0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LODLevel;                                         		// 0x03A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	TArray<class UObject*>                             SubObjects;                                       		// 0x03A8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst)
	unsigned char                                      UnknownData00[0x8];                               		// 0x03B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LODActor");
		return ptr;
	}

};


// Class Engine.MaterialInstanceActor
// 0x0010 (0x0398 - 0x0388)
class AMaterialInstanceActor : public AActor
{
public:
	TArray<class AActor*>                              TargetActors;                                     		// 0x0388(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstanceActor");
		return ptr;
	}

};


// Class Engine.MatineeActor
// 0x00A8 (0x0430 - 0x0388)
class AMatineeActor : public AActor
{
public:
	class UInterpData*                                 MatineeData;                                      		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       MatineeControllerName;                            		// 0x0390(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PlayRate;                                         		// 0x0398(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPlayOnLevelLoad : 1;                             		// 0x039C(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bForceStartPos : 1;                               		// 0x039C(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                               		// 0x039D(0x0003) MISSED OFFSET
	float                                              ForceStartPosition;                               		// 0x03A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLooping : 1;                                     		// 0x03A4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_Net)
	unsigned char                                      bRewindOnPlay : 1;                                		// 0x03A4(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bNoResetOnRewind : 1;                             		// 0x03A4(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bRewindIfAlreadyPlaying : 1;                      		// 0x03A4(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bDisableRadioFilter : 1;                          		// 0x03A4(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bClientSideOnly : 1;                              		// 0x03A4(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bSkipUpdateIfNotVisible : 1;                      		// 0x03A4(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bIsSkippable : 1;                                 		// 0x03A4(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                               		// 0x03A5(0x0003) MISSED OFFSET
	int                                                PreferredSplitScreenNum;                          		// 0x03A8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDisableMovementInput : 1;                        		// 0x03AC(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bDisableLookAtInput : 1;                          		// 0x03AC(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bHidePlayer : 1;                                  		// 0x03AC(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bHideHud : 1;                                     		// 0x03AC(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                               		// 0x03AD(0x0003) MISSED OFFSET
	TArray<struct FInterpGroupActorInfo>               GroupActorInfos;                                  		// 0x03B0(0x0010) (CPF_Net, CPF_ZeroConstructor)
	unsigned char                                      bShouldShowGore : 1;                              		// 0x03C0(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData03[0x7];                               		// 0x03C1(0x0007) MISSED OFFSET
	TArray<class UInterpGroupInst*>                    GroupInst;                                        		// 0x03C8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FCameraCutInfo>                      CameraCuts;                                       		// 0x03D8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      bIsPlaying : 1;                                   		// 0x03E8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_Transient, CPF_EditConst)
	unsigned char                                      bReversePlayback : 1;                             		// 0x03E8(0x0001) (CPF_Net)
	unsigned char                                      bPaused : 1;                                      		// 0x03E8(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      bPendingStop : 1;                                 		// 0x03E8(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData04[0x3];                               		// 0x03E9(0x0003) MISSED OFFSET
	float                                              InterpPosition;                                   		// 0x03EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                               		// 0x03F0(0x0004) MISSED OFFSET
	unsigned char                                      ReplicationForceIsPlaying;                        		// 0x03F4(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                               		// 0x03F5(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlay;                                           		// 0x03F8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStop;                                           		// 0x0408(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPause;                                          		// 0x0418(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData07[0x8];                               		// 0x0428(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatineeActor");
		return ptr;
	}


	void Stop();
	void SetPosition(float NewPosition, bool bJump);
	void SetLoopingState(bool bNewLooping);
	void Reverse();
	void Play();
	void Pause();
	void EnableGroupByName(const struct FString& GroupName, bool bEnable);
	void ChangePlaybackDirection();
};


// Class Engine.MatineeActorCameraAnim
// 0x0008 (0x0438 - 0x0430)
class AMatineeActorCameraAnim : public AMatineeActor
{
public:
	class UCameraAnim*                                 CameraAnim;                                       		// 0x0430(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatineeActorCameraAnim");
		return ptr;
	}

};


// Class Engine.NavigationData
// 0x01A0 (0x0528 - 0x0388)
class ANavigationData : public AActor
{
public:
	class UPrimitiveComponent*                         RenderingComp;                                    		// 0x0388(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_DuplicateTransient, CPF_IsPlainOldData)
	struct FNavDataConfig                              NavDataConfig;                                    		// 0x0390(0x0050)
	unsigned char                                      bEnableDrawing : 1;                               		// 0x03E0(0x0001) (CPF_Edit, CPF_Transient)
	unsigned char                                      bForceRebuildOnLoad : 1;                          		// 0x03E0(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bCanBeMainNavData : 1;                            		// 0x03E0(0x0001) (CPF_Edit, CPF_Config, CPF_EditConst)
	unsigned char                                      bCanSpawnOnRebuild : 1;                           		// 0x03E0(0x0001) (CPF_Edit, CPF_Config, CPF_EditConst)
	unsigned char                                      bRebuildAtRuntime : 1;                            		// 0x03E0(0x0001) (CPF_Config, CPF_Deprecated)
	unsigned char                                      UnknownData00[0x3];                               		// 0x03E1(0x0003) MISSED OFFSET
	TEnumAsByte<enum class ERuntimeGenerationType>     RuntimeGeneration;                                		// 0x03E4(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x03E5(0x0003) MISSED OFFSET
	float                                              ObservedPathsTickInterval;                        		// 0x03E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	uint32_t                                           DataVersion;                                      		// 0x03EC(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0xD0];                              		// 0x03F0(0x00D0) MISSED OFFSET
	TArray<struct FSupportedAreaData>                  SupportedAreas;                                   		// 0x04C0(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData03[0x58];                              		// 0x04D0(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationData");
		return ptr;
	}

};


// Class Engine.AbstractNavData
// 0x0000 (0x0528 - 0x0528)
class AAbstractNavData : public ANavigationData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AbstractNavData");
		return ptr;
	}

};


// Class Engine.NavigationGraph
// 0x0000 (0x0528 - 0x0528)
class ANavigationGraph : public ANavigationData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationGraph");
		return ptr;
	}

};


// Class Engine.RecastNavMesh
// 0x0108 (0x0630 - 0x0528)
class ARecastNavMesh : public ANavigationData
{
public:
	unsigned char                                      bDrawTriangleEdges : 1;                           		// 0x0528(0x0001) (CPF_Edit)
	unsigned char                                      bDrawPolyEdges : 1;                               		// 0x0528(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bDrawFilledPolys : 1;                             		// 0x0528(0x0001) (CPF_Edit)
	unsigned char                                      bDrawNavMeshEdges : 1;                            		// 0x0528(0x0001) (CPF_Edit)
	unsigned char                                      bDrawTileBounds : 1;                              		// 0x0528(0x0001) (CPF_Edit)
	unsigned char                                      bDrawPathCollidingGeometry : 1;                   		// 0x0528(0x0001) (CPF_Edit)
	unsigned char                                      bDrawTileLabels : 1;                              		// 0x0528(0x0001) (CPF_Edit)
	unsigned char                                      bDrawPolygonLabels : 1;                           		// 0x0528(0x0001) (CPF_Edit)
	unsigned char                                      bDrawDefaultPolygonCost : 1;                      		// 0x0529(0x0001) (CPF_Edit)
	unsigned char                                      bDrawLabelsOnPathNodes : 1;                       		// 0x0529(0x0001) (CPF_Edit)
	unsigned char                                      bDrawNavLinks : 1;                                		// 0x0529(0x0001) (CPF_Edit)
	unsigned char                                      bDrawFailedNavLinks : 1;                          		// 0x0529(0x0001) (CPF_Edit)
	unsigned char                                      bDrawClusters : 1;                                		// 0x0529(0x0001) (CPF_Edit)
	unsigned char                                      bDrawOctree : 1;                                  		// 0x0529(0x0001) (CPF_Edit)
	unsigned char                                      bDistinctlyDrawTilesBeingBuilt : 1;               		// 0x0529(0x0001) (CPF_Config)
	unsigned char                                      bDrawNavMesh : 1;                                 		// 0x0529(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x2];                               		// 0x052A(0x0002) MISSED OFFSET
	float                                              DrawOffset;                                       		// 0x052C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bFixedTilePoolSize : 1;                           		// 0x0530(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0531(0x0003) MISSED OFFSET
	int                                                TilePoolSize;                                     		// 0x0534(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              TileSizeUU;                                       		// 0x0538(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CellSize;                                         		// 0x053C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CellHeight;                                       		// 0x0540(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AgentRadius;                                      		// 0x0544(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AgentHeight;                                      		// 0x0548(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AgentMaxHeight;                                   		// 0x054C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AgentMaxSlope;                                    		// 0x0550(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AgentMaxStepHeight;                               		// 0x0554(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MinRegionArea;                                    		// 0x0558(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MergeRegionSize;                                  		// 0x055C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MaxSimplificationError;                           		// 0x0560(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxSimultaneousTileGenerationJobsCount;           		// 0x0564(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                TileNumberHardLimit;                              		// 0x0568(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                PolyRefTileBits;                                  		// 0x056C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	int                                                PolyRefNavPolyBits;                               		// 0x0570(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	int                                                PolyRefSaltBits;                                  		// 0x0574(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	float                                              DefaultDrawDistance;                              		// 0x0578(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DefaultMaxSearchNodes;                            		// 0x057C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DefaultMaxHierarchicalSearchNodes;                		// 0x0580(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<enum class ERecastPartitioning>        RegionPartitioning;                               		// 0x0584(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<enum class ERecastPartitioning>        LayerPartitioning;                                		// 0x0585(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                               		// 0x0586(0x0002) MISSED OFFSET
	int                                                RegionChunkSplits;                                		// 0x0588(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                LayerChunkSplits;                                 		// 0x058C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bSortNavigationAreasByCost : 1;                   		// 0x0590(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bPerformVoxelFiltering : 1;                       		// 0x0590(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bMarkLowHeightAreas : 1;                          		// 0x0590(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bDoFullyAsyncNavDataGathering : 1;                		// 0x0590(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bUseBetterOffsetsFromCorners : 1;                 		// 0x0590(0x0001) (CPF_Config)
	unsigned char                                      bStoreEmptyTileLayers : 1;                        		// 0x0590(0x0001) (CPF_Config)
	unsigned char                                      bUseVirtualFilters : 1;                           		// 0x0590(0x0001) (CPF_Config)
	unsigned char                                      bUseVoxelCache : 1;                               		// 0x0590(0x0001) (CPF_Config)
	unsigned char                                      UnknownData03[0x3];                               		// 0x0591(0x0003) MISSED OFFSET
	float                                              TileSetUpdateInterval;                            		// 0x0594(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              HeuristicScale;                                   		// 0x0598(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              VerticalDeviationFromGroundCompensation;          		// 0x059C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x90];                              		// 0x05A0(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RecastNavMesh");
		return ptr;
	}

};


// Class Engine.NavigationGraphNode
// 0x0000 (0x0388 - 0x0388)
class ANavigationGraphNode : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationGraphNode");
		return ptr;
	}

};


// Class Engine.PlayerStartPIE
// 0x0000 (0x03B8 - 0x03B8)
class APlayerStartPIE : public APlayerStart
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerStartPIE");
		return ptr;
	}

};


// Class Engine.NavPathObserverInterface
// 0x0000 (0x0028 - 0x0028)
class UNavPathObserverInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavPathObserverInterface");
		return ptr;
	}

};


// Class Engine.NavigationTestingActor
// 0x0108 (0x0490 - 0x0388)
class ANavigationTestingActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x0388(0x0010) MISSED OFFSET
	class UCapsuleComponent*                           CapsuleComponent;                                 		// 0x0398(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UNavigationInvokerComponent*                 InvokerComponent;                                 		// 0x03A0(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bActAsNavigationInvoker : 1;                      		// 0x03A8(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x7];                               		// 0x03A9(0x0007) MISSED OFFSET
	struct FNavAgentProperties                         NavAgentProps;                                    		// 0x03B0(0x0020) (CPF_Edit)
	struct FVector                                     QueryingExtent;                                   		// 0x03D0(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                               		// 0x03DC(0x0004) MISSED OFFSET
	class ANavigationData*                             MyNavData;                                        		// 0x03E0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     ProjectedLocation;                                		// 0x03E8(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      bProjectedLocationValid : 1;                      		// 0x03F4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_EditConst)
	unsigned char                                      bSearchStart : 1;                                 		// 0x03F4(0x0001) (CPF_Edit)
	unsigned char                                      bUseHierarchicalPathfinding : 1;                  		// 0x03F4(0x0001) (CPF_Edit)
	unsigned char                                      bGatherDetailedInfo : 1;                          		// 0x03F4(0x0001) (CPF_Edit)
	unsigned char                                      bDrawDistanceToWall : 1;                          		// 0x03F4(0x0001) (CPF_Edit)
	unsigned char                                      bShowNodePool : 1;                                		// 0x03F4(0x0001) (CPF_Edit)
	unsigned char                                      bShowBestPath : 1;                                		// 0x03F4(0x0001) (CPF_Edit)
	unsigned char                                      bShowDiffWithPreviousStep : 1;                    		// 0x03F4(0x0001) (CPF_Edit)
	unsigned char                                      bShouldBeVisibleInGame : 1;                       		// 0x03F5(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData03[0x2];                               		// 0x03F6(0x0002) MISSED OFFSET
	TEnumAsByte<enum class ENavCostDisplay>            CostDisplayMode;                                  		// 0x03F8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                               		// 0x03F9(0x0003) MISSED OFFSET
	struct FVector2D                                   TextCanvasOffset;                                 		// 0x03FC(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPathExist : 1;                                   		// 0x0404(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Transient, CPF_EditConst)
	unsigned char                                      bPathIsPartial : 1;                               		// 0x0404(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Transient, CPF_EditConst)
	unsigned char                                      bPathSearchOutOfNodes : 1;                        		// 0x0404(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Transient, CPF_EditConst)
	unsigned char                                      UnknownData05[0x3];                               		// 0x0405(0x0003) MISSED OFFSET
	float                                              PathfindingTime;                                  		// 0x0408(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              PathCost;                                         		// 0x040C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	int                                                PathfindingSteps;                                 		// 0x0410(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                               		// 0x0414(0x0004) MISSED OFFSET
	class ANavigationTestingActor*                     OtherActor;                                       		// 0x0418(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      FilterClass;                                      		// 0x0420(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ShowStepIndex;                                    		// 0x0428(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_Transient, CPF_IsPlainOldData)
	float                                              OffsetFromCornersDistance;                        		// 0x042C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x60];                              		// 0x0430(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationTestingActor");
		return ptr;
	}

};


// Class Engine.NavArea
// 0x0018 (0x0040 - 0x0028)
class UNavArea : public UObject
{
public:
	float                                              DefaultCost;                                      		// 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              FixedAreaEnteringCost;                            		// 0x002C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FColor                                      DrawColor;                                        		// 0x0030(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FNavAgentSelector                           SupportedAgents;                                  		// 0x0034(0x0004) (CPF_Edit, CPF_Config)
	unsigned char                                      bSupportsAgent0 : 1;                              		// 0x0038(0x0001) (CPF_Config)
	unsigned char                                      bSupportsAgent1 : 1;                              		// 0x0038(0x0001) (CPF_Config)
	unsigned char                                      bSupportsAgent2 : 1;                              		// 0x0038(0x0001) (CPF_Config)
	unsigned char                                      bSupportsAgent3 : 1;                              		// 0x0038(0x0001) (CPF_Config)
	unsigned char                                      bSupportsAgent4 : 1;                              		// 0x0038(0x0001) (CPF_Config)
	unsigned char                                      bSupportsAgent5 : 1;                              		// 0x0038(0x0001) (CPF_Config)
	unsigned char                                      bSupportsAgent6 : 1;                              		// 0x0038(0x0001) (CPF_Config)
	unsigned char                                      bSupportsAgent7 : 1;                              		// 0x0038(0x0001) (CPF_Config)
	unsigned char                                      bSupportsAgent8 : 1;                              		// 0x0039(0x0001) (CPF_Config)
	unsigned char                                      bSupportsAgent9 : 1;                              		// 0x0039(0x0001) (CPF_Config)
	unsigned char                                      bSupportsAgent10 : 1;                             		// 0x0039(0x0001) (CPF_Config)
	unsigned char                                      bSupportsAgent11 : 1;                             		// 0x0039(0x0001) (CPF_Config)
	unsigned char                                      bSupportsAgent12 : 1;                             		// 0x0039(0x0001) (CPF_Config)
	unsigned char                                      bSupportsAgent13 : 1;                             		// 0x0039(0x0001) (CPF_Config)
	unsigned char                                      bSupportsAgent14 : 1;                             		// 0x0039(0x0001) (CPF_Config)
	unsigned char                                      bSupportsAgent15 : 1;                             		// 0x0039(0x0001) (CPF_Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavArea");
		return ptr;
	}

};


// Class Engine.NavLinkDefinition
// 0x0028 (0x0050 - 0x0028)
class UNavLinkDefinition : public UObject
{
public:
	TArray<struct FNavigationLink>                     Links;                                            		// 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FNavigationSegmentLink>              SegmentLinks;                                     		// 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                               		// 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavLinkDefinition");
		return ptr;
	}

};


// Class Engine.NavLinkHostInterface
// 0x0000 (0x0028 - 0x0028)
class UNavLinkHostInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavLinkHostInterface");
		return ptr;
	}

};


// Class Engine.NavLinkProxy
// 0x0050 (0x03D8 - 0x0388)
class ANavLinkProxy : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x0388(0x0010) MISSED OFFSET
	TArray<struct FNavigationLink>                     PointLinks;                                       		// 0x0398(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FNavigationSegmentLink>              SegmentLinks;                                     		// 0x03A8(0x0010) (CPF_ZeroConstructor)
	class UNavLinkCustomComponent*                     SmartLinkComp;                                    		// 0x03B8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bSmartLinkIsRelevant : 1;                         		// 0x03C0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                               		// 0x03C1(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSmartLinkReached;                               		// 0x03C8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavLinkProxy");
		return ptr;
	}


	void SetSmartLinkEnabled(bool bEnabled);
	void ResumePathFollowing(class AActor* Agent);
	void ReceiveSmartLinkReached(class AActor* Agent, const struct FVector& Destination);
	bool IsSmartLinkEnabled();
	bool HasMovingAgents();
};


// Class Engine.Note
// 0x0000 (0x0388 - 0x0388)
class ANote : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Note");
		return ptr;
	}

};


// Class Engine.ParticleEventManager
// 0x0000 (0x0388 - 0x0388)
class AParticleEventManager : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleEventManager");
		return ptr;
	}

};


// Class Engine.Skeleton
// 0x0358 (0x0380 - 0x0028)
class USkeleton : public UObject
{
public:
	TArray<struct FBoneNode>                           BoneTree;                                         		// 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst)
	TArray<struct FTransform>                          RefLocalPoses;                                    		// 0x0038(0x0010) (CPF_ZeroConstructor, CPF_Deprecated)
	unsigned char                                      UnknownData00[0x110];                             		// 0x0048(0x0110) MISSED OFFSET
	struct FGuid                                       VirtualBoneGuid;                                  		// 0x0158(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FVirtualBone>                        VirtualBones;                                     		// 0x0168(0x0010) (CPF_ZeroConstructor)
	TArray<struct FSkeletonToMeshLinkup>               LinkupCache;                                      		// 0x0178(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class USkeletalMeshSocket*>                 Sockets;                                          		// 0x0188(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x50];                              		// 0x0198(0x0050) MISSED OFFSET
	struct FSmartNameContainer                         SmartNames;                                       		// 0x01E8(0x0050)
	unsigned char                                      UnknownData02[0x18];                              		// 0x0238(0x0018) MISSED OFFSET
	TArray<class UBlendProfile*>                       BlendProfiles;                                    		// 0x0250(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	TArray<struct FAnimSlotGroup>                      SlotGroups;                                       		// 0x0260(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData03[0x110];                             		// 0x0270(0x0110) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Skeleton");
		return ptr;
	}

};


// Class Engine.Interface_CollisionDataProvider
// 0x0000 (0x0028 - 0x0028)
class UInterface_CollisionDataProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_CollisionDataProvider");
		return ptr;
	}

};


// Class Engine.SkeletalMesh
// 0x0298 (0x02C0 - 0x0028)
class USkeletalMesh : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                              		// 0x0028(0x0020) MISSED OFFSET
	class USkeleton*                                   Skeleton;                                         		// 0x0048(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	struct FBoxSphereBounds                            ImportedBounds;                                   		// 0x0050(0x001C) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient, CPF_IsPlainOldData)
	struct FBoxSphereBounds                            ExtendedBounds;                                   		// 0x006C(0x001C) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient, CPF_IsPlainOldData)
	struct FVector                                     PositiveBoundsExtension;                          		// 0x0088(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     NegativeBoundsExtension;                          		// 0x0094(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FSkeletalMaterial>                   Materials;                                        		// 0x00A0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	TArray<struct FBoneMirrorInfo>                     SkelMirrorTable;                                  		// 0x00B0(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	TEnumAsByte<enum class EAxis>                      SkelMirrorAxis;                                   		// 0x00C0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EAxis>                      SkelMirrorFlipAxis;                               		// 0x00C1(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                               		// 0x00C2(0x0006) MISSED OFFSET
	TArray<struct FSkeletalMeshLODInfo>                LODInfo;                                          		// 0x00C8(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	unsigned char                                      bUseFullPrecisionUVs : 1;                         		// 0x00D8(0x0001) (CPF_Edit)
	unsigned char                                      bHasBeenSimplified : 1;                           		// 0x00D8(0x0001)
	unsigned char                                      bHasVertexColors : 1;                             		// 0x00D8(0x0001)
	unsigned char                                      bEnablePerPolyCollision : 1;                      		// 0x00D8(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData02[0x7];                               		// 0x00D9(0x0007) MISSED OFFSET
	class UBodySetup*                                  BodySetup;                                        		// 0x00E0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x00E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UPhysicsAsset*                               ShadowPhysicsAsset;                               		// 0x00F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UMorphTarget*>                        MorphTargets;                                     		// 0x00F8(0x0010) (CPF_BlueprintVisible, CPF_ZeroConstructor)
	unsigned char                                      UnknownData03[0x168];                             		// 0x0108(0x0168) MISSED OFFSET
	TArray<struct FClothingAssetData>                  ClothingAssets;                                   		// 0x0270(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_EditFixedSize, CPF_ZeroConstructor)
	class UClass*                                      PostProcessAnimBlueprint;                         		// 0x0280(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UAssetUserData*>                      AssetUserData;                                    		// 0x0288(0x0010) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      UnknownData04[0x8];                               		// 0x0298(0x0008) MISSED OFFSET
	TArray<class USkeletalMeshSocket*>                 Sockets;                                          		// 0x02A0(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData05[0x10];                              		// 0x02B0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMesh");
		return ptr;
	}


	int NumSockets();
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);
	class USkeletalMeshSocket* GetSocketByIndex(int Index);
	struct FBoxSphereBounds GetImportedBounds();
	struct FBoxSphereBounds GetBounds();
	class USkeletalMeshSocket* FindSocketAndIndex(const struct FName& InSocketName, int* OutIndex);
	class USkeletalMeshSocket* FindSocket(const struct FName& InSocketName);
};


// Class Engine.AssetMappingTable
// 0x0010 (0x0038 - 0x0028)
class UAssetMappingTable : public UObject
{
public:
	TArray<struct FAssetMapping>                       MappedAssets;                                     		// 0x0028(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor, CPF_EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AssetMappingTable");
		return ptr;
	}

};


// Class Engine.AnimationAsset
// 0x0050 (0x0078 - 0x0028)
class UAnimationAsset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET
	class USkeleton*                                   Skeleton;                                         		// 0x0030(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                              		// 0x0038(0x0020) MISSED OFFSET
	TArray<class UAnimMetaData*>                       MetaData;                                         		// 0x0058(0x0010) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                    		// 0x0068(0x0010) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationAsset");
		return ptr;
	}

};


// Class Engine.ReflectionCapture
// 0x0008 (0x0390 - 0x0388)
class AReflectionCapture : public AActor
{
public:
	class UReflectionCaptureComponent*                 CaptureComponent;                                 		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReflectionCapture");
		return ptr;
	}

};


// Class Engine.BoxReflectionCapture
// 0x0000 (0x0390 - 0x0390)
class ABoxReflectionCapture : public AReflectionCapture
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BoxReflectionCapture");
		return ptr;
	}

};


// Class Engine.PlaneReflectionCapture
// 0x0000 (0x0390 - 0x0390)
class APlaneReflectionCapture : public AReflectionCapture
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlaneReflectionCapture");
		return ptr;
	}

};


// Class Engine.SphereReflectionCapture
// 0x0008 (0x0398 - 0x0390)
class ASphereReflectionCapture : public AReflectionCapture
{
public:
	class UDrawSphereComponent*                        DrawCaptureRadius;                                		// 0x0390(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SphereReflectionCapture");
		return ptr;
	}

};


// Class Engine.RigidBodyBase
// 0x0000 (0x0388 - 0x0388)
class ARigidBodyBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RigidBodyBase");
		return ptr;
	}

};


// Class Engine.PhysicsConstraintActor
// 0x0020 (0x03A8 - 0x0388)
class APhysicsConstraintActor : public ARigidBodyBase
{
public:
	class UPhysicsConstraintComponent*                 ConstraintComp;                                   		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class AActor*                                      ConstraintActor1;                                 		// 0x0390(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	class AActor*                                      ConstraintActor2;                                 		// 0x0398(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      bDisableCollision : 1;                            		// 0x03A0(0x0001) (CPF_Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsConstraintActor");
		return ptr;
	}

};


// Class Engine.PhysicsThruster
// 0x0008 (0x0390 - 0x0388)
class APhysicsThruster : public ARigidBodyBase
{
public:
	class UPhysicsThrusterComponent*                   ThrusterComponent;                                		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsThruster");
		return ptr;
	}

};


// Class Engine.RadialForceActor
// 0x0008 (0x0390 - 0x0388)
class ARadialForceActor : public ARigidBodyBase
{
public:
	class URadialForceComponent*                       ForceComponent;                                   		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RadialForceActor");
		return ptr;
	}


	void ToggleForce();
	void FireImpulse();
	void EnableForce();
	void DisableForce();
};


// Class Engine.SceneCapture
// 0x0008 (0x0390 - 0x0388)
class ASceneCapture : public AActor
{
public:
	class UStaticMeshComponent*                        MeshComp;                                         		// 0x0388(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapture");
		return ptr;
	}

};


// Class Engine.PlanarReflection
// 0x0010 (0x03A0 - 0x0390)
class APlanarReflection : public ASceneCapture
{
public:
	class UPlanarReflectionComponent*                  PlanarReflectionComponent;                        		// 0x0390(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bShowPreviewPlane : 1;                            		// 0x0398(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlanarReflection");
		return ptr;
	}


	void OnInterpToggle(bool bEnable);
};


// Class Engine.SceneCapture2D
// 0x0010 (0x03A0 - 0x0390)
class ASceneCapture2D : public ASceneCapture
{
public:
	class USceneCaptureComponent2D*                    CaptureComponent2D;                               		// 0x0390(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x0398(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapture2D");
		return ptr;
	}


	void OnInterpToggle(bool bEnable);
};


// Class Engine.SceneCaptureCube
// 0x0010 (0x03A0 - 0x0390)
class ASceneCaptureCube : public ASceneCapture
{
public:
	class USceneCaptureComponentCube*                  CaptureComponentCube;                             		// 0x0390(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x0398(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureCube");
		return ptr;
	}


	void OnInterpToggle(bool bEnable);
};


// Class Engine.SkeletalMeshComponent
// 0x0550 (0x0E10 - 0x08C0)
class USkeletalMeshComponent : public USkinnedMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x08C0(0x0008) MISSED OFFSET
	TEnumAsByte<enum class EAnimationMode>             AnimationMode;                                    		// 0x08C8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                               		// 0x08C9(0x0007) MISSED OFFSET
	class UAnimBlueprintGeneratedClass*                AnimBlueprintGeneratedClass;                      		// 0x08D0(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      AnimClass;                                        		// 0x08D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimInstance*                               AnimScriptInstance;                               		// 0x08E0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<class UAnimInstance*>                       SubInstances;                                     		// 0x08E8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class UAnimInstance*                               PostProcessAnimInstance;                          		// 0x08F8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FSingleAnimationPlayData                    AnimationData;                                    		// 0x0900(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData02[0x10];                              		// 0x0918(0x0010) MISSED OFFSET
	TArray<struct FTransform>                          CachedBoneSpaceTransforms;                        		// 0x0928(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FTransform>                          CachedComponentSpaceTransforms;                   		// 0x0938(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData03[0x20];                              		// 0x0948(0x0020) MISSED OFFSET
	float                                              GlobalAnimRateScale;                              		// 0x0968(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHasValidBodies : 1;                              		// 0x096C(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData04[0x3];                               		// 0x096D(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EKinematicBonesUpdateToPhysics> KinematicBonesUpdateType;                         		// 0x0970(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EPhysicsTransformUpdateMode> PhysicsTransformUpdateMode;                       		// 0x0971(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                               		// 0x0972(0x0002) MISSED OFFSET
	unsigned char                                      bBlendPhysics : 1;                                		// 0x0974(0x0001) (CPF_Transient)
	unsigned char                                      bEnablePhysicsOnDedicatedServer : 1;              		// 0x0974(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUpdateJointsFromAnimation : 1;                   		// 0x0974(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bDisableClothSimulation : 1;                      		// 0x0974(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bCollideWithEnvironment : 1;                      		// 0x0974(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bCollideWithAttachedChildren : 1;                 		// 0x0974(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bLocalSpaceSimulation : 1;                        		// 0x0974(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bClothMorphTarget : 1;                            		// 0x0974(0x0001) (CPF_Edit)
	unsigned char                                      bResetAfterTeleport : 1;                          		// 0x0975(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData06[0x2];                               		// 0x0976(0x0002) MISSED OFFSET
	float                                              TeleportDistanceThreshold;                        		// 0x0978(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TeleportRotationThreshold;                        		// 0x097C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ClothBlendWeight;                                 		// 0x0980(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                               		// 0x0984(0x0004) MISSED OFFSET
	struct FVector                                     RootBoneTranslation;                              		// 0x0988(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bNoSkeletonUpdate : 1;                            		// 0x0994(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bPauseAnims : 1;                                  		// 0x0994(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData08[0x3];                               		// 0x0995(0x0003) MISSED OFFSET
	unsigned char                                      bUseRefPoseOnInitAnim : 1;                        		// 0x0998(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                               		// 0x0999(0x0003) MISSED OFFSET
	unsigned char                                      bEnablePerPolyCollision : 1;                      		// 0x099C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData10[0x3];                               		// 0x099D(0x0003) MISSED OFFSET
	class UBodySetup*                                  BodySetup;                                        		// 0x09A0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bAutonomousTickPose : 1;                          		// 0x09A8(0x0001) (CPF_Transient)
	unsigned char                                      bForceRefpose : 1;                                		// 0x09A8(0x0001)
	unsigned char                                      bOldForceRefPose : 1;                             		// 0x09A8(0x0001)
	unsigned char                                      bShowPrePhysBones : 1;                            		// 0x09A8(0x0001)
	unsigned char                                      bRequiredBonesUpToDate : 1;                       		// 0x09A8(0x0001) (CPF_Transient)
	unsigned char                                      bAnimTreeInitialised : 1;                         		// 0x09A8(0x0001) (CPF_Transient)
	unsigned char                                      bIncludeComponentLocationIntoBounds : 1;          		// 0x09A8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bEnableLineCheckWithBounds : 1;                   		// 0x09A8(0x0001)
	unsigned char                                      UnknownData11[0x3];                               		// 0x09A9(0x0003) MISSED OFFSET
	uint16_t                                           CachedAnimCurveUidVersion;                        		// 0x09AC(0x0002) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x2];                               		// 0x09AE(0x0002) MISSED OFFSET
	struct FVector                                     LineCheckBoundsScale;                             		// 0x09B0(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                               		// 0x09BC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnConstraintBroken;                               		// 0x09C0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData14[0x3B0];                             		// 0x09D0(0x03B0) MISSED OFFSET
	class UAnimSequence*                               SequenceToPlay;                                   		// 0x0D80(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	class UAnimationAsset*                             AnimToPlay;                                       		// 0x0D88(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      bDefaultLooping : 1;                              		// 0x0D90(0x0001) (CPF_Deprecated)
	unsigned char                                      bDefaultPlaying : 1;                              		// 0x0D90(0x0001) (CPF_Deprecated)
	unsigned char                                      UnknownData15[0x3];                               		// 0x0D91(0x0003) MISSED OFFSET
	float                                              DefaultPosition;                                  		// 0x0D94(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              DefaultPlayRate;                                  		// 0x0D98(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              LastPoseTickTime;                                 		// 0x0D9C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData16[0x70];                              		// 0x0DA0(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshComponent");
		return ptr;
	}


	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);
	void Stop();
	void SetPosition(float InPos, bool bFireNotifies);
	void SetPlayRate(float Rate);
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName, bool bIncludeSelf);
	void SetMorphTarget(const struct FName& MorphTargetName, float Value, bool bRemoveZeroWeight);
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, const struct FName& BoneName, bool bIncludeSelf);
	void SetEnableBodyGravity(bool bEnableGravity, const struct FName& BoneName);
	void SetConstraintProfileForAll(const struct FName& ProfileName, bool bDefaultIfNotFound);
	void SetConstraintProfile(const struct FName& JointName, const struct FName& ProfileName, bool bDefaultIfNotFound);
	void SetClothMaxDistanceScale(float Scale);
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName);
	void SetAnimInstanceClass(class UClass* NewClass);
	void SetAnimationMode(TEnumAsByte<enum class EAnimationMode> InAnimationMode);
	void SetAnimation(class UAnimationAsset* NewAnimToPlay);
	void SetAngularLimits(const struct FName& InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void SetAllBodiesBelowSimulatePhysics(const struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf);
	void SetAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);
	void ResetClothTeleportMode();
	void ResetAllBodiesSimulatePhysics();
	void PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);
	void Play(bool bLooping);
	void OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);
	bool K2_GetClosestPointOnPhysicsAsset(const struct FVector& WorldPosition, struct FVector* ClosestWorldPosition, struct FVector* Normal, struct FName* BoneName, float* Distance);
	bool IsPlaying();
	bool IsBodyGravityEnabled(const struct FName& BoneName);
	struct FVector GetSkeletalCenterOfMass();
	class UAnimInstance* GetPostProcessInstance();
	float GetPosition();
	float GetPlayRate();
	float GetMorphTarget(const struct FName& MorphTargetName);
	void GetCurrentJointAngles(const struct FName& InBoneName, float* Swing1Angle, float* TwistAngle, float* Swing2Angle);
	float GetClothMaxDistanceScale();
	float GetBoneMass(const struct FName& BoneName, bool bScaleMass);
	class UAnimInstance* GetAnimInstance();
	TEnumAsByte<enum class EAnimationMode> GetAnimationMode();
	void ForceClothNextUpdateTeleportAndReset();
	void ForceClothNextUpdateTeleport();
	struct FName FindConstraintBoneName(int ConstraintIndex);
	void ClearMorphTargets();
	void BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, const struct FName& InBoneName);
	void BindClothToMasterPoseComponent();
	void AddImpulseToAllBodiesBelow(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange, bool bIncludeSelf);
	void AddForceToAllBodiesBelow(const struct FVector& Force, const struct FName& BoneName, bool bAccelChange, bool bIncludeSelf);
	void AccumulateAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);
};


// Class Engine.MatineeAnimInterface
// 0x0000 (0x0028 - 0x0028)
class UMatineeAnimInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatineeAnimInterface");
		return ptr;
	}

};


// Class Engine.SkeletalMeshActor
// 0x0088 (0x0410 - 0x0388)
class ASkeletalMeshActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0388(0x0008) MISSED OFFSET
	unsigned char                                      bShouldDoAnimNotifies : 1;                        		// 0x0390(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bWakeOnLevelStart : 1;                            		// 0x0390(0x0001) (CPF_Deprecated)
	unsigned char                                      UnknownData01[0x7];                               		// 0x0391(0x0007) MISSED OFFSET
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x0398(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USkeletalMesh*                               ReplicatedMesh;                                   		// 0x03A0(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UPhysicsAsset*                               ReplicatedPhysAsset;                              		// 0x03A8(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UMaterialInterface*                          ReplicatedMaterial0;                              		// 0x03B0(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInterface*                          ReplicatedMaterial1;                              		// 0x03B8(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x50];                              		// 0x03C0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshActor");
		return ptr;
	}


	void OnRep_ReplicatedPhysAsset();
	void OnRep_ReplicatedMesh();
	void OnRep_ReplicatedMaterial1();
	void OnRep_ReplicatedMaterial0();
};


// Class Engine.SplineMeshActor
// 0x0008 (0x0390 - 0x0388)
class ASplineMeshActor : public AActor
{
public:
	class USplineMeshComponent*                        SplineMeshComponent;                              		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineMeshActor");
		return ptr;
	}

};


// Class Engine.SubDSurfaceActor
// 0x0010 (0x0398 - 0x0388)
class ASubDSurfaceActor : public AActor
{
public:
	class USubDSurfaceComponent*                       SubDSurface;                                      		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UStaticMeshComponent*                        DisplayMeshComponent;                             		// 0x0390(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SubDSurfaceActor");
		return ptr;
	}

};


// Class Engine.TargetPoint
// 0x0000 (0x0388 - 0x0388)
class ATargetPoint : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TargetPoint");
		return ptr;
	}

};


// Class Engine.TextRenderActor
// 0x0008 (0x0390 - 0x0388)
class ATextRenderActor : public AActor
{
public:
	class UTextRenderComponent*                        TextRender;                                       		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextRenderActor");
		return ptr;
	}

};


// Class Engine.TriggerBase
// 0x0010 (0x0398 - 0x0388)
class ATriggerBase : public AActor
{
public:
	class UShapeComponent*                             CollisionComponent;                               		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UBillboardComponent*                         SpriteComponent;                                  		// 0x0390(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggerBase");
		return ptr;
	}

};


// Class Engine.TriggerBox
// 0x0000 (0x0398 - 0x0398)
class ATriggerBox : public ATriggerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggerBox");
		return ptr;
	}

};


// Class Engine.TriggerCapsule
// 0x0000 (0x0398 - 0x0398)
class ATriggerCapsule : public ATriggerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggerCapsule");
		return ptr;
	}

};


// Class Engine.TriggerSphere
// 0x0000 (0x0398 - 0x0398)
class ATriggerSphere : public ATriggerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggerSphere");
		return ptr;
	}

};


// Class Engine.VectorFieldVolume
// 0x0008 (0x0390 - 0x0388)
class AVectorFieldVolume : public AActor
{
public:
	class UVectorFieldComponent*                       VectorFieldComponent;                             		// 0x0388(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VectorFieldVolume");
		return ptr;
	}

};


// Class Engine.ApplicationLifecycleComponent
// 0x0050 (0x0140 - 0x00F0)
class UApplicationLifecycleComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    ApplicationWillDeactivateDelegate;                		// 0x00F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasReactivatedDelegate;                		// 0x0100(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillEnterBackgroundDelegate;           		// 0x0110(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasEnteredForegroundDelegate;          		// 0x0120(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillTerminateDelegate;                 		// 0x0130(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApplicationLifecycleComponent");
		return ptr;
	}


	void ApplicationLifetimeDelegate__DelegateSignature();
};


// Class Engine.SplineComponent
// 0x00E0 (0x0780 - 0x06A0)
class USplineComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x58];                              		// 0x06A0(0x0058) MISSED OFFSET
	struct FInterpCurveVector                          SplineInfo;                                       		// 0x06F8(0x0018) (CPF_ZeroConstructor, CPF_Deprecated)
	struct FInterpCurveQuat                            SplineRotInfo;                                    		// 0x0710(0x0018) (CPF_ZeroConstructor, CPF_Deprecated)
	struct FInterpCurveVector                          SplineScaleInfo;                                  		// 0x0728(0x0018) (CPF_ZeroConstructor, CPF_Deprecated)
	struct FInterpCurveFloat                           SplineReparamTable;                               		// 0x0740(0x0018) (CPF_ZeroConstructor, CPF_Deprecated)
	unsigned char                                      bAllowSplineEditingPerInstance : 1;               		// 0x0758(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0759(0x0003) MISSED OFFSET
	int                                                ReparamStepsPerSegment;                           		// 0x075C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Duration;                                         		// 0x0760(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bStationaryEndpoints : 1;                         		// 0x0764(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bSplineHasBeenEdited : 1;                         		// 0x0765(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bModifiedByConstructionScript : 1;                		// 0x0766(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bInputSplinePointsToConstructionScript : 1;       		// 0x0767(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDrawDebug : 1;                                   		// 0x0768(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bClosedLoop : 1;                                  		// 0x0769(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLoopPositionOverride : 1;                        		// 0x076A(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                               		// 0x076B(0x0001) MISSED OFFSET
	float                                              LoopPosition;                                     		// 0x076C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     DefaultUpVector;                                  		// 0x0770(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineComponent");
		return ptr;
	}


	void UpdateSpline();
	void SetWorldLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation);
	void SetUpVectorAtSplinePoint(int PointIndex, const struct FVector& InUpVector, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetUnselectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void SetTangentsAtSplinePoint(int PointIndex, const struct FVector& InArriveTangent, const struct FVector& InLeaveTangent, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetTangentAtSplinePoint(int PointIndex, const struct FVector& InTangent, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetSplineWorldPoints(TArray<struct FVector> Points);
	void SetSplinePointType(int PointIndex, TEnumAsByte<enum class ESplinePointType> Type, bool bUpdateSpline);
	void SetSplinePoints(TArray<struct FVector> Points, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetSplineLocalPoints(TArray<struct FVector> Points);
	void SetSelectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void SetLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetDrawDebug(bool bShow);
	void SetDefaultUpVector(const struct FVector& UpVector, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);
	void RemoveSplinePoint(int Index, bool bUpdateSpline);
	bool IsClosedLoop();
	struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance);
	struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);
	struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetWorldLocationAtSplinePoint(int PointIndex);
	struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance);
	struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);
	struct FVector GetUpVectorAtTime(float Time, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetUpVectorAtSplinePoint(int PointIndex, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	struct FTransform GetTransformAtTime(float Time, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);
	struct FTransform GetTransformAtSplinePoint(int PointIndex, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FTransform GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FVector GetTangentAtTime(float Time, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetTangentAtSplinePoint(int PointIndex, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	TEnumAsByte<enum class ESplinePointType> GetSplinePointType(int PointIndex);
	float GetSplineLength();
	struct FVector GetScaleAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetScaleAtSplinePoint(int PointIndex);
	struct FVector GetScaleAtDistanceAlongSpline(float Distance);
	struct FRotator GetRotationAtTime(float Time, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FRotator GetRotationAtSplinePoint(int PointIndex, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	struct FRotator GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	float GetRollAtTime(float Time, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	float GetRollAtSplinePoint(int PointIndex, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	float GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetRightVectorAtTime(float Time, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetRightVectorAtSplinePoint(int PointIndex, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	int GetNumberOfSplinePoints();
	struct FVector GetLocationAtTime(float Time, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetLocationAtSplinePoint(int PointIndex, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	void GetLocationAndTangentAtSplinePoint(int PointIndex, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, struct FVector* Location, struct FVector* Tangent);
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* LocalLocation, struct FVector* LocalTangent);
	struct FVector GetLeaveTangentAtSplinePoint(int PointIndex, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	float GetInputKeyAtDistanceAlongSpline(float Distance);
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);
	struct FVector GetDirectionAtTime(float Time, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetDirectionAtSplinePoint(int PointIndex, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetDefaultUpVector(TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetArriveTangentAtSplinePoint(int PointIndex, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	struct FVector FindUpVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	struct FTransform FindTransformClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FVector FindTangentClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	struct FVector FindScaleClosestToWorldLocation(const struct FVector& WorldLocation);
	struct FRotator FindRotationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	float FindRollClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	struct FVector FindRightVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	struct FVector FindLocationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	float FindInputKeyClosestToWorldLocation(const struct FVector& WorldLocation);
	struct FVector FindDirectionClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace);
	void ClearSplinePoints(bool bUpdateSpline);
	void AddSplineWorldPoint(const struct FVector& Position);
	void AddSplinePointAtIndex(const struct FVector& Position, int Index, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void AddSplinePoint(const struct FVector& Position, TEnumAsByte<enum class ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void AddSplineLocalPoint(const struct FVector& Position);
	void AddPoints(TArray<struct FSplinePoint> Points, bool bUpdateSpline);
	void AddPoint(const struct FSplinePoint& Point, bool bUpdateSpline);
};


// Class Engine.InterpToMovementComponent
// 0x00A0 (0x01D8 - 0x0138)
class UInterpToMovementComponent : public UMovementComponent
{
public:
	float                                              Duration;                                         		// 0x0138(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPauseOnImpact : 1;                               		// 0x013C(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                               		// 0x013D(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EInterpToBehaviourType>     BehaviourType;                                    		// 0x0140(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0141(0x0003) MISSED OFFSET
	unsigned char                                      bForceSubStepping : 1;                            		// 0x0144(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0145(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInterpToReverse;                                		// 0x0148(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInterpToStop;                                   		// 0x0158(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWaitBeginDelegate;                              		// 0x0168(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWaitEndDelegate;                                		// 0x0178(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnResetDelegate;                                  		// 0x0188(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	float                                              MaxSimulationTimeStep;                            		// 0x0198(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxSimulationIterations;                          		// 0x019C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FInterpControlPoint>                 ControlPoints;                                    		// 0x01A0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	unsigned char                                      UnknownData03[0x28];                              		// 0x01B0(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpToMovementComponent");
		return ptr;
	}


	void StopSimulating(const struct FHitResult& HitResult);
	void RestartMovement(float InitialDirection);
	void OnInterpToWaitEndDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToWaitBeginDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToReverseDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToResetDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void FinaliseControlPoints();
};


// Class Engine.World
// 0x0978 (0x09A0 - 0x0028)
class UWorld : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET
	class ULevel*                                      PersistentLevel;                                  		// 0x0030(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UNetDriver*                                  NetDriver;                                        		// 0x0038(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ULineBatchComponent*                         LineBatcher;                                      		// 0x0040(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class ULineBatchComponent*                         PersistentLineBatcher;                            		// 0x0048(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class ULineBatchComponent*                         ForegroundLineBatcher;                            		// 0x0050(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class AGameNetworkManager*                         NetworkManager;                                   		// 0x0058(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UPhysicsCollisionHandler*                    PhysicsCollisionHandler;                          		// 0x0060(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<class UObject*>                             ExtraReferencedObjects;                           		// 0x0068(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class UObject*>                             PerModuleDataObjects;                             		// 0x0078(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class ULevelStreaming*>                     StreamingLevels;                                  		// 0x0088(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FString                                     StreamingLevelsPrefix;                            		// 0x0098(0x0010) (CPF_ZeroConstructor)
	class ULevel*                                      CurrentLevelPendingVisibility;                    		// 0x00A8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ULevel*                                      CurrentLevelPendingInvisibility;                  		// 0x00B0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UDemoNetDriver*                              DemoNetDriver;                                    		// 0x00B8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class AParticleEventManager*                       MyParticleEventManager;                           		// 0x00C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class APhysicsVolume*                              DefaultPhysicsVolume;                             		// 0x00C8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                              		// 0x00D0(0x0018) MISSED OFFSET
	class UNavigationSystem*                           NavigationSystem;                                 		// 0x00E8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class AGameModeBase*                               AuthorityGameMode;                                		// 0x00F0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class AGameStateBase*                              GameState;                                        		// 0x00F8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UAISystemBase*                               AISystem;                                         		// 0x0100(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UAvoidanceManager*                           AvoidanceManager;                                 		// 0x0108(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<class ULevel*>                              Levels;                                           		// 0x0110(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FLevelCollection>                    LevelCollections;                                 		// 0x0120(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData02[0x8];                               		// 0x0130(0x0008) MISSED OFFSET
	class ULevel*                                      CurrentLevel;                                     		// 0x0138(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UGameInstance*                               OwningGameInstance;                               		// 0x0140(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<class UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                     		// 0x0148(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class UCanvas*                                     CanvasForRenderingToTarget;                       		// 0x0158(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UCanvas*                                     CanvasForDrawMaterialToRenderTarget;              		// 0x0160(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x7D0];                             		// 0x0168(0x07D0) MISSED OFFSET
	class UWorldComposition*                           WorldComposition;                                 		// 0x0938(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x4A];                              		// 0x0940(0x004A) MISSED OFFSET
	unsigned char                                      bAreConstraintsDirty : 1;                         		// 0x098A(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData05[0x15];                              		// 0x098B(0x0015) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.World");
		return ptr;
	}

};


// Class Engine.NavigationSystem
// 0x0438 (0x0460 - 0x0028)
class UNavigationSystem : public UBlueprintFunctionLibrary
{
public:
	class ANavigationData*                             MainNavData;                                      		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ANavigationData*                             AbstractNavData;                                  		// 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAutoCreateNavigationData : 1;                    		// 0x0038(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bAllowClientSideNavigation : 1;                   		// 0x0038(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bSupportRebuilding : 1;                           		// 0x0038(0x0001)
	unsigned char                                      bInitialBuildingLocked : 1;                       		// 0x0038(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bSkipAgentHeightCheckWhenPickingNavData : 1;      		// 0x0038(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0039(0x0003) MISSED OFFSET
	TEnumAsByte<enum class ENavDataGatheringModeConfig> DataGatheringMode;                                		// 0x003C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x003D(0x0003) MISSED OFFSET
	unsigned char                                      bGenerateNavigationOnlyAroundNavigationInvokers : 1;		// 0x0040(0x0001) (CPF_Edit, CPF_Config, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0041(0x0003) MISSED OFFSET
	float                                              ActiveTilesUpdateInterval;                        		// 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TArray<struct FNavDataConfig>                      SupportedAgents;                                  		// 0x0048(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	float                                              DirtyAreasUpdateFreq;                             		// 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                               		// 0x005C(0x0004) MISSED OFFSET
	TArray<class ANavigationData*>                     NavDataSet;                                       		// 0x0060(0x0010) (CPF_ZeroConstructor)
	TArray<class ANavigationData*>                     NavDataRegistrationQueue;                         		// 0x0070(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData04[0x60];                              		// 0x0080(0x0060) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnNavDataRegisteredEvent;                         		// 0x00E0(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference)
	struct FScriptMulticastDelegate                    OnNavigationGenerationFinishedDelegate;           		// 0x00F0(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData05[0x124];                             		// 0x0100(0x0124) MISSED OFFSET
	TEnumAsByte<enum class FNavigationSystemRunMode>   OperationMode;                                    		// 0x0224(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x23B];                             		// 0x0225(0x023B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationSystem");
		return ptr;
	}


	void UnregisterNavigationInvoker(class AActor* Invoker);
	void STATIC_SimpleMoveToLocation(class AController* Controller, const struct FVector& Goal);
	void STATIC_SimpleMoveToActor(class AController* Controller, class AActor* Goal);
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);
	void SetGeometryGatheringMode(TEnumAsByte<enum class ENavDataGatheringModeConfig> NewMode);
	void ResetMaxSimultaneousTileGenerationJobsCount();
	void RegisterNavigationInvoker(class AActor* Invoker, float TileGenerationRadius, float TileRemovalRadius);
	struct FVector STATIC_ProjectPointToNavigation(class UObject* WorldContext, const struct FVector& Point, class ANavigationData* NavData, class UClass* FilterClass, const struct FVector& QueryExtent);
	void OnNavigationBoundsUpdated(class ANavMeshBoundsVolume* NavVolume);
	bool STATIC_NavigationRaycast(class UObject* WorldContext, const struct FVector& RayStart, const struct FVector& RayEnd, class UClass* FilterClass, class AController* Querier, struct FVector* HitLocation);
	bool STATIC_IsNavigationBeingBuiltOrLocked(class UObject* WorldContext);
	bool STATIC_IsNavigationBeingBuilt(class UObject* WorldContext);
	struct FVector STATIC_GetRandomReachablePointInRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass);
	struct FVector STATIC_GetRandomPointInNavigableRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass);
	TEnumAsByte<enum class ENavigationQueryResult> STATIC_GetPathLength(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class ANavigationData* NavData, class UClass* FilterClass, float* PathLength);
	TEnumAsByte<enum class ENavigationQueryResult> STATIC_GetPathCost(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class ANavigationData* NavData, class UClass* FilterClass, float* PathCost);
	class UNavigationSystem* STATIC_GetNavigationSystem(class UObject* WorldContext);
	class UNavigationPath* STATIC_FindPathToLocationSynchronously(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class AActor* PathfindingContext, class UClass* FilterClass);
	class UNavigationPath* STATIC_FindPathToActorSynchronously(class UObject* WorldContext, const struct FVector& PathStart, class AActor* GoalActor, float TetherDistance, class AActor* PathfindingContext, class UClass* FilterClass);
};


// Class Engine.RVOAvoidanceInterface
// 0x0000 (0x0028 - 0x0028)
class URVOAvoidanceInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RVOAvoidanceInterface");
		return ptr;
	}

};


// Class Engine.NetworkPredictionInterface
// 0x0000 (0x0028 - 0x0028)
class UNetworkPredictionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetworkPredictionInterface");
		return ptr;
	}

};


// Class Engine.ProjectileMovementComponent
// 0x0068 (0x01A0 - 0x0138)
class UProjectileMovementComponent : public UMovementComponent
{
public:
	float                                              InitialSpeed;                                     		// 0x0138(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxSpeed;                                         		// 0x013C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRotationFollowsVelocity : 1;                     		// 0x0140(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bShouldBounce : 1;                                		// 0x0140(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bInitialVelocityInLocalSpace : 1;                 		// 0x0140(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bForceSubStepping : 1;                            		// 0x0140(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bIsHomingProjectile : 1;                          		// 0x0140(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bBounceAngleAffectsFriction : 1;                  		// 0x0140(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bIsSliding : 1;                                   		// 0x0140(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnTemplate, CPF_EditConst)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0141(0x0003) MISSED OFFSET
	float                                              PreviousHitTime;                                  		// 0x0144(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	struct FVector                                     PreviousHitNormal;                                		// 0x0148(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	float                                              ProjectileGravityScale;                           		// 0x0154(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Buoyancy;                                         		// 0x0158(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Bounciness;                                       		// 0x015C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Friction;                                         		// 0x0160(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BounceVelocityStopSimulatingThreshold;            		// 0x0164(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnProjectileBounce;                               		// 0x0168(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnProjectileStop;                                 		// 0x0178(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	float                                              HomingAccelerationMagnitude;                      		// 0x0188(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TWeakObjectPtr<class USceneComponent>              HomingTargetComponent;                            		// 0x018C(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              MaxSimulationTimeStep;                            		// 0x0194(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxSimulationIterations;                          		// 0x0198(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ProjectileMovementComponent");
		return ptr;
	}


	void StopSimulating(const struct FHitResult& HitResult);
	void SetVelocityInLocalSpace(const struct FVector& NewVelocity);
	void OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult);
	void OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	struct FVector LimitVelocity(const struct FVector& NewVelocity);
};


// Class Engine.RotatingMovementComponent
// 0x0020 (0x0158 - 0x0138)
class URotatingMovementComponent : public UMovementComponent
{
public:
	struct FRotator                                    RotationRate;                                     		// 0x0138(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     PivotTranslation;                                 		// 0x0144(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRotationInLocalSpace : 1;                        		// 0x0150(0x0001) (CPF_Edit, CPF_BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RotatingMovementComponent");
		return ptr;
	}

};


// Class Engine.SimpleWheeledVehicleMovementComponent
// 0x0000 (0x02A8 - 0x02A8)
class USimpleWheeledVehicleMovementComponent : public UWheeledVehicleMovementComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SimpleWheeledVehicleMovementComponent");
		return ptr;
	}


	void SetSteerAngle(float SteerAngle, int WheelIndex);
	void SetDriveTorque(float DriveTorque, int WheelIndex);
	void SetBrakeTorque(float BrakeTorque, int WheelIndex);
};


// Class Engine.NavigationInvokerComponent
// 0x0008 (0x00F8 - 0x00F0)
class UNavigationInvokerComponent : public UActorComponent
{
public:
	float                                              TileGenerationRadius;                             		// 0x00F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TileRemovalRadius;                                		// 0x00F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationInvokerComponent");
		return ptr;
	}

};


// Class Engine.NavRelevantComponent
// 0x0030 (0x0120 - 0x00F0)
class UNavRelevantComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x24];                              		// 0x00F0(0x0024) MISSED OFFSET
	unsigned char                                      bAttachToOwnersRoot : 1;                          		// 0x0114(0x0001)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0115(0x0003) MISSED OFFSET
	class UObject*                                     CachedNavParent;                                  		// 0x0118(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavRelevantComponent");
		return ptr;
	}


	void SetNavigationRelevancy(bool bRelevant);
};


// Class Engine.NavLinkCustomInterface
// 0x0000 (0x0028 - 0x0028)
class UNavLinkCustomInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavLinkCustomInterface");
		return ptr;
	}

};


// Class Engine.NavLinkCustomComponent
// 0x0110 (0x0230 - 0x0120)
class UNavLinkCustomComponent : public UNavRelevantComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0120(0x0008) MISSED OFFSET
	uint32_t                                           NavLinkUserId;                                    		// 0x0128(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                               		// 0x012C(0x0004) MISSED OFFSET
	class UClass*                                      EnabledAreaClass;                                 		// 0x0130(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      DisabledAreaClass;                                		// 0x0138(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LinkRelativeStart;                                		// 0x0140(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LinkRelativeEnd;                                  		// 0x014C(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ENavLinkDirection>          LinkDirection;                                    		// 0x0158(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0159(0x0003) MISSED OFFSET
	unsigned char                                      bLinkEnabled : 1;                                 		// 0x015C(0x0001) (CPF_Edit)
	unsigned char                                      bNotifyWhenEnabled : 1;                           		// 0x015C(0x0001) (CPF_Edit)
	unsigned char                                      bNotifyWhenDisabled : 1;                          		// 0x015C(0x0001) (CPF_Edit)
	unsigned char                                      bCreateBoxObstacle : 1;                           		// 0x015C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData03[0x3];                               		// 0x015D(0x0003) MISSED OFFSET
	struct FVector                                     ObstacleOffset;                                   		// 0x0160(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     ObstacleExtent;                                   		// 0x016C(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      ObstacleAreaClass;                                		// 0x0178(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BroadcastRadius;                                  		// 0x0180(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BroadcastInterval;                                		// 0x0184(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ECollisionChannel>          BroadcastChannel;                                 		// 0x0188(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0xA7];                              		// 0x0189(0x00A7) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavLinkCustomComponent");
		return ptr;
	}

};


// Class Engine.NavModifierComponent
// 0x0028 (0x0148 - 0x0120)
class UNavModifierComponent : public UNavRelevantComponent
{
public:
	class UClass*                                      AreaClass;                                        		// 0x0120(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     FailsafeExtent;                                   		// 0x0128(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                              		// 0x0134(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavModifierComponent");
		return ptr;
	}


	void SetAreaClass(class UClass* NewAreaClass);
};


// Class Engine.PawnNoiseEmitterComponent
// 0x0028 (0x0118 - 0x00F0)
class UPawnNoiseEmitterComponent : public UActorComponent
{
public:
	unsigned char                                      bAIPerceptionSystemCompatibilityMode : 1;         		// 0x00F0(0x0001) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                               		// 0x00F1(0x0003) MISSED OFFSET
	struct FVector                                     LastRemoteNoisePosition;                          		// 0x00F4(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NoiseLifetime;                                    		// 0x0100(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastRemoteNoiseVolume;                            		// 0x0104(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastRemoteNoiseTime;                              		// 0x0108(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastLocalNoiseVolume;                             		// 0x010C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastLocalNoiseTime;                               		// 0x0110(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PawnNoiseEmitterComponent");
		return ptr;
	}


	void MakeNoise(class AActor* NoiseMaker, float Loudness, const struct FVector& NoiseLocation);
};


// Class Engine.PhysicalAnimationComponent
// 0x0038 (0x0128 - 0x00F0)
class UPhysicalAnimationComponent : public UActorComponent
{
public:
	float                                              StrengthMultiplyer;                               		// 0x00F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x00F4(0x0004) MISSED OFFSET
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x00F8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                              		// 0x0100(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicalAnimationComponent");
		return ptr;
	}


	void SetStrengthMultiplyer(float InStrengthMultiplyer);
	void SetSkeletalMeshComponent(class USkeletalMeshComponent* InSkeletalMeshComponent);
	void ApplyPhysicalAnimationSettingsBelow(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf);
	void ApplyPhysicalAnimationSettings(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData);
	void ApplyPhysicalAnimationProfileBelow(const struct FName& BodyName, const struct FName& ProfileName, bool bIncludeSelf, bool bClearNotFound);
};


// Class Engine.PhysicsHandleComponent
// 0x00B0 (0x01A0 - 0x00F0)
class UPhysicsHandleComponent : public UActorComponent
{
public:
	class UPrimitiveComponent*                         GrabbedComponent;                                 		// 0x00F0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                               		// 0x00F8(0x000C) MISSED OFFSET
	unsigned char                                      bSoftAngularConstraint : 1;                       		// 0x0104(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bSoftLinearConstraint : 1;                        		// 0x0104(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bInterpolateTarget : 1;                           		// 0x0104(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0105(0x0003) MISSED OFFSET
	float                                              LinearDamping;                                    		// 0x0108(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LinearStiffness;                                  		// 0x010C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AngularDamping;                                   		// 0x0110(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AngularStiffness;                                 		// 0x0114(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x68];                              		// 0x0118(0x0068) MISSED OFFSET
	float                                              InterpolationSpeed;                               		// 0x0180(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x1C];                              		// 0x0184(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsHandleComponent");
		return ptr;
	}


	void SetTargetRotation(const struct FRotator& NewRotation);
	void SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetTargetLocation(const struct FVector& NewLocation);
	void SetLinearStiffness(float NewLinearStiffness);
	void SetLinearDamping(float NewLinearDamping);
	void SetInterpolationSpeed(float NewInterpolationSpeed);
	void SetAngularStiffness(float NewAngularStiffness);
	void SetAngularDamping(float NewAngularDamping);
	void ReleaseComponent();
	void GrabComponentAtLocationWithRotation(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& Location, const struct FRotator& Rotation);
	void GrabComponentAtLocation(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation);
	void GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation);
	void GetTargetLocationAndRotation(struct FVector* TargetLocation, struct FRotator* TargetRotation);
};


// Class Engine.PlatformEventsComponent
// 0x0020 (0x0110 - 0x00F0)
class UPlatformEventsComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    PlatformChangedToLaptopModeDelegate;              		// 0x00F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    PlatformChangedToTabletModeDelegate;              		// 0x0100(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlatformEventsComponent");
		return ptr;
	}


	bool SupportsConvertibleLaptops();
	void PlatformEventDelegate__DelegateSignature();
	bool IsInTabletMode();
	bool IsInLaptopMode();
};


// Class Engine.AtmosphericFogComponent
// 0x0210 (0x0510 - 0x0300)
class UAtmosphericFogComponent : public USceneComponent
{
public:
	float                                              SunMultiplier;                                    		// 0x0300(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FogMultiplier;                                    		// 0x0304(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DensityMultiplier;                                		// 0x0308(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DensityOffset;                                    		// 0x030C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DistanceScale;                                    		// 0x0310(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AltitudeScale;                                    		// 0x0314(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DistanceOffset;                                   		// 0x0318(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              GroundOffset;                                     		// 0x031C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StartDistance;                                    		// 0x0320(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SunDiscScale;                                     		// 0x0324(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FFogHeightDensityPair>               HeightDensityLayers;                              		// 0x0328(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	float                                              DefaultBrightness;                                		// 0x0338(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      DefaultLightColor;                                		// 0x033C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDisableSunDisk : 1;                              		// 0x0340(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bDisableGroundScattering : 1;                     		// 0x0340(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0341(0x0003) MISSED OFFSET
	struct FAtmospherePrecomputeParameters             PrecomputeParams;                                 		// 0x0344(0x002C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	class UTexture2D*                                  TransmittanceTexture;                             		// 0x0370(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	class UTexture2D*                                  IrradianceTexture;                                		// 0x0378(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x190];                             		// 0x0380(0x0190) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AtmosphericFogComponent");
		return ptr;
	}


	void StartPrecompute();
	void SetSunMultiplier(float NewSunMultiplier);
	void SetStartDistance(float NewStartDistance);
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);
	void SetFogMultiplier(float NewFogMultiplier);
	void SetDistanceScale(float NewDistanceScale);
	void SetDistanceOffset(float NewDistanceOffset);
	void SetDensityOffset(float NewDensityOffset);
	void SetDensityMultiplier(float NewDensityMultiplier);
	void SetDefaultLightColor(const struct FLinearColor& NewLightColor);
	void SetDefaultBrightness(float NewBrightness);
	void SetAltitudeScale(float NewAltitudeScale);
	void DisableSunDisk(bool NewSunDisk);
	void DisableGroundScattering(bool NewGroundScattering);
};


// Class Engine.SoundAttenuation
// 0x00F8 (0x0120 - 0x0028)
class USoundAttenuation : public UObject
{
public:
	struct FAttenuationSettings                        Attenuation;                                      		// 0x0028(0x00F8) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundAttenuation");
		return ptr;
	}

};


// Class Engine.AudioComponent
// 0x0290 (0x0590 - 0x0300)
class UAudioComponent : public USceneComponent
{
public:
	class USoundBase*                                  Sound;                                            		// 0x0300(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FAudioComponentParam>                InstanceParameters;                               		// 0x0308(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	class USoundClass*                                 SoundClassOverride;                               		// 0x0318(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAutoDestroy : 1;                                 		// 0x0320(0x0001)
	unsigned char                                      bStopWhenOwnerDestroyed : 1;                      		// 0x0320(0x0001)
	unsigned char                                      bShouldRemainActiveIfDropped : 1;                 		// 0x0320(0x0001)
	unsigned char                                      bAllowSpatialization : 1;                         		// 0x0320(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bOverrideAttenuation : 1;                         		// 0x0320(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0321(0x0003) MISSED OFFSET
	unsigned char                                      bOverrideSubtitlePriority : 1;                    		// 0x0324(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0325(0x0003) MISSED OFFSET
	unsigned char                                      bIsUISound : 1;                                   		// 0x0328(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bEnableLowPassFilter : 1;                         		// 0x0328(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bOverridePriority : 1;                            		// 0x0328(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bSuppressSubtitles : 1;                           		// 0x0328(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData02[0x7];                               		// 0x0329(0x0007) MISSED OFFSET
	float                                              PitchModulationMin;                               		// 0x0330(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PitchModulationMax;                               		// 0x0334(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeModulationMin;                              		// 0x0338(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeModulationMax;                              		// 0x033C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeMultiplier;                                 		// 0x0340(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Priority;                                         		// 0x0344(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SubtitlePriority;                                 		// 0x0348(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeWeightedPriorityScale;                      		// 0x034C(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              PitchMultiplier;                                  		// 0x0350(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              HighFrequencyGainMultiplier;                      		// 0x0354(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              LowPassFilterFrequency;                           		// 0x0358(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                               		// 0x035C(0x0004) MISSED OFFSET
	class USoundAttenuation*                           AttenuationSettings;                              		// 0x0360(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FAttenuationSettings                        AttenuationOverrides;                             		// 0x0368(0x00F8) (CPF_Edit, CPF_BlueprintVisible)
	class USoundConcurrency*                           ConcurrencySettings;                              		// 0x0460(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                               		// 0x0468(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAudioFinished;                                  		// 0x0470(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData05[0x70];                              		// 0x0480(0x0070) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAudioPlaybackPercent;                           		// 0x04F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData06[0x70];                              		// 0x0500(0x0070) MISSED OFFSET
	struct FScriptDelegate                             OnQueueSubtitles;                                 		// 0x0570(0x0014) (CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData07[0x10];                              		// 0x0580(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AudioComponent");
		return ptr;
	}


	void Stop();
	void SetWaveParameter(const struct FName& InName, class USoundWave* InWave);
	void SetVolumeMultiplier(float NewVolumeMultiplier);
	void SetUISound(bool bInUISound);
	void SetSound(class USoundBase* NewSound);
	void SetPitchMultiplier(float NewPitchMultiplier);
	void SetPaused(bool bPause);
	void SetIntParameter(const struct FName& InName, int inInt);
	void SetFloatParameter(const struct FName& InName, float InFloat);
	void SetBoolParameter(const struct FName& InName, bool InBool);
	void Play(float StartTime);
	bool IsPlaying();
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime);
	bool BP_GetAttenuationSettingsToApply(struct FAttenuationSettings* OutAttenuationSettings);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
	void AdjustAttenuation(const struct FAttenuationSettings& InAttenuationSettings);
};


// Class Engine.ChildActorComponent
// 0x0030 (0x0330 - 0x0300)
class UChildActorComponent : public USceneComponent
{
public:
	class UClass*                                      ChildActorClass;                                  		// 0x0300(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class AActor*                                      ChildActor;                                       		// 0x0308(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class AActor*                                      ChildActorTemplate;                               		// 0x0310(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_DuplicateTransient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                              		// 0x0318(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ChildActorComponent");
		return ptr;
	}


	void SetChildActorClass(class UClass* InClass);
};


// Class Engine.DecalComponent
// 0x0040 (0x0340 - 0x0300)
class UDecalComponent : public USceneComponent
{
public:
	class UMaterialInterface*                          DecalMaterial;                                    		// 0x0300(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SortOrder;                                        		// 0x0308(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FadeScreenSize;                                   		// 0x030C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FadeStartDelay;                                   		// 0x0310(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FadeDuration;                                     		// 0x0314(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDestroyOwnerAfterFade : 1;                       		// 0x0318(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0319(0x0003) MISSED OFFSET
	struct FVector                                     DecalSize;                                        		// 0x031C(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                              		// 0x0328(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalComponent");
		return ptr;
	}


	void SetSortOrder(int Value);
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);
	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	float GetFadeStartDelay();
	float GetFadeDuration();
	class UMaterialInterface* GetDecalMaterial();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
};


// Class Engine.DistanceFieldCaptureComponent
// 0x0010 (0x0310 - 0x0300)
class UDistanceFieldCaptureComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x0300(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistanceFieldCaptureComponent");
		return ptr;
	}

};


// Class Engine.ExponentialHeightFogComponent
// 0x0050 (0x0350 - 0x0300)
class UExponentialHeightFogComponent : public USceneComponent
{
public:
	float                                              FogDensity;                                       		// 0x0300(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                FogInscatteringColor;                             		// 0x0304(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0314(0x0004) MISSED OFFSET
	TArray<struct FFogHeightDensityPair2>              HeightDensityLayers;                              		// 0x0318(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	float                                              DirectionalInscatteringExponent;                  		// 0x0328(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DirectionalInscatteringStartDistance;             		// 0x032C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                DirectionalInscatteringColor;                     		// 0x0330(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FogHeightFalloff;                                 		// 0x0340(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FogMaxOpacity;                                    		// 0x0344(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StartDistance;                                    		// 0x0348(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ExponentialHeightFogComponent");
		return ptr;
	}


	void SetStartDistance(float Value);
	void SetFogMaxOpacity(float Value);
	void SetFogInscatteringColor(const struct FLinearColor& Value);
	void SetFogHeightFalloff(float Value);
	void SetFogDensity(float Value);
	void SetDirectionalInscatteringStartDistance(float Value);
	void SetDirectionalInscatteringExponent(float Value);
	void SetDirectionalInscatteringColor(const struct FLinearColor& Value);
};


// Class Engine.DirectionalLightComponent
// 0x0070 (0x0490 - 0x0420)
class UDirectionalLightComponent : public ULightComponent
{
public:
	unsigned char                                      bEnableLightShaftOcclusion : 1;                   		// 0x0420(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0421(0x0003) MISSED OFFSET
	float                                              OcclusionMaskDarkness;                            		// 0x0424(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OcclusionDepthRange;                              		// 0x0428(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LightShaftOverrideDirection;                      		// 0x042C(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WholeSceneDynamicShadowRadius;                    		// 0x0438(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              DynamicShadowDistanceMovableLight;                		// 0x043C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DynamicShadowDistanceStationaryLight;             		// 0x0440(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                DynamicShadowCascades;                            		// 0x0444(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CascadeDistributionExponent;                      		// 0x0448(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CascadeTransitionFraction;                        		// 0x044C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ShadowDistanceFadeoutFraction;                    		// 0x0450(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseInsetShadowsForMovableObjects : 1;            		// 0x0454(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0455(0x0003) MISSED OFFSET
	int                                                FarShadowCascadeCount;                            		// 0x0458(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FarShadowDistance;                                		// 0x045C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DistanceFieldShadowDistance;                      		// 0x0460(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LightSourceAngle;                                 		// 0x0464(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TraceDistance;                                    		// 0x0468(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLightmassDirectionalLightSettings          LightmassSettings;                                		// 0x046C(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bCastModulatedShadows : 1;                        		// 0x047C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                               		// 0x047D(0x0003) MISSED OFFSET
	struct FColor                                      ModulatedShadowColor;                             		// 0x0480(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUsedAsAtmosphereSunLight : 1;                    		// 0x0484(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData03[0xB];                               		// 0x0485(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DirectionalLightComponent");
		return ptr;
	}


	void SetShadowDistanceFadeoutFraction(float NewValue);
	void SetOcclusionMaskDarkness(float NewValue);
	void SetLightShaftOverrideDirection(const struct FVector& NewValue);
	void SetEnableLightShaftOcclusion(bool bNewValue);
	void SetDynamicShadowDistanceStationaryLight(float NewValue);
	void SetDynamicShadowDistanceMovableLight(float NewValue);
	void SetDynamicShadowCascades(int NewValue);
	void SetCascadeTransitionFraction(float NewValue);
	void SetCascadeDistributionExponent(float NewValue);
};


// Class Engine.PointLightComponent
// 0x0030 (0x0450 - 0x0420)
class UPointLightComponent : public ULightComponent
{
public:
	float                                              Radius;                                           		// 0x0420(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              AttenuationRadius;                                		// 0x0424(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseInverseSquaredFalloff : 1;                    		// 0x0428(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0429(0x0003) MISSED OFFSET
	float                                              LightFalloffExponent;                             		// 0x042C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SourceRadius;                                     		// 0x0430(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SourceLength;                                     		// 0x0434(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLightmassPointLightSettings                LightmassSettings;                                		// 0x0438(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData01[0xC];                               		// 0x0444(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PointLightComponent");
		return ptr;
	}


	void SetSourceRadius(float bNewValue);
	void SetSourceLength(float NewValue);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
	void SetAttenuationRadius(float NewRadius);
};


// Class Engine.SpotLightComponent
// 0x0010 (0x0460 - 0x0450)
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                              LightShaftConeAngle;                              		// 0x0450(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                               		// 0x0454(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpotLightComponent");
		return ptr;
	}


	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetInnerConeAngle(float NewInnerConeAngle);
};


// Class Engine.SkyLightComponent
// 0x01B0 (0x04E0 - 0x0330)
class USkyLightComponent : public ULightComponentBase
{
public:
	class UTextureCube*                                Cubemap;                                          		// 0x0330(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SourceCubemapAngle;                               		// 0x0338(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                CubemapResolution;                                		// 0x033C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SkyDistanceThreshold;                             		// 0x0340(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLowerHemisphereIsBlack : 1;                      		// 0x0344(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0345(0x0003) MISSED OFFSET
	struct FLinearColor                                LowerHemisphereColor;                             		// 0x0348(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OcclusionMaxDistance;                             		// 0x0358(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Contrast;                                         		// 0x035C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinOcclusion;                                     		// 0x0360(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      OcclusionTint;                                    		// 0x0364(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xB0];                              		// 0x0368(0x00B0) MISSED OFFSET
	class UTextureCube*                                BlendDestinationCubemap;                          		// 0x0418(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0xC0];                              		// 0x0420(0x00C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkyLightComponent");
		return ptr;
	}


	void SetOcclusionTint(const struct FColor& InTint);
	void SetMinOcclusion(float InMinOcclusion);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction);
	void SetCubemap(class UTextureCube* NewCubemap);
	void RecaptureSky();
};


// Class Engine.LightmassPortalComponent
// 0x0010 (0x0310 - 0x0300)
class ULightmassPortalComponent : public USceneComponent
{
public:
	class UBoxComponent*                               PreviewBox;                                       		// 0x0300(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                               		// 0x0308(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmassPortalComponent");
		return ptr;
	}

};


// Class Engine.NavigationGraphNodeComponent
// 0x0030 (0x0330 - 0x0300)
class UNavigationGraphNodeComponent : public USceneComponent
{
public:
	struct FNavGraphNode                               Node;                                             		// 0x0300(0x0018)
	class UNavigationGraphNodeComponent*               NextNodeComponent;                                		// 0x0318(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UNavigationGraphNodeComponent*               PrevNodeComponent;                                		// 0x0320(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                               		// 0x0328(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationGraphNodeComponent");
		return ptr;
	}

};


// Class Engine.PhysicsConstraintComponent
// 0x0240 (0x0540 - 0x0300)
class UPhysicsConstraintComponent : public USceneComponent
{
public:
	class AActor*                                      ConstraintActor1;                                 		// 0x0300(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	struct FConstrainComponentPropName                 ComponentName1;                                   		// 0x0308(0x0008) (CPF_Edit)
	class AActor*                                      ConstraintActor2;                                 		// 0x0310(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	struct FConstrainComponentPropName                 ComponentName2;                                   		// 0x0318(0x0008) (CPF_Edit)
	unsigned char                                      UnknownData00[0x10];                              		// 0x0320(0x0010) MISSED OFFSET
	class UPhysicsConstraintTemplate*                  ConstraintSetup;                                  		// 0x0330(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_Deprecated, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnConstraintBroken;                               		// 0x0338(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                               		// 0x0348(0x0008) MISSED OFFSET
	struct FConstraintInstance                         ConstraintInstance;                               		// 0x0350(0x01F0) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsConstraintComponent");
		return ptr;
	}


	void SetLinearZLimit(TEnumAsByte<enum class ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearYLimit(TEnumAsByte<enum class ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearXLimit(TEnumAsByte<enum class ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearVelocityTarget(const struct FVector& InVelTarget);
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearPositionTarget(const struct FVector& InPosTarget);
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearDriveParams(float InSpring, float InDamping, float InForceLimit);
	void SetDisableCollision(bool bDisableCollision);
	void SetConstraintReferencePosition(TEnumAsByte<enum class EConstraintFrame> Frame, const struct FVector& RefPosition);
	void SetConstraintReferenceOrientation(TEnumAsByte<enum class EConstraintFrame> Frame, const struct FVector& PriAxis, const struct FVector& SecAxis);
	void SetConstraintReferenceFrame(TEnumAsByte<enum class EConstraintFrame> Frame, const struct FTransform& RefFrame);
	void SetConstrainedComponents(class UPrimitiveComponent* Component1, const struct FName& BoneName1, class UPrimitiveComponent* Component2, const struct FName& BoneName2);
	void SetAngularVelocityTarget(const struct FVector& InVelTarget);
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularTwistLimit(TEnumAsByte<enum class EAngularConstraintMotion> ConstraintType, float TwistLimitAngle);
	void SetAngularSwing2Limit(TEnumAsByte<enum class EAngularConstraintMotion> MotionType, float Swing2LimitAngle);
	void SetAngularSwing1Limit(TEnumAsByte<enum class EAngularConstraintMotion> MotionType, float Swing1LimitAngle);
	void SetAngularOrientationTarget(const struct FRotator& InPosTarget);
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit);
	float GetCurrentTwist();
	float GetCurrentSwing2();
	float GetCurrentSwing1();
	void GetConstraintForce(struct FVector* OutLinearForce, struct FVector* OutAngularForce);
	void BreakConstraint();
};


// Class Engine.PhysicsSpringComponent
// 0x0030 (0x0330 - 0x0300)
class UPhysicsSpringComponent : public USceneComponent
{
public:
	float                                              SpringStiffness;                                  		// 0x0300(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SpringDamping;                                    		// 0x0304(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SpringLengthAtRest;                               		// 0x0308(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SpringRadius;                                     		// 0x030C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ECollisionChannel>          SpringChannel;                                    		// 0x0310(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIgnoreSelf : 1;                                  		// 0x0311(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                               		// 0x0312(0x0002) MISSED OFFSET
	float                                              SpringCompression;                                		// 0x0314(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                              		// 0x0318(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsSpringComponent");
		return ptr;
	}


	struct FVector GetSpringRestingPoint();
	struct FVector GetSpringDirection();
	struct FVector GetSpringCurrentEndPoint();
	float GetNormalizedCompressionScalar();
};


// Class Engine.PhysicsThrusterComponent
// 0x0010 (0x0310 - 0x0300)
class UPhysicsThrusterComponent : public USceneComponent
{
public:
	float                                              ThrustStrength;                                   		// 0x0300(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                               		// 0x0304(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsThrusterComponent");
		return ptr;
	}

};


// Class Engine.PostProcessComponent
// 0x04E0 (0x07E0 - 0x0300)
class UPostProcessComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x0300(0x0010) MISSED OFFSET
	struct FPostProcessSettings                        Settings;                                         		// 0x0310(0x04C0) (CPF_Edit, CPF_BlueprintVisible)
	float                                              Priority;                                         		// 0x07D0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BlendRadius;                                      		// 0x07D4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BlendWeight;                                      		// 0x07D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                     		// 0x07DC(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUnbound : 1;                                     		// 0x07DC(0x0001) (CPF_Edit, CPF_BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PostProcessComponent");
		return ptr;
	}


	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.ArrowComponent
// 0x0010 (0x06B0 - 0x06A0)
class UArrowComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      bIsScreenSizeScaled : 1;                          		// 0x06A0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x06A1(0x0003) MISSED OFFSET
	float                                              ScreenSize;                                       		// 0x06A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bTreatAsASprite : 1;                              		// 0x06A8(0x0001) (CPF_Edit, CPF_BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ArrowComponent");
		return ptr;
	}


	void SetArrowColor_New(const struct FLinearColor& NewColor);
	void SetArrowColor_DEPRECATED(const struct FColor& NewColor);
};


// Class Engine.BillboardComponent
// 0x0020 (0x06C0 - 0x06A0)
class UBillboardComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      bIsScreenSizeScaled : 1;                          		// 0x06A0(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                               		// 0x06A1(0x0003) MISSED OFFSET
	float                                              ScreenSize;                                       		// 0x06A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              U;                                                		// 0x06A8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              UL;                                               		// 0x06AC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              V;                                                		// 0x06B0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VL;                                               		// 0x06B4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                               		// 0x06B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BillboardComponent");
		return ptr;
	}


	void SetUV(int NewU, int NewUL, int NewV, int NewVL);
	void SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);
	void SetSprite(class UTexture2D* NewSprite);
};


// Class Engine.BrushComponent
// 0x0020 (0x06C0 - 0x06A0)
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UBodySetup*                                  BrushBodySetup;                                   		// 0x06A0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     PrePivot;                                         		// 0x06A8(0x000C) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                               		// 0x06B4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BrushComponent");
		return ptr;
	}

};


// Class Engine.DrawFrustumComponent
// 0x0020 (0x06C0 - 0x06A0)
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	float                                              FrustumAspectRatio;                               		// 0x06A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FrustumStartDist;                                 		// 0x06A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FrustumEndDist;                                   		// 0x06A8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x06AC(0x0004) MISSED OFFSET
	class UTexture*                                    Texture;                                          		// 0x06B0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                               		// 0x06B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawFrustumComponent");
		return ptr;
	}

};


// Class Engine.LineBatchComponent
// 0x0030 (0x06D0 - 0x06A0)
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                              		// 0x06A0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LineBatchComponent");
		return ptr;
	}

};


// Class Engine.MaterialBillboardComponent
// 0x0010 (0x06B0 - 0x06A0)
class UMaterialBillboardComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x06A0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialBillboardComponent");
		return ptr;
	}


	void SetElements(TArray<struct FMaterialSpriteElement> NewElements);
	void AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve);
};


// Class Engine.PoseableMeshComponent
// 0x00F0 (0x09B0 - 0x08C0)
class UPoseableMeshComponent : public USkinnedMeshComponent
{
public:
	unsigned char                                      UnknownData00[0xF0];                              		// 0x08C0(0x00F0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PoseableMeshComponent");
		return ptr;
	}


	void SetBoneTransformByName(const struct FName& BoneName, const struct FTransform& InTransform, TEnumAsByte<enum class EBoneSpaces> BoneSpace);
	void SetBoneScaleByName(const struct FName& BoneName, const struct FVector& InScale3D, TEnumAsByte<enum class EBoneSpaces> BoneSpace);
	void SetBoneRotationByName(const struct FName& BoneName, const struct FRotator& InRotation, TEnumAsByte<enum class EBoneSpaces> BoneSpace);
	void SetBoneLocationByName(const struct FName& BoneName, const struct FVector& InLocation, TEnumAsByte<enum class EBoneSpaces> BoneSpace);
	void ResetBoneTransformByName(const struct FName& BoneName);
	struct FTransform GetBoneTransformByName(const struct FName& BoneName, TEnumAsByte<enum class EBoneSpaces> BoneSpace);
	struct FVector GetBoneScaleByName(const struct FName& BoneName, TEnumAsByte<enum class EBoneSpaces> BoneSpace);
	struct FRotator GetBoneRotationByName(const struct FName& BoneName, TEnumAsByte<enum class EBoneSpaces> BoneSpace);
	struct FVector GetBoneLocationByName(const struct FName& BoneName, TEnumAsByte<enum class EBoneSpaces> BoneSpace);
	void CopyPoseFromSkeletalComponent(class USkeletalMeshComponent* InComponentToCopy);
};


// Class Engine.SplineMeshComponent
// 0x00A0 (0x0880 - 0x07E0)
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	struct FSplineMeshParams                           SplineParams;                                     		// 0x07E0(0x0058) (CPF_Edit)
	struct FVector                                     SplineUpDir;                                      		// 0x0838(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAllowSplineEditingPerInstance : 1;               		// 0x0844(0x0001) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bSmoothInterpRollScale : 1;                       		// 0x0844(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0845(0x0003) MISSED OFFSET
	TEnumAsByte<enum class ESplineMeshAxis>            ForwardAxis;                                      		// 0x0848(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0849(0x0003) MISSED OFFSET
	float                                              SplineBoundaryMin;                                		// 0x084C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SplineBoundaryMax;                                		// 0x0850(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0854(0x0004) MISSED OFFSET
	class UBodySetup*                                  BodySetup;                                        		// 0x0858(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FGuid                                       CachedMeshBodySetupGuid;                          		// 0x0860(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bMeshDirty : 1;                                   		// 0x0870(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData03[0xF];                               		// 0x0871(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineMeshComponent");
		return ptr;
	}


	void UpdateMesh();
	void SetStartTangent(const struct FVector& StartTangent, bool bUpdateMesh);
	void SetStartScale(const struct FVector2D& StartScale, bool bUpdateMesh);
	void SetStartRoll(float StartRoll, bool bUpdateMesh);
	void SetStartPosition(const struct FVector& StartPos, bool bUpdateMesh);
	void SetStartOffset(const struct FVector2D& StartOffset, bool bUpdateMesh);
	void SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent, bool bUpdateMesh);
	void SetSplineUpDir(const struct FVector& InSplineUpDir, bool bUpdateMesh);
	void SetForwardAxis(TEnumAsByte<enum class ESplineMeshAxis> InForwardAxis, bool bUpdateMesh);
	void SetEndTangent(const struct FVector& EndTangent, bool bUpdateMesh);
	void SetEndScale(const struct FVector2D& EndScale, bool bUpdateMesh);
	void SetEndRoll(float EndRoll, bool bUpdateMesh);
	void SetEndPosition(const struct FVector& EndPos, bool bUpdateMesh);
	void SetEndOffset(const struct FVector2D& EndOffset, bool bUpdateMesh);
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);
	struct FVector GetStartTangent();
	struct FVector2D GetStartScale();
	float GetStartRoll();
	struct FVector GetStartPosition();
	struct FVector2D GetStartOffset();
	struct FVector GetSplineUpDir();
	TEnumAsByte<enum class ESplineMeshAxis> GetForwardAxis();
	struct FVector GetEndTangent();
	struct FVector2D GetEndScale();
	float GetEndRoll();
	struct FVector GetEndPosition();
	struct FVector2D GetEndOffset();
	float GetBoundaryMin();
	float GetBoundaryMax();
};


// Class Engine.ModelComponent
// 0x0040 (0x06E0 - 0x06A0)
class UModelComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x06A0(0x0010) MISSED OFFSET
	class UBodySetup*                                  ModelBodySetup;                                   		// 0x06B0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                              		// 0x06B8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ModelComponent");
		return ptr;
	}

};


// Class Engine.NavLinkRenderingComponent
// 0x0000 (0x06A0 - 0x06A0)
class UNavLinkRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavLinkRenderingComponent");
		return ptr;
	}

};


// Class Engine.NavMeshRenderingComponent
// 0x0010 (0x06B0 - 0x06A0)
class UNavMeshRenderingComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x06A0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshRenderingComponent");
		return ptr;
	}

};


// Class Engine.NavTestRenderingComponent
// 0x0000 (0x06A0 - 0x06A0)
class UNavTestRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavTestRenderingComponent");
		return ptr;
	}

};


// Class Engine.ParticleSystem
// 0x0110 (0x0138 - 0x0028)
class UParticleSystem : public UObject
{
public:
	TEnumAsByte<enum class EParticleSystemUpdateMode>  SystemUpdateMode;                                 		// 0x0028(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0029(0x0003) MISSED OFFSET
	float                                              UpdateTime_FPS;                                   		// 0x002C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              UpdateTime_Delta;                                 		// 0x0030(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WarmupTime;                                       		// 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WarmupTickRate;                                   		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                               		// 0x003C(0x0004) MISSED OFFSET
	TArray<class UParticleEmitter*>                    Emitters;                                         		// 0x0040(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	class UParticleSystemComponent*                    PreviewComponent;                                 		// 0x0050(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x0058(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOrientZAxisTowardCamera : 1;                     		// 0x0060(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0061(0x0003) MISSED OFFSET
	float                                              LODDistanceCheckTime;                             		// 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ParticleSystemLODMethod>    LODMethod;                                        		// 0x0068(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                               		// 0x0069(0x0007) MISSED OFFSET
	TArray<float>                                      LODDistances;                                     		// 0x0070(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	unsigned char                                      bRegenerateLODDuplicate : 1;                      		// 0x0080(0x0001)
	unsigned char                                      UnknownData04[0x7];                               		// 0x0081(0x0007) MISSED OFFSET
	TArray<struct FParticleSystemLOD>                  LODSettings;                                      		// 0x0088(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bUseFixedRelativeBoundingBox : 1;                 		// 0x0098(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData05[0x3];                               		// 0x0099(0x0003) MISSED OFFSET
	struct FBox                                        FixedRelativeBoundingBox;                         		// 0x009C(0x001C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SecondsBeforeInactive;                            		// 0x00B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bShouldResetPeakCounts : 1;                       		// 0x00BC(0x0001)
	unsigned char                                      bHasPhysics : 1;                                  		// 0x00BC(0x0001) (CPF_Transient)
	unsigned char                                      bUseRealtimeThumbnail : 1;                        		// 0x00BC(0x0001) (CPF_Edit)
	unsigned char                                      ThumbnailImageOutOfDate : 1;                      		// 0x00BC(0x0001)
	unsigned char                                      UnknownData06[0x3];                               		// 0x00BD(0x0003) MISSED OFFSET
	float                                              Delay;                                            		// 0x00C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DelayLow;                                         		// 0x00C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseDelayRange : 1;                               		// 0x00C8(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData07[0x3];                               		// 0x00C9(0x0003) MISSED OFFSET
	unsigned char                                      bAutoDeactivate : 1;                              		// 0x00CC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                               		// 0x00CD(0x0003) MISSED OFFSET
	uint32_t                                           MinTimeBetweenTicks;                              		// 0x00D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EParticleSystemInsignificanceReaction> InsignificantReaction;                            		// 0x00D4(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                               		// 0x00D5(0x0003) MISSED OFFSET
	float                                              InsignificanceDelay;                              		// 0x00D8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EParticleSignificanceLevel> MaxSignificanceLevel;                             		// 0x00DC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                               		// 0x00DD(0x0003) MISSED OFFSET
	struct FVector                                     MacroUVPosition;                                  		// 0x00E0(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MacroUVRadius;                                    		// 0x00EC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EParticleSystemOcclusionBoundsMethod> OcclusionBoundsMethod;                            		// 0x00F0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                               		// 0x00F1(0x0003) MISSED OFFSET
	struct FBox                                        CustomOcclusionBounds;                            		// 0x00F4(0x001C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FLODSoloTrack>                       SoloTracking;                                     		// 0x0110(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FNamedEmitterMaterial>               NamedMaterialSlots;                               		// 0x0120(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData12[0x8];                               		// 0x0130(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSystem");
		return ptr;
	}


	bool ContainsEmitterType(class UClass* TypeData);
};


// Class Engine.ParticleEmitter
// 0x0140 (0x0168 - 0x0028)
class UParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                      		// 0x0028(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SubUVDataOffset;                                  		// 0x0030(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TEnumAsByte<enum class EEmitterRenderMode>         EmitterRenderMode;                                		// 0x0034(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0035(0x0003) MISSED OFFSET
	TArray<class UParticleLODLevel*>                   LODLevels;                                        		// 0x0038(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      ConvertedModules : 1;                             		// 0x0048(0x0001)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0049(0x0003) MISSED OFFSET
	int                                                PeakActiveParticles;                              		// 0x004C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                InitialAllocationCount;                           		// 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MediumDetailSpawnRateScale;                       		// 0x0054(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              QualityLevelSpawnRateScale;                       		// 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EDetailMode>                DetailMode;                                       		// 0x005C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                               		// 0x005D(0x0003) MISSED OFFSET
	unsigned char                                      bIsSoloing : 1;                                   		// 0x0060(0x0001) (CPF_Transient)
	unsigned char                                      bCookedOut : 1;                                   		// 0x0060(0x0001)
	unsigned char                                      bDisabledLODsKeepEmitterAlive : 1;                		// 0x0060(0x0001) (CPF_Edit)
	unsigned char                                      bDisableWhenInsignficant : 1;                     		// 0x0060(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData03[0x3];                               		// 0x0061(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EParticleSignificanceLevel> SignificanceLevel;                                		// 0x0064(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x103];                             		// 0x0065(0x0103) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleEmitter");
		return ptr;
	}

};


// Class Engine.ParticleSystemComponent
// 0x0280 (0x0920 - 0x06A0)
class UParticleSystemComponent : public UPrimitiveComponent
{
public:
	TArray<class UMaterialInterface*>                  EmitterMaterials;                                 		// 0x06A0(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	TArray<class USkeletalMeshComponent*>              SkelMeshComponents;                               		// 0x06B0(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	unsigned char                                      bResetOnDetach : 1;                               		// 0x06C0(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUpdateOnDedicatedServer : 1;                     		// 0x06C1(0x0001)
	unsigned char                                      bAllowRecycling : 1;                              		// 0x06C1(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bAutoManageAttachment : 1;                        		// 0x06C1(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x2];                               		// 0x06C2(0x0002) MISSED OFFSET
	TEnumAsByte<enum class EParticleSignificanceLevel> RequiredSignificance;                             		// 0x06C4(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xB];                               		// 0x06C5(0x000B) MISSED OFFSET
	TArray<struct FParticleSysParam>                   InstanceParameters;                               		// 0x06D0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                  		// 0x06E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                  		// 0x06F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                  		// 0x0700(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                		// 0x0710(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FVector                                     OldPosition;                                      		// 0x0720(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     PartSysVelocity;                                  		// 0x072C(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WarmupTime;                                       		// 0x0738(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WarmupTickRate;                                   		// 0x073C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bWarmingUp : 1;                                   		// 0x0740(0x0001)
	unsigned char                                      UnknownData02[0xB];                               		// 0x0741(0x000B) MISSED OFFSET
	float                                              SecondsBeforeInactive;                            		// 0x074C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                               		// 0x0750(0x0008) MISSED OFFSET
	float                                              MaxTimeBeforeForceUpdateTransform;                		// 0x0758(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                               		// 0x075C(0x0004) MISSED OFFSET
	unsigned char                                      bOverrideLODMethod : 1;                           		// 0x0760(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData05[0x3];                               		// 0x0761(0x0003) MISSED OFFSET
	TEnumAsByte<enum class ParticleSystemLODMethod>    LODMethod;                                        		// 0x0764(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                               		// 0x0765(0x0003) MISSED OFFSET
	unsigned char                                      bSkipUpdateDynamicDataDuringTick : 1;             		// 0x0768(0x0001)
	unsigned char                                      UnknownData07[0x1F];                              		// 0x0769(0x001F) MISSED OFFSET
	TArray<class UParticleSystemReplay*>               ReplayClips;                                      		// 0x0788(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData08[0x60];                              		// 0x0798(0x0060) MISSED OFFSET
	float                                              CustomTimeDilation;                               		// 0x07F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                               		// 0x07FC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSystemFinished;                                 		// 0x0800(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	TWeakObjectPtr<class USceneComponent>              AutoAttachParent;                                 		// 0x0810(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FName                                       AutoAttachSocketName;                             		// 0x0818(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EAttachLocation>            AutoAttachLocationType;                           		// 0x0820(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	TEnumAsByte<enum class EAttachmentRule>            AutoAttachLocationRule;                           		// 0x0821(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EAttachmentRule>            AutoAttachRotationRule;                           		// 0x0822(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EAttachmentRule>            AutoAttachScaleRule;                              		// 0x0823(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0xFC];                              		// 0x0824(0x00FC) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSystemComponent");
		return ptr;
	}


	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetTrailSourceData(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<enum class ETrailWidthMode> InWidthMode, float InWidth);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void SetEmitterEnable(const struct FName& EmitterName, bool bNewEnableState);
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex);
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);
	void SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex);
	void SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex);
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);
	void SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex);
	void SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint);
	void SetAutoAttachParams(class USceneComponent* Parent, const struct FName& SocketName, TEnumAsByte<enum class EAttachLocation> LocationType);
	void SetAutoAttachmentParameters(class USceneComponent* Parent, const struct FName& SocketName, TEnumAsByte<enum class EAttachmentRule> LocationRule, TEnumAsByte<enum class EAttachmentRule> RotationRule, TEnumAsByte<enum class EAttachmentRule> ScaleRule);
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	int GetNumActiveParticles();
	class UMaterialInterface* GetNamedMaterial(const struct FName& InName);
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, struct FVector* OutTangentPoint);
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, float* OutTargetStrength);
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, struct FVector* OutTargetPoint);
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, struct FVector* OutTangentPoint);
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, float* OutSourceStrength);
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, struct FVector* OutSourcePoint);
	bool GetBeamEndPoint(int EmitterIndex, struct FVector* OutEndPoint);
	void GenerateParticleEvent(const struct FName& InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity);
	void EndTrails();
	class UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(const struct FName& InName, class UMaterialInterface* SourceMaterial);
	void BeginTrails(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<enum class ETrailWidthMode> InWidthMode, float InWidth);
};


// Class Engine.ShapeComponent
// 0x0020 (0x06C0 - 0x06A0)
class UShapeComponent : public UPrimitiveComponent
{
public:
	class UBodySetup*                                  ShapeBodySetup;                                   		// 0x06A0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient, CPF_IsPlainOldData)
	unsigned char                                      bDrawOnlyIfSelected : 1;                          		// 0x06A8(0x0001)
	unsigned char                                      bShouldCollideWhenPlacing : 1;                    		// 0x06A8(0x0001)
	unsigned char                                      bDynamicObstacle : 1;                             		// 0x06A8(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x7];                               		// 0x06A9(0x0007) MISSED OFFSET
	class UClass*                                      AreaClass;                                        		// 0x06B0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                               		// 0x06B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShapeComponent");
		return ptr;
	}

};


// Class Engine.BoxComponent
// 0x0010 (0x06D0 - 0x06C0)
class UBoxComponent : public UShapeComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x06C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BoxComponent");
		return ptr;
	}


	void SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps);
	struct FVector GetUnscaledBoxExtent();
	struct FVector GetScaledBoxExtent();
};


// Class Engine.CapsuleComponent
// 0x0010 (0x06D0 - 0x06C0)
class UCapsuleComponent : public UShapeComponent
{
public:
	float                                              CapsuleHeight;                                    		// 0x06C0(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                               		// 0x06C4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CapsuleComponent");
		return ptr;
	}


	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);
	void GetUnscaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere);
	void GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetUnscaledCapsuleRadius();
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();
	float GetUnscaledCapsuleHalfHeight();
	float GetShapeScale();
	void GetScaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere);
	void GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetScaledCapsuleRadius();
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();
	float GetScaledCapsuleHalfHeight();
};


// Class Engine.SphereComponent
// 0x0000 (0x06C0 - 0x06C0)
class USphereComponent : public UShapeComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SphereComponent");
		return ptr;
	}


	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);
	float GetUnscaledSphereRadius();
	float GetShapeScale();
	float GetScaledSphereRadius();
};


// Class Engine.DrawSphereComponent
// 0x0000 (0x06C0 - 0x06C0)
class UDrawSphereComponent : public USphereComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawSphereComponent");
		return ptr;
	}

};


// Class Engine.SubDSurfaceComponent
// 0x0010 (0x06B0 - 0x06A0)
class USubDSurfaceComponent : public UPrimitiveComponent
{
public:
	int                                                DebugLevel;                                       		// 0x06A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x06A4(0x0004) MISSED OFFSET
	class UStaticMeshComponent*                        DisplayMeshComponent;                             		// 0x06A8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SubDSurfaceComponent");
		return ptr;
	}


	bool SetMesh(class USubDSurface* NewMesh);
};


// Class Engine.TextRenderComponent
// 0x0050 (0x06F0 - 0x06A0)
class UTextRenderComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x06A0(0x0010) MISSED OFFSET
	class UMaterialInterface*                          TextMaterial;                                     		// 0x06B0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UFont*                                       Font;                                             		// 0x06B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EHorizTextAligment>         HorizontalAlignment;                              		// 0x06C0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EVerticalTextAligment>      VerticalAlignment;                                		// 0x06C1(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                               		// 0x06C2(0x0002) MISSED OFFSET
	struct FColor                                      TextRenderColor;                                  		// 0x06C4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              XScale;                                           		// 0x06C8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              YScale;                                           		// 0x06CC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WorldSize;                                        		// 0x06D0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              InvDefaultSize;                                   		// 0x06D4(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              HorizSpacingAdjust;                               		// 0x06D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VertSpacingAdjust;                                		// 0x06DC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAlwaysRenderAsText : 1;                          		// 0x06E0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData02[0xF];                               		// 0x06E1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextRenderComponent");
		return ptr;
	}


	void SetYScale(float Value);
	void SetXScale(float Value);
	void SetWorldSize(float Value);
	void SetVertSpacingAdjust(float Value);
	void SetVerticalAlignment(TEnumAsByte<enum class EVerticalTextAligment> Value);
	void SetTextRenderColor(const struct FColor& Value);
	void SetTextMaterial(class UMaterialInterface* Material);
	void SetText(const struct FString& Value);
	void SetHorizSpacingAdjust(float Value);
	void SetHorizontalAlignment(TEnumAsByte<enum class EHorizTextAligment> Value);
	void SetFont(class UFont* Value);
	void K2_SetText(const struct FText& Value);
	struct FVector GetTextWorldSize();
	struct FVector GetTextLocalSize();
};


// Class Engine.VectorFieldComponent
// 0x0020 (0x06C0 - 0x06A0)
class UVectorFieldComponent : public UPrimitiveComponent
{
public:
	float                                              Intensity;                                        		// 0x06A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Tightness;                                        		// 0x06A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPreviewVectorField : 1;                          		// 0x06A8(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData00[0x17];                              		// 0x06A9(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VectorFieldComponent");
		return ptr;
	}


	void SetIntensity(float NewIntensity);
};


// Class Engine.RadialForceComponent
// 0x0030 (0x0330 - 0x0300)
class URadialForceComponent : public USceneComponent
{
public:
	float                                              Radius;                                           		// 0x0300(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ERadialImpulseFalloff>      Falloff;                                          		// 0x0304(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0305(0x0003) MISSED OFFSET
	float                                              ImpulseStrength;                                  		// 0x0308(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bImpulseVelChange : 1;                            		// 0x030C(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bIgnoreOwningActor : 1;                           		// 0x030C(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                               		// 0x030D(0x0003) MISSED OFFSET
	float                                              ForceStrength;                                    		// 0x0310(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DestructibleDamage;                               		// 0x0314(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<TEnumAsByte<enum class EObjectTypeQuery>>   ObjectTypesToAffect;                              		// 0x0318(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                               		// 0x0328(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RadialForceComponent");
		return ptr;
	}


	void RemoveObjectTypeToAffect(TEnumAsByte<enum class EObjectTypeQuery> ObjectType);
	void FireImpulse();
	void AddObjectTypeToAffect(TEnumAsByte<enum class EObjectTypeQuery> ObjectType);
};


// Class Engine.ReflectionCaptureComponent
// 0x0080 (0x0380 - 0x0300)
class UReflectionCaptureComponent : public USceneComponent
{
public:
	class UBillboardComponent*                         CaptureOffsetComponent;                           		// 0x0300(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TEnumAsByte<enum class EReflectionSourceType>      ReflectionSourceType;                             		// 0x0308(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0309(0x0007) MISSED OFFSET
	class UTextureCube*                                Cubemap;                                          		// 0x0310(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SourceCubemapAngle;                               		// 0x0318(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Brightness;                                       		// 0x031C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     CaptureOffset;                                    		// 0x0320(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bSharedComponent : 1;                             		// 0x032C(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                               		// 0x032D(0x000F) MISSED OFFSET
	struct FGuid                                       StateId;                                          		// 0x033C(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x34];                              		// 0x034C(0x0034) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReflectionCaptureComponent");
		return ptr;
	}

};


// Class Engine.BoxReflectionCaptureComponent
// 0x0010 (0x0390 - 0x0380)
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	class UBoxComponent*                               PreviewInfluenceBox;                              		// 0x0380(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UBoxComponent*                               PreviewCaptureBox;                                		// 0x0388(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BoxReflectionCaptureComponent");
		return ptr;
	}

};


// Class Engine.BoxReflectionCaptureSAComponent
// 0x0000 (0x0390 - 0x0390)
class UBoxReflectionCaptureSAComponent : public UBoxReflectionCaptureComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BoxReflectionCaptureSAComponent");
		return ptr;
	}

};


// Class Engine.PlaneReflectionCaptureComponent
// 0x0010 (0x0390 - 0x0380)
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                           		// 0x0380(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UBoxComponent*                               PreviewCaptureBox;                                		// 0x0388(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlaneReflectionCaptureComponent");
		return ptr;
	}

};


// Class Engine.SphereReflectionCaptureComponent
// 0x0010 (0x0390 - 0x0380)
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                           		// 0x0380(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                               		// 0x0388(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SphereReflectionCaptureComponent");
		return ptr;
	}

};


// Class Engine.PlanarReflectionComponent
// 0x00E0 (0x04A0 - 0x03C0)
class UPlanarReflectionComponent : public USceneCaptureComponent
{
public:
	float                                              NormalDistortionStrength;                         		// 0x03C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PrefilterRoughness;                               		// 0x03C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PrefilterRoughnessDistance;                       		// 0x03C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ScreenPercentage;                                 		// 0x03CC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ExtraFOV;                                         		// 0x03D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DistanceFromPlaneFadeStart;                       		// 0x03D4(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              DistanceFromPlaneFadeEnd;                         		// 0x03D8(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              DistanceFromPlaneFadeoutStart;                    		// 0x03DC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DistanceFromPlaneFadeoutEnd;                      		// 0x03E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AngleFromPlaneFadeStart;                          		// 0x03E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AngleFromPlaneFadeEnd;                            		// 0x03E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRenderSceneTwoSided : 1;                         		// 0x03EC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xB3];                              		// 0x03ED(0x00B3) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlanarReflectionComponent");
		return ptr;
	}

};


// Class Engine.SceneCaptureComponentCube
// 0x0000 (0x03C0 - 0x03C0)
class USceneCaptureComponentCube : public USceneCaptureComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureComponentCube");
		return ptr;
	}


	void CaptureScene();
};


// Class Engine.StereoLayerComponent
// 0x00A0 (0x03A0 - 0x0300)
class UStereoLayerComponent : public USceneComponent
{
public:
	unsigned char                                      bLiveTexture : 1;                                 		// 0x0300(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bSupportsDepth : 1;                               		// 0x0300(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bNoAlphaChannel : 1;                              		// 0x0300(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0301(0x0007) MISSED OFFSET
	class UTexture*                                    Texture;                                          		// 0x0308(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture*                                    LeftTexture;                                      		// 0x0310(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bQuadPreserveTextureRatio : 1;                    		// 0x0318(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0319(0x0003) MISSED OFFSET
	struct FVector2D                                   QuadSize;                                         		// 0x031C(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FBox2D                                      UVRect;                                           		// 0x0324(0x0014) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CylinderRadius;                                   		// 0x0338(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CylinderOverlayArc;                               		// 0x033C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                CylinderHeight;                                   		// 0x0340(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EStereoLayerType>           StereoLayerType;                                  		// 0x0344(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EStereoLayerShape>          StereoLayerShape;                                 		// 0x0345(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                               		// 0x0346(0x0002) MISSED OFFSET
	int                                                Priority;                                         		// 0x0348(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x54];                              		// 0x034C(0x0054) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StereoLayerComponent");
		return ptr;
	}


	void SetUVRect(const struct FBox2D& InUVRect);
	void SetTexture(class UTexture* InTexture);
	void SetQuadSize(const struct FVector2D& InQuadSize);
	void SetPriority(int InPriority);
	void MarkTextureForUpdate();
	struct FBox2D GetUVRect();
	class UTexture* GetTexture();
	struct FVector2D GetQuadSize();
	int GetPriority();
};


// Class Engine.WindDirectionalSourceComponent
// 0x0020 (0x0320 - 0x0300)
class UWindDirectionalSourceComponent : public USceneComponent
{
public:
	float                                              Strength;                                         		// 0x0300(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Speed;                                            		// 0x0304(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinGustAmount;                                    		// 0x0308(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxGustAmount;                                    		// 0x030C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Radius;                                           		// 0x0310(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPointWind : 1;                                   		// 0x0314(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0xB];                               		// 0x0315(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WindDirectionalSourceComponent");
		return ptr;
	}

};


// Class Engine.TimelineComponent
// 0x00F0 (0x01E0 - 0x00F0)
class UTimelineComponent : public UActorComponent
{
public:
	struct FTimeline                                   TheTimeline;                                      		// 0x00F0(0x00E0) (CPF_Net)
	unsigned char                                      bIgnoreTimeDilation : 1;                          		// 0x01D0(0x0001)
	unsigned char                                      UnknownData00[0xF];                               		// 0x01D1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TimelineComponent");
		return ptr;
	}


	void Stop();
	void SetVectorCurve(class UCurveVector* NewVectorCurve, const struct FName& VectorTrackName);
	void SetTimelineLengthMode(TEnumAsByte<enum class ETimelineLengthMode> NewLengthMode);
	void SetTimelineLength(float NewLength);
	void SetPlayRate(float NewRate);
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);
	void SetNewTime(float NewTime);
	void SetLooping(bool bNewLooping);
	void SetLinearColorCurve(class UCurveLinearColor* NewLinearColorCurve, const struct FName& LinearColorTrackName);
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);
	void SetFloatCurve(class UCurveFloat* NewFloatCurve, const struct FName& FloatTrackName);
	void ReverseFromEnd();
	void Reverse();
	void PlayFromStart();
	void Play();
	void OnRep_Timeline();
	bool IsReversing();
	bool IsPlaying();
	bool IsLooping();
	float GetTimelineLength();
	float GetPlayRate();
	float GetPlaybackPosition();
	bool GetIgnoreTimeDilation();
};


// Class Engine.AnimSequenceBase
// 0x0028 (0x00A0 - 0x0078)
class UAnimSequenceBase : public UAnimationAsset
{
public:
	TArray<struct FAnimNotifyEvent>                    Notifies;                                         		// 0x0078(0x0010) (CPF_ZeroConstructor)
	float                                              SequenceLength;                                   		// 0x0088(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	float                                              RateScale;                                        		// 0x008C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRawCurveTracks                             RawCurveData;                                     		// 0x0090(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimSequenceBase");
		return ptr;
	}


	float GetPlayLength();
};


// Class Engine.AnimCompositeBase
// 0x0000 (0x00A0 - 0x00A0)
class UAnimCompositeBase : public UAnimSequenceBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompositeBase");
		return ptr;
	}

};


// Class Engine.AnimComposite
// 0x0010 (0x00B0 - 0x00A0)
class UAnimComposite : public UAnimCompositeBase
{
public:
	struct FAnimTrack                                  AnimationTrack;                                   		// 0x00A0(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimComposite");
		return ptr;
	}

};


// Class Engine.AnimMontage
// 0x0108 (0x01A8 - 0x00A0)
class UAnimMontage : public UAnimCompositeBase
{
public:
	struct FAlphaBlend                                 BlendIn;                                          		// 0x00A0(0x0038) (CPF_Edit)
	float                                              BlendInTime;                                      		// 0x00D8(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x00DC(0x0004) MISSED OFFSET
	struct FAlphaBlend                                 BlendOut;                                         		// 0x00E0(0x0038) (CPF_Edit)
	float                                              BlendOutTime;                                     		// 0x0118(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              BlendOutTriggerTime;                              		// 0x011C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       SyncGroup;                                        		// 0x0120(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SyncSlotIndex;                                    		// 0x0128(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                               		// 0x012C(0x0004) MISSED OFFSET
	struct FMarkerSyncData                             MarkerData;                                       		// 0x0130(0x0020)
	TArray<struct FCompositeSection>                   CompositeSections;                                		// 0x0150(0x0010) (CPF_ZeroConstructor)
	TArray<struct FSlotAnimationTrack>                 SlotAnimTracks;                                   		// 0x0160(0x0010) (CPF_ZeroConstructor)
	TArray<struct FBranchingPoint>                     BranchingPoints;                                  		// 0x0170(0x0010) (CPF_ZeroConstructor, CPF_Deprecated)
	unsigned char                                      bEnableRootMotionTranslation : 1;                 		// 0x0180(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnableRootMotionRotation : 1;                    		// 0x0181(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ERootMotionRootLock>        RootMotionRootLock;                               		// 0x0182(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x5];                               		// 0x0183(0x0005) MISSED OFFSET
	TArray<struct FBranchingPointMarker>               BranchingPointMarkers;                            		// 0x0188(0x0010) (CPF_ZeroConstructor)
	TArray<int>                                        BranchingPointStateNotifyIndices;                 		// 0x0198(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimMontage");
		return ptr;
	}

};


// Class Engine.AnimSequence
// 0x00F8 (0x0198 - 0x00A0)
class UAnimSequence : public UAnimSequenceBase
{
public:
	int                                                NumFrames;                                        		// 0x00A0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x00A4(0x0004) MISSED OFFSET
	TArray<struct FTrackToSkeletonMap>                 TrackToSkeletonMapTable;                          		// 0x00A8(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x90];                              		// 0x00B8(0x0090) MISSED OFFSET
	TEnumAsByte<enum class EAdditiveAnimationType>     AdditiveAnimType;                                 		// 0x0148(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EAdditiveBasePoseType>      RefPoseType;                                      		// 0x0149(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                               		// 0x014A(0x0006) MISSED OFFSET
	class UAnimSequence*                               RefPoseSeq;                                       		// 0x0150(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                RefFrameIndex;                                    		// 0x0158(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                EncodingPkgVersion;                               		// 0x015C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       RetargetSource;                                   		// 0x0160(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EAnimInterpolationType>     Interpolation;                                    		// 0x0168(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnableRootMotion : 1;                            		// 0x0169(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ERootMotionRootLock>        RootMotionRootLock;                               		// 0x016A(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bForceRootLock : 1;                               		// 0x016B(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRootMotionSettingsCopiedFromMontage : 1;         		// 0x016C(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                               		// 0x016D(0x0003) MISSED OFFSET
	TArray<struct FAnimSyncMarker>                     AuthoredSyncMarkers;                              		// 0x0170(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData04[0x18];                              		// 0x0180(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimSequence");
		return ptr;
	}

};


// Class Engine.BlendSpaceBase
// 0x00C8 (0x0140 - 0x0078)
class UBlendSpaceBase : public UAnimationAsset
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0078(0x0008) MISSED OFFSET
	struct FBlendParameter                             BlendParameters[0x3];                             		// 0x0080(0x0020)
	struct FInterpolationParameter                     InterpolationParam[0x3];                          		// 0x00E0(0x0008) (CPF_Edit)
	float                                              TargetWeightInterpolationSpeedPerSec;             		// 0x00F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ENotifyTriggerMode>         NotifyTriggerMode;                                		// 0x00FC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRotationBlendInMeshSpace : 1;                    		// 0x00FD(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                               		// 0x00FE(0x0002) MISSED OFFSET
	int                                                NumOfDimension;                                   		// 0x0100(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimLength;                                       		// 0x0104(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FPerBoneInterpolation>               PerBoneBlend;                                     		// 0x0108(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                               		// 0x0118(0x0008) MISSED OFFSET
	TArray<struct FBlendSample>                        SampleData;                                       		// 0x0120(0x0010) (CPF_ZeroConstructor)
	TArray<struct FEditorElement>                      GridSamples;                                      		// 0x0130(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlendSpaceBase");
		return ptr;
	}

};


// Class Engine.BlendSpace
// 0x0008 (0x0148 - 0x0140)
class UBlendSpace : public UBlendSpaceBase
{
public:
	TEnumAsByte<enum class EBlendSpaceAxis>            AxisToScaleAnimation;                             		// 0x0140(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlendSpace");
		return ptr;
	}

};


// Class Engine.AimOffsetBlendSpace
// 0x0000 (0x0148 - 0x0148)
class UAimOffsetBlendSpace : public UBlendSpace
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AimOffsetBlendSpace");
		return ptr;
	}

};


// Class Engine.BlendSpace1D
// 0x0008 (0x0148 - 0x0140)
class UBlendSpace1D : public UBlendSpaceBase
{
public:
	unsigned char                                      bScaleAnimation : 1;                              		// 0x0140(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlendSpace1D");
		return ptr;
	}

};


// Class Engine.AimOffsetBlendSpace1D
// 0x0000 (0x0148 - 0x0148)
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AimOffsetBlendSpace1D");
		return ptr;
	}

};


// Class Engine.PoseAsset
// 0x0118 (0x0190 - 0x0078)
class UPoseAsset : public UAnimationAsset
{
public:
	struct FPoseDataContainer                          PoseContainer;                                    		// 0x0078(0x0090)
	unsigned char                                      bAdditivePose : 1;                                		// 0x0108(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0109(0x0003) MISSED OFFSET
	int                                                BasePoseIndex;                                    		// 0x010C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       RetargetSource;                                   		// 0x0110(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x78];                              		// 0x0118(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PoseAsset");
		return ptr;
	}

};


// Class Engine.AnimStateMachineTypes
// 0x0000 (0x0028 - 0x0028)
class UAnimStateMachineTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimStateMachineTypes");
		return ptr;
	}

};


// Class Engine.AnimClassInterface
// 0x0000 (0x0028 - 0x0028)
class UAnimClassInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimClassInterface");
		return ptr;
	}

};


// Class Engine.AnimClassData
// 0x0070 (0x0098 - 0x0028)
class UAnimClassData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET
	TArray<struct FBakedAnimationStateMachine>         BakedStateMachines;                               		// 0x0030(0x0010) (CPF_ZeroConstructor)
	class USkeleton*                                   TargetSkeleton;                                   		// 0x0040(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FAnimNotifyEvent>                    AnimNotifies;                                     		// 0x0048(0x0010) (CPF_ZeroConstructor)
	int                                                RootAnimNodeIndex;                                		// 0x0058(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                               		// 0x005C(0x0004) MISSED OFFSET
	TArray<int>                                        OrderedSavedPoseIndices;                          		// 0x0060(0x0010) (CPF_ZeroConstructor)
	class UStructProperty*                             RootAnimNodeProperty;                             		// 0x0070(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UStructProperty*>                     AnimNodeProperties;                               		// 0x0078(0x0010) (CPF_ZeroConstructor)
	TArray<struct FName>                               SyncGroupNames;                                   		// 0x0088(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimClassData");
		return ptr;
	}

};


// Class Engine.AnimCompress
// 0x0018 (0x0040 - 0x0028)
class UAnimCompress : public UObject
{
public:
	struct FString                                     Description;                                      		// 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst)
	unsigned char                                      bNeedsSkeleton : 1;                               		// 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0039(0x0003) MISSED OFFSET
	TEnumAsByte<enum class AnimationCompressionFormat> TranslationCompressionFormat;                     		// 0x003C(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class AnimationCompressionFormat> RotationCompressionFormat;                        		// 0x003D(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class AnimationCompressionFormat> ScaleCompressionFormat;                           		// 0x003E(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompress");
		return ptr;
	}

};


// Class Engine.AnimCompress_Automatic
// 0x0008 (0x0048 - 0x0040)
class UAnimCompress_Automatic : public UAnimCompress
{
public:
	float                                              MaxEndEffectorError;                              		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bTryFixedBitwiseCompression : 1;                  		// 0x0044(0x0001) (CPF_Edit)
	unsigned char                                      bTryPerTrackBitwiseCompression : 1;               		// 0x0044(0x0001) (CPF_Edit)
	unsigned char                                      bTryLinearKeyRemovalCompression : 1;              		// 0x0044(0x0001) (CPF_Edit)
	unsigned char                                      bTryIntervalKeyRemoval : 1;                       		// 0x0044(0x0001) (CPF_Edit)
	unsigned char                                      bRunCurrentDefaultCompressor : 1;                 		// 0x0044(0x0001) (CPF_Edit)
	unsigned char                                      bAutoReplaceIfExistingErrorTooGreat : 1;          		// 0x0044(0x0001) (CPF_Edit)
	unsigned char                                      bRaiseMaxErrorToExisting : 1;                     		// 0x0044(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompress_Automatic");
		return ptr;
	}

};


// Class Engine.AnimCompress_BitwiseCompressOnly
// 0x0000 (0x0040 - 0x0040)
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompress_BitwiseCompressOnly");
		return ptr;
	}

};


// Class Engine.AnimCompress_LeastDestructive
// 0x0000 (0x0040 - 0x0040)
class UAnimCompress_LeastDestructive : public UAnimCompress
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompress_LeastDestructive");
		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveEverySecondKey
// 0x0008 (0x0048 - 0x0040)
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{
public:
	int                                                MinKeys;                                          		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bStartAtSecondKey : 1;                            		// 0x0044(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompress_RemoveEverySecondKey");
		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveLinearKeys
// 0x0020 (0x0060 - 0x0040)
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                       		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxAngleDiff;                                     		// 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxScaleDiff;                                     		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxEffectorDiff;                                  		// 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinEffectorDiff;                                  		// 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              EffectorDiffSocket;                               		// 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ParentKeyScale;                                   		// 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRetarget : 1;                                    		// 0x005C(0x0001) (CPF_Edit)
	unsigned char                                      bActuallyFilterLinearKeys : 1;                    		// 0x005C(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompress_RemoveLinearKeys");
		return ptr;
	}

};


// Class Engine.AnimCompress_PerTrackCompression
// 0x0080 (0x00E0 - 0x0060)
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{
public:
	float                                              MaxZeroingThreshold;                              		// 0x0060(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxPosDiffBitwise;                                		// 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxAngleDiffBitwise;                              		// 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxScaleDiffBitwise;                              		// 0x006C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<TEnumAsByte<enum class AnimationCompressionFormat>> AllowedRotationFormats;                           		// 0x0070(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<TEnumAsByte<enum class AnimationCompressionFormat>> AllowedTranslationFormats;                        		// 0x0080(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<TEnumAsByte<enum class AnimationCompressionFormat>> AllowedScaleFormats;                              		// 0x0090(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bResampleAnimation : 1;                           		// 0x00A0(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x00A1(0x0003) MISSED OFFSET
	float                                              ResampledFramerate;                               		// 0x00A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MinKeysForResampling;                             		// 0x00A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseAdaptiveError : 1;                            		// 0x00AC(0x0001) (CPF_Edit)
	unsigned char                                      bUseOverrideForEndEffectors : 1;                  		// 0x00AC(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x3];                               		// 0x00AD(0x0003) MISSED OFFSET
	int                                                TrackHeightBias;                                  		// 0x00B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ParentingDivisor;                                 		// 0x00B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ParentingDivisorExponent;                         		// 0x00B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseAdaptiveError2 : 1;                           		// 0x00BC(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData02[0x3];                               		// 0x00BD(0x0003) MISSED OFFSET
	float                                              RotationErrorSourceRatio;                         		// 0x00C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TranslationErrorSourceRatio;                      		// 0x00C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ScaleErrorSourceRatio;                            		// 0x00C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxErrorPerTrackRatio;                            		// 0x00CC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PerturbationProbeSize;                            		// 0x00D0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                               		// 0x00D4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompress_PerTrackCompression");
		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveTrivialKeys
// 0x0010 (0x0050 - 0x0040)
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                       		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxAngleDiff;                                     		// 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxScaleDiff;                                     		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompress_RemoveTrivialKeys");
		return ptr;
	}

};


// Class Engine.AnimSingleNodeInstance
// 0x00E8 (0x0580 - 0x0498)
class UAnimSingleNodeInstance : public UAnimInstance
{
public:
	class UAnimationAsset*                             CurrentAsset;                                     		// 0x0498(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC8];                              		// 0x04A0(0x00C8) MISSED OFFSET
	struct FScriptDelegate                             PostEvaluateAnimEvent;                            		// 0x0568(0x0014) (CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference)
	unsigned char                                      UnknownData01[0x8];                               		// 0x0578(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimSingleNodeInstance");
		return ptr;
	}


	void StopAnim();
	void SetReverse(bool bInReverse);
	void SetPreviewCurveOverride(const struct FName& PoseName, float Value, bool bRemoveIfZero);
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);
	void SetPosition(float InPosition, bool bFireNotifies);
	void SetPlayRate(float InPlayRate);
	void SetPlaying(bool bIsPlaying);
	void SetLooping(bool bIsLooping);
	void SetBlendSpaceInput(const struct FVector& InBlendInput);
	void SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);
	float GetLength();
};


// Class Engine.AnimBlueprint
// 0x0020 (0x01B0 - 0x0190)
class UAnimBlueprint : public UBlueprint
{
public:
	class USkeleton*                                   TargetSkeleton;                                   		// 0x0190(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FAnimGroupInfo>                      Groups;                                           		// 0x0198(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                               		// 0x01A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimBlueprint");
		return ptr;
	}

};


// Class Engine.PoseWatch
// 0x0010 (0x0038 - 0x0028)
class UPoseWatch : public UObject
{
public:
	class UEdGraphNode*                                Node;                                             		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      PoseWatchColour;                                  		// 0x0030(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PoseWatch");
		return ptr;
	}

};


// Class Engine.AnimBlueprintGeneratedClass
// 0x0070 (0x0368 - 0x02F8)
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x02F8(0x0008) MISSED OFFSET
	TArray<struct FBakedAnimationStateMachine>         BakedStateMachines;                               		// 0x0300(0x0010) (CPF_ZeroConstructor)
	class USkeleton*                                   TargetSkeleton;                                   		// 0x0310(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FAnimNotifyEvent>                    AnimNotifies;                                     		// 0x0318(0x0010) (CPF_ZeroConstructor)
	int                                                RootAnimNodeIndex;                                		// 0x0328(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                               		// 0x032C(0x0004) MISSED OFFSET
	TArray<int>                                        OrderedSavedPoseIndices;                          		// 0x0330(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData02[0x18];                              		// 0x0340(0x0018) MISSED OFFSET
	TArray<struct FName>                               SyncGroupNames;                                   		// 0x0358(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimBlueprintGeneratedClass");
		return ptr;
	}

};


// Class Engine.VehicleAnimInstance
// 0x03E8 (0x0880 - 0x0498)
class UVehicleAnimInstance : public UAnimInstance
{
public:
	unsigned char                                      UnknownData00[0x3D8];                             		// 0x0498(0x03D8) MISSED OFFSET
	class UWheeledVehicleMovementComponent*            WheeledVehicleMovementComponent;                  		// 0x0870(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                               		// 0x0878(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VehicleAnimInstance");
		return ptr;
	}


	class AWheeledVehicle* GetVehicle();
};


// Class Engine.AnimMetaData
// 0x0000 (0x0028 - 0x0028)
class UAnimMetaData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimMetaData");
		return ptr;
	}

};


// Class Engine.AnimNotify_PlayParticleEffect
// 0x0048 (0x0080 - 0x0038)
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                       		// 0x0038(0x0008) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LocationOffset;                                   		// 0x0040(0x000C) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    RotationOffset;                                   		// 0x004C(0x000C) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                              		// 0x0058(0x0018) MISSED OFFSET
	unsigned char                                      Attached : 1;                                     		// 0x0070(0x0001) (CPF_Edit, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x7];                               		// 0x0071(0x0007) MISSED OFFSET
	struct FName                                       SocketName;                                       		// 0x0078(0x0008) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_PlayParticleEffect");
		return ptr;
	}

};


// Class Engine.AnimNotify_PlaySound
// 0x0020 (0x0058 - 0x0038)
class UAnimNotify_PlaySound : public UAnimNotify
{
public:
	class USoundBase*                                  Sound;                                            		// 0x0038(0x0008) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeMultiplier;                                 		// 0x0040(0x0004) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PitchMultiplier;                                  		// 0x0044(0x0004) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bFollow : 1;                                      		// 0x0048(0x0001) (CPF_Edit, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0049(0x0007) MISSED OFFSET
	struct FName                                       AttachName;                                       		// 0x0050(0x0008) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_PlaySound");
		return ptr;
	}

};


// Class Engine.AnimNotifyState
// 0x0008 (0x0030 - 0x0028)
class UAnimNotifyState : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotifyState");
		return ptr;
	}


	bool Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime);
	bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration);
	struct FString GetNotifyName();
};


// Class Engine.AnimNotifyState_TimedParticleEffect
// 0x0030 (0x0060 - 0x0030)
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{
public:
	class UParticleSystem*                             PSTemplate;                                       		// 0x0030(0x0008) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       SocketName;                                       		// 0x0038(0x0008) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LocationOffset;                                   		// 0x0040(0x000C) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    RotationOffset;                                   		// 0x004C(0x000C) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDestroyAtEnd : 1;                                		// 0x0058(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotifyState_TimedParticleEffect");
		return ptr;
	}

};


// Class Engine.AnimNotifyState_Trail
// 0x0030 (0x0060 - 0x0030)
class UAnimNotifyState_Trail : public UAnimNotifyState
{
public:
	class UParticleSystem*                             PSTemplate;                                       		// 0x0030(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       FirstSocketName;                                  		// 0x0038(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       SecondSocketName;                                 		// 0x0040(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ETrailWidthMode>            WidthScaleMode;                                   		// 0x0048(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0049(0x0007) MISSED OFFSET
	struct FName                                       WidthScaleCurve;                                  		// 0x0050(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRecycleSpawnedSystems : 1;                       		// 0x0058(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotifyState_Trail");
		return ptr;
	}


	class UParticleSystem* OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
};


// Class Engine.AnimSet
// 0x00C8 (0x00F0 - 0x0028)
class UAnimSet : public UObject
{
public:
	unsigned char                                      bAnimRotationOnly : 1;                            		// 0x0028(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0029(0x0007) MISSED OFFSET
	TArray<struct FName>                               TrackBoneNames;                                   		// 0x0030(0x0010) (CPF_ZeroConstructor)
	TArray<struct FAnimSetMeshLinkup>                  LinkupCache;                                      		// 0x0040(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<unsigned char>                              BoneUseAnimTranslation;                           		// 0x0050(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<unsigned char>                              ForceUseMeshTranslation;                          		// 0x0060(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FName>                               UseTranslationBoneNames;                          		// 0x0070(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FName>                               ForceMeshTranslationBoneNames;                    		// 0x0080(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FName                                       PreviewSkelMeshName;                              		// 0x0090(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       BestRatioSkelMeshName;                            		// 0x0098(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x50];                              		// 0x00A0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimSet");
		return ptr;
	}

};


// Class Engine.AssetImportData
// 0x0000 (0x0028 - 0x0028)
class UAssetImportData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AssetImportData");
		return ptr;
	}

};


// Class Engine.AssetUserData
// 0x0000 (0x0028 - 0x0028)
class UAssetUserData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AssetUserData");
		return ptr;
	}

};


// Class Engine.AutomationTestSettings
// 0x02F8 (0x0320 - 0x0028)
class UAutomationTestSettings : public UObject
{
public:
	struct FFilePath                                   AutomationTestmap;                                		// 0x0028(0x0010) (CPF_Edit, CPF_Config)
	TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps;                        		// 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FBuildPromotionTestSettings                 BuildPromotionTest;                               		// 0x0048(0x01F0) (CPF_Edit, CPF_Config)
	struct FMaterialEditorPromotionSettings            MaterialEditorPromotionTest;                      		// 0x0238(0x0030) (CPF_Edit, CPF_Config)
	struct FParticleEditorPromotionSettings            ParticleEditorPromotionTest;                      		// 0x0268(0x0010) (CPF_Edit, CPF_Config)
	struct FBlueprintEditorPromotionSettings           BlueprintEditorPromotionTest;                     		// 0x0278(0x0030) (CPF_Edit, CPF_Config)
	TArray<struct FString>                             EngineTestModules;                                		// 0x02A8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             EditorTestModules;                                		// 0x02B8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             TestLevelFolders;                                 		// 0x02C8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FOpenTestAsset>                      TestAssetsToOpen;                                 		// 0x02D8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FExternalToolDefinition>             ExternalTools;                                    		// 0x02E8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FEditorImportExportTestDefinition>   ImportExportTestDefinitions;                      		// 0x02F8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FLaunchOnTestSettings>               LaunchOnSettings;                                 		// 0x0308(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FIntPoint                                   DefaultScreenshotResolution;                      		// 0x0318(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AutomationTestSettings");
		return ptr;
	}

};


// Class Engine.NavEdgeProviderInterface
// 0x0000 (0x0028 - 0x0028)
class UNavEdgeProviderInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavEdgeProviderInterface");
		return ptr;
	}

};


// Class Engine.AvoidanceManager
// 0x00B8 (0x00E0 - 0x0028)
class UAvoidanceManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET
	float                                              DefaultTimeToLive;                                		// 0x0030(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              LockTimeAfterAvoid;                               		// 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              LockTimeAfterClean;                               		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DeltaTimeToPredict;                               		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ArtificialRadiusExpansion;                        		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              TestHeightDifference;                             		// 0x0044(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              HeightCheckMargin;                                		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x94];                              		// 0x004C(0x0094) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AvoidanceManager");
		return ptr;
	}


	bool RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight);
	int GetObjectCount();
	int GetNewAvoidanceUID();
	struct FVector GetAvoidanceVelocityIgnoringUID(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime, int IgnoreThisUID);
	struct FVector GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp);
	struct FVector GetAvoidanceVelocity(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime);
};


// Class Engine.BlendProfile
// 0x0020 (0x0048 - 0x0028)
class UBlendProfile : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET
	class USkeleton*                                   OwningSkeleton;                                   		// 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FBlendProfileBoneEntry>              ProfileEntries;                                   		// 0x0038(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlendProfile");
		return ptr;
	}

};


// Class Engine.LevelScriptBlueprint
// 0x0000 (0x0190 - 0x0190)
class ULevelScriptBlueprint : public UBlueprint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelScriptBlueprint");
		return ptr;
	}

};


// Class Engine.PlatformGameInstance
// 0x00B0 (0x01A0 - 0x00F0)
class UPlatformGameInstance : public UGameInstance
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x00F0(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    ApplicationHasReactivatedDelegate;                		// 0x00F8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillEnterBackgroundDelegate;           		// 0x0108(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasEnteredForegroundDelegate;          		// 0x0118(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillTerminateDelegate;                 		// 0x0128(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationRegisteredForRemoteNotificationsDelegate;		// 0x0138(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationRegisteredForUserNotificationsDelegate;		// 0x0148(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationFailedToRegisterForRemoteNotificationsDelegate;		// 0x0158(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationReceivedRemoteNotificationDelegate;    		// 0x0168(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationReceivedLocalNotificationDelegate;     		// 0x0178(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationReceivedScreenOrientationChangedNotificationDelegate;		// 0x0188(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                               		// 0x0198(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlatformGameInstance");
		return ptr;
	}


	void PlatformScreenOrientationChangedDelegate__DelegateSignature(TEnumAsByte<enum class EScreenOrientation> inScreenOrientation);
	void PlatformRegisteredForUserNotificationsDelegate__DelegateSignature(int inInt);
	void PlatformRegisteredForRemoteNotificationsDelegate__DelegateSignature(TArray<unsigned char> inArray);
	void PlatformReceivedRemoteNotificationDelegate__DelegateSignature(const struct FString& inString);
	void PlatformReceivedLocalNotificationDelegate__DelegateSignature(const struct FString& inString, int inInt);
	void PlatformFailedToRegisterForRemoteNotificationsDelegate__DelegateSignature(const struct FString& inString);
	void PlatformDelegate__DelegateSignature();
};


// Class Engine.BlueprintPlatformLibrary
// 0x0000 (0x0028 - 0x0028)
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlueprintPlatformLibrary");
		return ptr;
	}


	void STATIC_ScheduleLocalNotificationFromNow(int inSecondsFromNow, const struct FText& Title, const struct FText& Body, const struct FText& Action, const struct FString& ActivationEvent);
	void STATIC_ScheduleLocalNotificationAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const struct FText& Title, const struct FText& Body, const struct FText& Action, const struct FString& ActivationEvent);
	void STATIC_GetLaunchNotification(bool* NotificationLaunchedApp, struct FString* ActivationEvent, int* FireDate);
	void STATIC_ClearAllLocalNotifications();
	void STATIC_CancelLocalNotification(const struct FString& ActivationEvent);
};


// Class Engine.BlueprintSetLibrary
// 0x0000 (0x0028 - 0x0028)
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlueprintSetLibrary");
		return ptr;
	}


	void STATIC_Set_Union();
	void STATIC_Set_ToArray(TArray<int>* Result);
	void STATIC_Set_RemoveItems(TArray<int> Items);
	bool STATIC_Set_Remove(int Item);
	int STATIC_Set_Length();
	void STATIC_Set_Intersection();
	void STATIC_Set_Difference();
	bool STATIC_Set_Contains(int ItemToFind);
	void STATIC_Set_Clear();
	void STATIC_Set_AddItems(TArray<int> NewItems);
	void STATIC_Set_Add(int NewItem);
};


// Class Engine.DataTable
// 0x0058 (0x0080 - 0x0028)
class UDataTable : public UObject
{
public:
	class UScriptStruct*                               RowStruct;                                        		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                              		// 0x0030(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DataTable");
		return ptr;
	}

};


// Class Engine.DataTableFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DataTableFunctionLibrary");
		return ptr;
	}


	void STATIC_GetDataTableRowNames(class UDataTable* Table, TArray<struct FName>* OutRowNames);
	bool STATIC_GetDataTableRowFromName(class UDataTable* Table, const struct FName& RowName, struct FTableRowBase* OutRow);
	void STATIC_EvaluateCurveTableRow(class UCurveTable* CurveTable, const struct FName& RowName, float InXY, const struct FString& ContextString, TEnumAsByte<enum class EEvaluateCurveTableResult>* OutResult, float* OutXY);
};


// Class Engine.DebugDrawService
// 0x0000 (0x0028 - 0x0028)
class UDebugDrawService : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DebugDrawService");
		return ptr;
	}

};


// Class Engine.DeveloperSettings
// 0x0010 (0x0038 - 0x0028)
class UDeveloperSettings : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DeveloperSettings");
		return ptr;
	}

};


// Class Engine.CollisionProfile
// 0x0120 (0x0158 - 0x0038)
class UCollisionProfile : public UDeveloperSettings
{
public:
	TArray<struct FCollisionResponseTemplate>          Profiles;                                         		// 0x0038(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FCustomChannelSetup>                 DefaultChannelResponses;                          		// 0x0048(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FCustomProfile>                      EditProfiles;                                     		// 0x0058(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FRedirector>                         ProfileRedirects;                                 		// 0x0068(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FRedirector>                         CollisionChannelRedirects;                        		// 0x0078(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	unsigned char                                      UnknownData00[0xD0];                              		// 0x0088(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CollisionProfile");
		return ptr;
	}

};


// Class Engine.KismetSystemLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetSystemLibrary");
		return ptr;
	}


	void STATIC_StackTrace();
	bool STATIC_SphereTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool STATIC_SphereTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<enum class ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool STATIC_SphereTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<enum class ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool STATIC_SphereTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<enum class ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool STATIC_SphereTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool STATIC_SphereTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<enum class ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool STATIC_SphereTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<enum class ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool STATIC_SphereTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<enum class ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool STATIC_SphereOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_SphereOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TEnumAsByte<enum class EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_SphereOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool STATIC_SphereOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TEnumAsByte<enum class EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	void STATIC_ShowPlatformSpecificLeaderboardScreen(const struct FString& CategoryName);
	void STATIC_ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer);
	void STATIC_ShowInterstitialAd();
	void STATIC_ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);
	void STATIC_SetWindowTitle(const struct FText& Title);
	void STATIC_SetVolumeButtonsHandledBySystem(bool bEnabled);
	void STATIC_SetVectorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FVector& Value);
	void STATIC_SetUserActivity(const struct FUserActivity& UserActivity);
	void STATIC_SetTransformPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FTransform& Value);
	void STATIC_SetTextPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FText& Value);
	void STATIC_SetSuppressViewportTransitionMessage(class UObject* WorldContextObject, bool bState);
	void STATIC_SetStructurePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FGenericStruct& Value);
	void STATIC_SetStringPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FString& Value);
	void STATIC_SetRotatorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FRotator& Value);
	void STATIC_SetObjectPropertyByName(class UObject* Object, const struct FName& PropertyName, class UObject* Value);
	void STATIC_SetNamePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FName& Value);
	void STATIC_SetLinearColorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FLinearColor& Value);
	void STATIC_SetIntPropertyByName(class UObject* Object, const struct FName& PropertyName, int Value);
	void STATIC_SetInterfacePropertyByName(class UObject* Object, const struct FName& PropertyName, const TScriptInterface<class UInterface>& Value);
	void STATIC_SetFloatPropertyByName(class UObject* Object, const struct FName& PropertyName, float Value);
	void STATIC_SetCollisionProfileNameProperty(class UObject* Object, const struct FName& PropertyName, const struct FCollisionProfileName& Value);
	void STATIC_SetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, class UClass* Value);
	void STATIC_SetBytePropertyByName(class UObject* Object, const struct FName& PropertyName, unsigned char Value);
	void STATIC_SetBoolPropertyByName(class UObject* Object, const struct FName& PropertyName, bool Value);
	void STATIC_SetAssetPropertyByName(class UObject* Object, const struct FName& PropertyName, TAssetPtr<class UObject> Value);
	void STATIC_SetAssetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, TAssetPtr<class UClass> Value);
	void STATIC_RetriggerableDelay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	void STATIC_ResetGamepadAssignmentToController(int ControllerId);
	void STATIC_ResetGamepadAssignments();
	void STATIC_RegisterForRemoteNotifications();
	void STATIC_QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, TEnumAsByte<enum class EQuitPreference> QuitPreference);
	void STATIC_PrintWarning(const struct FString& inString);
	void STATIC_PrintText(class UObject* WorldContextObject, const struct FText& InText, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void STATIC_PrintString(class UObject* WorldContextObject, const struct FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void OnAssetLoaded__DelegateSignature(class UObject* Loaded);
	void OnAssetClassLoaded__DelegateSignature(class UClass* Loaded);
	void STATIC_MoveComponentTo(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte<enum class EMoveComponentAction> MoveAction, const struct FLatentActionInfo& LatentInfo);
	struct FText STATIC_MakeLiteralText(const struct FText& Value);
	struct FString STATIC_MakeLiteralString(const struct FString& Value);
	struct FName STATIC_MakeLiteralName(const struct FName& Value);
	int STATIC_MakeLiteralInt(int Value);
	float STATIC_MakeLiteralFloat(float Value);
	unsigned char STATIC_MakeLiteralByte(unsigned char Value);
	bool STATIC_MakeLiteralBool(bool Value);
	void STATIC_LoadInterstitialAd(int AdIdIndex);
	void STATIC_LoadAssetClass(class UObject* WorldContextObject, TAssetPtr<class UClass> AssetClass, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo);
	void STATIC_LoadAsset(class UObject* WorldContextObject, TAssetPtr<class UObject> Asset, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo);
	bool STATIC_LineTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);
	bool STATIC_LineTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<enum class ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);
	bool STATIC_LineTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<enum class ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);
	bool STATIC_LineTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<enum class ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);
	bool STATIC_LineTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits);
	bool STATIC_LineTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<enum class ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits);
	bool STATIC_LineTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<enum class ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits);
	bool STATIC_LineTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<enum class ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits);
	void STATIC_LaunchURL(const struct FString& URL);
	void STATIC_K2_UnPauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void STATIC_K2_UnPauseTimerDelegate(const struct FScriptDelegate& Delegate);
	void STATIC_K2_UnPauseTimer(class UObject* Object, const struct FString& FunctionName);
	bool STATIC_K2_TimerExistsHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	bool STATIC_K2_TimerExistsDelegate(const struct FScriptDelegate& Delegate);
	bool STATIC_K2_TimerExists(class UObject* Object, const struct FString& FunctionName);
	struct FTimerHandle STATIC_K2_SetTimerDelegate(const struct FScriptDelegate& Delegate, float Time, bool bLooping);
	struct FTimerHandle STATIC_K2_SetTimer(class UObject* Object, const struct FString& FunctionName, float Time, bool bLooping);
	void STATIC_K2_PauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void STATIC_K2_PauseTimerDelegate(const struct FScriptDelegate& Delegate);
	void STATIC_K2_PauseTimer(class UObject* Object, const struct FString& FunctionName);
	bool STATIC_K2_IsValidTimerHandle(const struct FTimerHandle& Handle);
	bool STATIC_K2_IsTimerPausedHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	bool STATIC_K2_IsTimerPausedDelegate(const struct FScriptDelegate& Delegate);
	bool STATIC_K2_IsTimerPaused(class UObject* Object, const struct FString& FunctionName);
	bool STATIC_K2_IsTimerActiveHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	bool STATIC_K2_IsTimerActiveDelegate(const struct FScriptDelegate& Delegate);
	bool STATIC_K2_IsTimerActive(class UObject* Object, const struct FString& FunctionName);
	struct FTimerHandle STATIC_K2_InvalidateTimerHandle(struct FTimerHandle* Handle);
	float STATIC_K2_GetTimerRemainingTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	float STATIC_K2_GetTimerRemainingTimeDelegate(const struct FScriptDelegate& Delegate);
	float STATIC_K2_GetTimerRemainingTime(class UObject* Object, const struct FString& FunctionName);
	float STATIC_K2_GetTimerElapsedTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	float STATIC_K2_GetTimerElapsedTimeDelegate(const struct FScriptDelegate& Delegate);
	float STATIC_K2_GetTimerElapsedTime(class UObject* Object, const struct FString& FunctionName);
	void STATIC_K2_ClearTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void STATIC_K2_ClearTimerDelegate(const struct FScriptDelegate& Delegate);
	void STATIC_K2_ClearTimer(class UObject* Object, const struct FString& FunctionName);
	void STATIC_K2_ClearAndInvalidateTimerHandle(class UObject* WorldContextObject, struct FTimerHandle* Handle);
	bool STATIC_IsValidClass(class UClass* Class);
	bool STATIC_IsValid(class UObject* Object);
	bool STATIC_IsStandalone(class UObject* WorldContextObject);
	bool STATIC_IsServer(class UObject* WorldContextObject);
	bool STATIC_IsPackagedForDistribution();
	bool STATIC_IsLoggedIn(class APlayerController* SpecificPlayer);
	bool STATIC_IsInterstitialAdRequested();
	bool STATIC_IsInterstitialAdAvailable();
	bool STATIC_IsDedicatedServer(class UObject* WorldContextObject);
	bool STATIC_IsControllerAssignedToGamepad(int ControllerId);
	void STATIC_HideAdBanner();
	bool STATIC_GetVolumeButtonsHandledBySystem();
	struct FString STATIC_GetUniqueDeviceId();
	bool STATIC_GetSupportedFullscreenResolutions(TArray<struct FIntPoint>* Resolutions);
	int STATIC_GetRenderingMaterialQualityLevel();
	int STATIC_GetRenderingDetailMode();
	TArray<struct FString> STATIC_GetPreferredLanguages();
	struct FString STATIC_GetPlatformUserName();
	struct FString STATIC_GetPathName(class UObject* Object);
	struct FString STATIC_GetObjectName(class UObject* Object);
	int STATIC_GetMinYResolutionForUI();
	int STATIC_GetMinYResolutionFor3DView();
	struct FString STATIC_GetLocalCurrencySymbol();
	struct FString STATIC_GetLocalCurrencyCode();
	float STATIC_GetGameTimeInSeconds(class UObject* WorldContextObject);
	struct FString STATIC_GetGameName();
	struct FString STATIC_GetGameBundleId();
	struct FString STATIC_GetEngineVersion();
	struct FString STATIC_GetDisplayName(class UObject* Object);
	bool STATIC_GetConvenientWindowedResolutions(TArray<struct FIntPoint>* Resolutions);
	void STATIC_GetComponentBounds(class USceneComponent* Component, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius);
	struct FString STATIC_GetClassDisplayName(class UClass* Class);
	int STATIC_GetAdIDCount();
	void STATIC_GetActorListFromComponentList(TArray<class UPrimitiveComponent*> ComponentList, class UClass* ActorClassFilter, TArray<class AActor*>* OutActorList);
	void STATIC_GetActorBounds(class AActor* Actor, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceCloseAdBanner();
	void STATIC_FlushPersistentDebugLines(class UObject* WorldContextObject);
	void STATIC_FlushDebugStrings(class UObject* WorldContextObject);
	void STATIC_ExecuteConsoleCommand(class UObject* WorldContextObject, const struct FString& Command, class APlayerController* SpecificPlayer);
	void STATIC_DrawDebugString(class UObject* WorldContextObject, const struct FVector& TextLocation, const struct FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration);
	void STATIC_DrawDebugSphere(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void STATIC_DrawDebugPoint(class UObject* WorldContextObject, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration);
	void STATIC_DrawDebugPlane(class UObject* WorldContextObject, const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration);
	void STATIC_DrawDebugLine(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void STATIC_DrawDebugFrustum(class UObject* WorldContextObject, const struct FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float Duration, float Thickness);
	void STATIC_DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration);
	void STATIC_DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FVector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration);
	void STATIC_DrawDebugCylinder(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void STATIC_DrawDebugCoordinateSystem(class UObject* WorldContextObject, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness);
	void STATIC_DrawDebugConeInDegrees(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void STATIC_DrawDebugCone(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void STATIC_DrawDebugCircle(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int NumSegments, const struct FLinearColor& LineColor, float Duration, float Thickness, const struct FVector& YAxis, const struct FVector& ZAxis, bool bDrawAxis);
	void STATIC_DrawDebugCapsule(class UObject* WorldContextObject, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void STATIC_DrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration);
	void STATIC_DrawDebugBox(class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, float Thickness);
	void STATIC_DrawDebugArrow(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, float Thickness);
	bool STATIC_DoesImplementInterface(class UObject* TestObject, class UClass* Interface);
	void STATIC_Delay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	void STATIC_CreateCopyForUndoBuffer(class UObject* ObjectToModify);
	class UObject* STATIC_Conv_InterfaceToObject(const TScriptInterface<class UInterface>& Interface);
	class UObject* STATIC_Conv_AssetToObject(TAssetPtr<class UObject> Asset);
	class UClass* STATIC_Conv_AssetClassToClass(TAssetPtr<class UClass> AssetClass);
	void STATIC_ControlScreensaver(bool bAllowScreenSaver);
	bool STATIC_ComponentOverlapComponents_NEW(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_ComponentOverlapComponents_DEPRECATED(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TEnumAsByte<enum class EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_ComponentOverlapActors_NEW(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool STATIC_ComponentOverlapActors_DEPRECATED(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TEnumAsByte<enum class EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	void STATIC_CollectGarbage();
	bool STATIC_CapsuleTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool STATIC_CapsuleTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<enum class ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool STATIC_CapsuleTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<enum class ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool STATIC_CapsuleTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<enum class ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool STATIC_CapsuleTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool STATIC_CapsuleTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<enum class ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool STATIC_CapsuleTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<enum class ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool STATIC_CapsuleTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<enum class ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool STATIC_CapsuleOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_CapsuleOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TEnumAsByte<enum class EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_CapsuleOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool STATIC_CapsuleOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TEnumAsByte<enum class EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool STATIC_CanLaunchURL(const struct FString& URL);
	bool STATIC_BoxTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool STATIC_BoxTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<enum class ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool STATIC_BoxTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool STATIC_BoxTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<enum class ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool STATIC_BoxOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_BoxOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TEnumAsByte<enum class EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_BoxOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool STATIC_BoxOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TEnumAsByte<enum class EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	struct FDebugFloatHistory STATIC_AddFloatHistorySample(float Value, const struct FDebugFloatHistory& FloatHistory);
};


// Class Engine.GameplayStatics
// 0x0000 (0x0028 - 0x0028)
class UGameplayStatics : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameplayStatics");
		return ptr;
	}


	void STATIC_UnloadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, const struct FLatentActionInfo& LatentInfo);
	bool STATIC_SuggestProjectileVelocity_CustomArc(class UObject* WorldContextObject, const struct FVector& StartPos, const struct FVector& EndPos, float OverrideGravityZ, float ArcParam, struct FVector* OutLaunchVelocity);
	class UAudioComponent* STATIC_SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<enum class EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings);
	class UAudioComponent* STATIC_SpawnSoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings);
	class UAudioComponent* STATIC_SpawnSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition);
	class UObject* STATIC_SpawnObject(class UClass* ObjectClass, class UObject* Outer);
	class UParticleSystemComponent* STATIC_SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<enum class EAttachLocation> LocationType, bool bAutoDestroy);
	class UParticleSystemComponent* STATIC_SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, bool bAutoDestroy);
	class UAudioComponent* STATIC_SpawnDialogueAttached(class UDialogueWave* Dialogue, const struct FDialogueContext& Context, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<enum class EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	class UAudioComponent* STATIC_SpawnDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	class UAudioComponent* STATIC_SpawnDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	class UDecalComponent* STATIC_SpawnDecalAttached(class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<enum class EAttachLocation> LocationType, float LifeSpan);
	class UDecalComponent* STATIC_SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan);
	void STATIC_SetWorldOriginLocation(class UObject* WorldContextObject, const struct FIntVector& NewLocation);
	void STATIC_SetSubtitlesEnabled(bool bEnabled);
	void STATIC_SetSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);
	void STATIC_SetPlayerControllerID(class APlayerController* Player, int ControllerId);
	void STATIC_SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation);
	void STATIC_SetGlobalPitchModulation(class UObject* WorldContextObject, float PitchModulation, float TimeSec);
	void STATIC_SetGlobalListenerFocusParameters(class UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);
	bool STATIC_SetGamePaused(class UObject* WorldContextObject, bool bPaused);
	void STATIC_SetBaseSoundMix(class UObject* WorldContextObject, class USoundMix* InSoundMix);
	bool STATIC_SaveGameToSlot(class USaveGame* SaveGameObject, const struct FString& SlotName, int UserIndex);
	void STATIC_RemovePlayer(class APlayerController* Player, bool bDestroyPawn);
	struct FVector STATIC_RebaseZeroOriginOntoLocal(class UObject* WorldContextObject, const struct FVector& WorldLocation);
	struct FVector STATIC_RebaseLocalOriginOntoZero(class UObject* WorldContextObject, const struct FVector& WorldLocation);
	void STATIC_PushSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);
	bool STATIC_ProjectWorldToScreen(class APlayerController* Player, const struct FVector& WorldPosition, bool bPlayerViewportRelative, struct FVector2D* ScreenPosition);
	bool STATIC_PredictProjectilePath(class UObject* WorldContextObject, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, TArray<TEnumAsByte<enum class EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<enum class EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination);
	void STATIC_PopSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);
	void STATIC_PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);
	void STATIC_PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings);
	void STATIC_PlaySound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings);
	void STATIC_PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	void STATIC_PlayDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	struct FString STATIC_ParseOption(const struct FString& Options, const struct FString& Key);
	void STATIC_OpenLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bAbsolute, const struct FString& Options);
	struct FHitResult STATIC_MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, const struct FVector& Location, const struct FVector& ImpactPoint, const struct FVector& Normal, const struct FVector& ImpactNormal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, const struct FName& HitBoneName, int HitItem, int FaceIndex, const struct FVector& TraceStart, const struct FVector& TraceEnd);
	void STATIC_LoadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo);
	class USaveGame* STATIC_LoadGameFromSlot(const struct FString& SlotName, int UserIndex);
	bool STATIC_IsGamePaused(class UObject* WorldContextObject);
	bool STATIC_HasOption(const struct FString& Options, const struct FString& InKey);
	int STATIC_GrassOverlappingSphereCount(class UObject* WorldContextObject, class UStaticMesh* StaticMesh, const struct FVector& CenterPosition, float Radius);
	struct FIntVector STATIC_GetWorldOriginLocation(class UObject* WorldContextObject);
	float STATIC_GetWorldDeltaSeconds(class UObject* WorldContextObject);
	float STATIC_GetUnpausedTimeSeconds(class UObject* WorldContextObject);
	float STATIC_GetTimeSeconds(class UObject* WorldContextObject);
	TEnumAsByte<enum class EPhysicalSurface> STATIC_GetSurfaceType(const struct FHitResult& Hit);
	class ULevelStreaming* STATIC_GetStreamingLevel(class UObject* WorldContextObject, const struct FName& PackageName);
	float STATIC_GetRealTimeSeconds(class UObject* WorldContextObject);
	class APawn* STATIC_GetPlayerPawn(class UObject* WorldContextObject, int PlayerIndex);
	int STATIC_GetPlayerControllerID(class APlayerController* Player);
	class APlayerController* STATIC_GetPlayerController(class UObject* WorldContextObject, int PlayerIndex);
	class ACharacter* STATIC_GetPlayerCharacter(class UObject* WorldContextObject, int PlayerIndex);
	class APlayerCameraManager* STATIC_GetPlayerCameraManager(class UObject* WorldContextObject, int PlayerIndex);
	struct FString STATIC_GetPlatformName();
	class UClass* STATIC_GetObjectClass(class UObject* Object);
	void STATIC_GetKeyValue(const struct FString& Pair, struct FString* Key, struct FString* Value);
	int STATIC_GetIntOption(const struct FString& Options, const struct FString& Key, int DefaultValue);
	float STATIC_GetGlobalTimeDilation(class UObject* WorldContextObject);
	class AGameStateBase* STATIC_GetGameState(class UObject* WorldContextObject);
	class AGameModeBase* STATIC_GetGameMode(class UObject* WorldContextObject);
	class UGameInstance* STATIC_GetGameInstance(class UObject* WorldContextObject);
	class UReverbEffect* STATIC_GetCurrentReverbEffect(class UObject* WorldContextObject);
	struct FString STATIC_GetCurrentLevelName(class UObject* WorldContextObject, bool bRemovePrefixString);
	float STATIC_GetAudioTimeSeconds(class UObject* WorldContextObject);
	void STATIC_GetAllActorsWithTag(class UObject* WorldContextObject, const struct FName& Tag, TArray<class AActor*>* OutActors);
	void STATIC_GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<class AActor*>* OutActors);
	void STATIC_GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, TArray<class AActor*>* OutActors);
	void STATIC_GetActorArrayBounds(TArray<class AActor*> Actors, bool bOnlyCollidingComponents, struct FVector* Center, struct FVector* BoxExtent);
	struct FVector STATIC_GetActorArrayAverageLocation(TArray<class AActor*> Actors);
	void STATIC_GetAccurateRealTime(class UObject* WorldContextObject, int* Seconds, float* PartialSeconds);
	void STATIC_FlushLevelStreaming(class UObject* WorldContextObject);
	class AActor* STATIC_FinishSpawningActor(class AActor* Actor, const struct FTransform& SpawnTransform);
	bool STATIC_FindCollisionUV(const struct FHitResult& Hit, int UVChannel, struct FVector2D* UV);
	void STATIC_EnableLiveStreaming(bool Enable);
	bool STATIC_DoesSaveGameExist(const struct FString& SlotName, int UserIndex);
	bool STATIC_DeprojectScreenToWorld(class APlayerController* Player, const struct FVector2D& ScreenPosition, struct FVector* WorldPosition, struct FVector* WorldDirection);
	bool STATIC_DeleteGameInSlot(const struct FString& SlotName, int UserIndex);
	void STATIC_DeactivateReverbEffect(class UObject* WorldContextObject, const struct FName& TagName);
	class UAudioComponent* STATIC_CreateSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition);
	class USaveGame* STATIC_CreateSaveGameObjectFromBlueprint(class UBlueprint* SaveGameBlueprint);
	class USaveGame* STATIC_CreateSaveGameObject(class UClass* SaveGameClass);
	class APlayerController* STATIC_CreatePlayer(class UObject* WorldContextObject, int ControllerId, bool bSpawnPawn);
	void STATIC_ClearSoundMixModifiers(class UObject* WorldContextObject);
	void STATIC_ClearSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float FadeOutTime);
	void STATIC_CancelAsyncLoading();
	void STATIC_BreakHitResult(const struct FHitResult& Hit, bool* bBlockingHit, bool* bInitialOverlap, float* Time, struct FVector* Location, struct FVector* ImpactPoint, struct FVector* Normal, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, struct FName* HitBoneName, int* HitItem, int* FaceIndex, struct FVector* TraceStart, struct FVector* TraceEnd);
	bool STATIC_BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, const struct FVector& StartLocation, const struct FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<enum class ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug, struct FVector* TossVelocity);
	class AActor* STATIC_BeginSpawningActorFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, bool bNoCollisionFail, class AActor* Owner);
	class AActor* STATIC_BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, const struct FTransform& SpawnTransform, bool bNoCollisionFail);
	class AActor* STATIC_BeginDeferredActorSpawnFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, TEnumAsByte<enum class ESpawnActorCollisionHandlingMethod> CollisionHandlingOverride, class AActor* Owner);
	bool STATIC_AreSubtitlesEnabled();
	bool STATIC_AreAnyListenersWithinRange(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange);
	bool STATIC_ApplyRadialDamageWithFalloff(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, TEnumAsByte<enum class ECollisionChannel> DamagePreventionChannel);
	bool STATIC_ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<enum class ECollisionChannel> DamagePreventionChannel);
	void STATIC_ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass);
	void STATIC_ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass);
	void STATIC_ActivateReverbEffect(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, const struct FName& TagName, float Priority, float Volume, float FadeTime);
};


// Class Engine.HeadMountedDisplayFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HeadMountedDisplayFunctionLibrary");
		return ptr;
	}


	void STATIC_SetWorldToMetersScale(class UObject* WorldContext, float NewScale);
	void STATIC_SetTrackingOrigin(TEnumAsByte<enum class EHMDTrackingOrigin> Origin);
	void STATIC_SetClippingPlanes(float Near, float Far);
	void STATIC_ResetOrientationAndPosition(float Yaw, TEnumAsByte<enum class EOrientPositionSelector> Options);
	bool STATIC_IsInLowPersistenceMode();
	bool STATIC_IsHeadMountedDisplayEnabled();
	bool STATIC_HasValidTrackingPosition();
	float STATIC_GetWorldToMetersScale(class UObject* WorldContext);
	void STATIC_GetVRFocusState(bool* bUseFocus, bool* bHasFocus);
	void STATIC_GetTrackingSensorParameters(int Index, struct FVector* Origin, struct FRotator* Rotation, float* LeftFOV, float* RightFOV, float* TopFOV, float* BottomFOV, float* Distance, float* NearPlane, float* FarPlane, bool* IsActive);
	TEnumAsByte<enum class EHMDTrackingOrigin> STATIC_GetTrackingOrigin();
	float STATIC_GetScreenPercentage();
	void STATIC_GetPositionalTrackingCameraParameters(struct FVector* CameraOrigin, struct FRotator* CameraRotation, float* HFOV, float* VFOV, float* CameraDistance, float* NearPlane, float* FarPlane);
	void STATIC_GetOrientationAndPosition(struct FRotator* DeviceRotation, struct FVector* DevicePosition);
	int STATIC_GetNumOfTrackingSensors();
	struct FName STATIC_GetHMDDeviceName();
	void STATIC_EnableLowPersistenceMode(bool bEnable);
	bool STATIC_EnableHMD(bool bEnable);
};


// Class Engine.KismetArrayLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetArrayLibrary");
		return ptr;
	}


	void STATIC_SetArrayPropertyByName(class UObject* Object, const struct FName& PropertyName, TArray<int> Value);
	void STATIC_FilterArray(TArray<class AActor*> TargetArray, class UClass* FilterClass, TArray<class AActor*>* FilteredArray);
	void STATIC_Array_Shuffle(TArray<int> TargetArray);
	void STATIC_Array_Set(TArray<int> TargetArray, int Index, int Item, bool bSizeToFit);
	void STATIC_Array_Resize(TArray<int> TargetArray, int Size);
	bool STATIC_Array_RemoveItem(TArray<int> TargetArray, int Item);
	void STATIC_Array_Remove(TArray<int> TargetArray, int IndexToRemove);
	int STATIC_Array_Length(TArray<int> TargetArray);
	int STATIC_Array_LastIndex(TArray<int> TargetArray);
	bool STATIC_Array_IsValidIndex(TArray<int> TargetArray, int IndexToTest);
	void STATIC_Array_Insert(TArray<int> TargetArray, int NewItem, int Index);
	void STATIC_Array_Get(TArray<int> TargetArray, int Index, int* Item);
	int STATIC_Array_Find(TArray<int> TargetArray, int ItemToFind);
	bool STATIC_Array_Contains(TArray<int> TargetArray, int ItemToFind);
	void STATIC_Array_Clear(TArray<int> TargetArray);
	void STATIC_Array_Append(TArray<int> TargetArray, TArray<int> SourceArray);
	int STATIC_Array_AddUnique(TArray<int> TargetArray, int NewItem);
	int STATIC_Array_Add(TArray<int> TargetArray, int NewItem);
};


// Class Engine.KismetGuidLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetGuidLibrary");
		return ptr;
	}


	void STATIC_Parse_StringToGuid(const struct FString& GuidString, struct FGuid* OutGuid, bool* Success);
	bool STATIC_NotEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B);
	struct FGuid STATIC_NewGuid();
	bool STATIC_IsValid_Guid(const struct FGuid& InGuid);
	void STATIC_Invalidate_Guid(struct FGuid* InGuid);
	bool STATIC_EqualEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B);
	struct FString STATIC_Conv_GuidToString(const struct FGuid& InGuid);
};


// Class Engine.KismetInputLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetInputLibrary");
		return ptr;
	}


	bool STATIC_PointerEvent_IsTouchEvent(const struct FPointerEvent& Input);
	bool STATIC_PointerEvent_IsMouseButtonDown(const struct FPointerEvent& Input, const struct FKey& MouseButton);
	float STATIC_PointerEvent_GetWheelDelta(const struct FPointerEvent& Input);
	int STATIC_PointerEvent_GetUserIndex(const struct FPointerEvent& Input);
	int STATIC_PointerEvent_GetTouchpadIndex(const struct FPointerEvent& Input);
	struct FVector2D STATIC_PointerEvent_GetScreenSpacePosition(const struct FPointerEvent& Input);
	int STATIC_PointerEvent_GetPointerIndex(const struct FPointerEvent& Input);
	struct FVector2D STATIC_PointerEvent_GetLastScreenSpacePosition(const struct FPointerEvent& Input);
	struct FVector2D STATIC_PointerEvent_GetGestureDelta(const struct FPointerEvent& Input);
	struct FKey STATIC_PointerEvent_GetEffectingButton(const struct FPointerEvent& Input);
	struct FVector2D STATIC_PointerEvent_GetCursorDelta(const struct FPointerEvent& Input);
	bool STATIC_Key_IsVectorAxis(const struct FKey& Key);
	bool STATIC_Key_IsMouseButton(const struct FKey& Key);
	bool STATIC_Key_IsModifierKey(const struct FKey& Key);
	bool STATIC_Key_IsKeyboardKey(const struct FKey& Key);
	bool STATIC_Key_IsGamepadKey(const struct FKey& Key);
	bool STATIC_Key_IsFloatAxis(const struct FKey& Key);
	struct FText STATIC_Key_GetDisplayName(const struct FKey& Key);
	bool STATIC_InputEvent_IsShiftDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsRightShiftDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsRightControlDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsRightCommandDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsRightAltDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsRepeat(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsLeftShiftDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsLeftControlDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsLeftCommandDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsLeftAltDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsControlDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsCommandDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsAltDown(const struct FInputEvent& Input);
	int STATIC_GetUserIndex(const struct FKeyEvent& Input);
	struct FKey STATIC_GetKey(const struct FKeyEvent& Input);
	float STATIC_GetAnalogValue(const struct FAnalogInputEvent& Input);
	bool STATIC_EqualEqual_KeyKey(const struct FKey& A, const struct FKey& B);
	bool STATIC_EqualEqual_InputChordInputChord(const struct FInputChord& A, const struct FInputChord& B);
	int STATIC_ControllerEvent_GetUserIndex(const struct FControllerEvent& Input);
	struct FKey STATIC_ControllerEvent_GetEffectingButton(const struct FControllerEvent& Input);
	float STATIC_ControllerEvent_GetAnalogValue(const struct FControllerEvent& Input);
	void STATIC_CalibrateTilt();
};


// Class Engine.KismetMaterialLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetMaterialLibrary");
		return ptr;
	}


	void STATIC_SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, const struct FLinearColor& ParameterValue);
	void STATIC_SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, float ParameterValue);
	struct FLinearColor STATIC_GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName);
	float STATIC_GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName);
	class UMaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent);
};


// Class Engine.KismetMathLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetMathLibrary");
		return ptr;
	}


	int STATIC_Xor_IntInt(int A, int B);
	float STATIC_VSizeSquared(const struct FVector& A);
	float STATIC_VSize2DSquared(const struct FVector2D& A);
	float STATIC_VSize2D(const struct FVector2D& A);
	float STATIC_VSize(const struct FVector& A);
	struct FVector STATIC_VLerp(const struct FVector& A, const struct FVector& B, float Alpha);
	struct FVector STATIC_VInterpTo_Constant(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
	struct FVector STATIC_VInterpTo(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
	struct FVector STATIC_VectorSpringInterp(const struct FVector& Current, const struct FVector& Target, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, struct FVectorSpringState* SpringState);
	struct FVector2D STATIC_Vector2DInterpTo_Constant(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);
	struct FVector2D STATIC_Vector2DInterpTo(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);
	struct FVector STATIC_VEase(const struct FVector& A, const struct FVector& B, float Alpha, TEnumAsByte<enum class EEasingFunc> EasingFunc, float BlendExp, int Steps);
	struct FDateTime STATIC_UtcNow();
	struct FVector STATIC_TransformLocation(const struct FTransform& T, const struct FVector& Location);
	struct FVector STATIC_TransformDirection(const struct FTransform& T, const struct FVector& Direction);
	struct FDateTime STATIC_Today();
	struct FTransform STATIC_TLerp(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<enum class ELerpInterpolationMode> InterpMode);
	struct FTransform STATIC_TInterpTo(const struct FTransform& Current, const struct FTransform& Target, float DeltaTime, float InterpSpeed);
	struct FTimespan STATIC_TimespanZeroValue();
	float STATIC_TimespanRatio(const struct FTimespan& A, const struct FTimespan& B);
	struct FTimespan STATIC_TimespanMinValue();
	struct FTimespan STATIC_TimespanMaxValue();
	bool STATIC_TimespanFromString(const struct FString& TimespanString, struct FTimespan* Result);
	struct FTransform STATIC_TEase(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<enum class EEasingFunc> EasingFunc, float BlendExp, int Steps);
	float STATIC_Tan(float A);
	struct FVector STATIC_Subtract_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Subtract_VectorInt(const struct FVector& A, int B);
	struct FVector STATIC_Subtract_VectorFloat(const struct FVector& A, float B);
	struct FVector2D STATIC_Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D STATIC_Subtract_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan STATIC_Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	int STATIC_Subtract_IntInt(int A, int B);
	float STATIC_Subtract_FloatFloat(float A, float B);
	struct FDateTime STATIC_Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	struct FTimespan STATIC_Subtract_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	unsigned char STATIC_Subtract_ByteByte(unsigned char A, unsigned char B);
	float STATIC_Square(float A);
	float STATIC_Sqrt(float A);
	float STATIC_Sin(float A);
	int STATIC_SignOfInteger(int A);
	float STATIC_SignOfFloat(float A);
	void STATIC_SetRandomStreamSeed(int NewSeed, struct FRandomStream* Stream);
	struct FVector STATIC_SelectVector(const struct FVector& A, const struct FVector& B, bool bPickA);
	struct FTransform STATIC_SelectTransform(const struct FTransform& A, const struct FTransform& B, bool bPickA);
	struct FString STATIC_SelectString(const struct FString& A, const struct FString& B, bool bPickA);
	struct FRotator STATIC_SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA);
	class UObject* STATIC_SelectObject(class UObject* A, class UObject* B, bool bSelectA);
	int STATIC_SelectInt(int A, int B, bool bPickA);
	float STATIC_SelectFloat(float A, float B, bool bPickA);
	struct FLinearColor STATIC_SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA);
	class UClass* STATIC_SelectClass(class UClass* A, class UClass* B, bool bSelectA);
	void STATIC_SeedRandomStream(struct FRandomStream* Stream);
	int STATIC_Round(float A);
	struct FRotator STATIC_RotatorFromAxisAndAngle(const struct FVector& Axis, float Angle);
	struct FVector STATIC_RotateAngleAxis(const struct FVector& InVect, float AngleDeg, const struct FVector& Axis);
	struct FRotator STATIC_RLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath);
	struct FRotator STATIC_RInterpTo_Constant(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
	struct FRotator STATIC_RInterpTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
	void STATIC_RGBToHSV_Vector(const struct FLinearColor& RGB, struct FLinearColor* HSV);
	void STATIC_RGBToHSV(const struct FLinearColor& InColor, float* H, float* S, float* V, float* A);
	void STATIC_ResetVectorSpringState(struct FVectorSpringState* SpringState);
	void STATIC_ResetRandomStream(const struct FRandomStream& Stream);
	void STATIC_ResetFloatSpringState(struct FFloatSpringState* SpringState);
	struct FRotator STATIC_REase(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, TEnumAsByte<enum class EEasingFunc> EasingFunc, float BlendExp, int Steps);
	struct FVector STATIC_RandomUnitVectorInConeWithYawAndPitch(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);
	struct FVector STATIC_RandomUnitVectorInCone(const struct FVector& ConeDir, float ConeHalfAngle);
	struct FVector STATIC_RandomUnitVectorFromStream(const struct FRandomStream& Stream);
	struct FVector STATIC_RandomUnitVector();
	struct FRotator STATIC_RandomRotatorFromStream(bool bRoll, const struct FRandomStream& Stream);
	struct FRotator STATIC_RandomRotator(bool bRoll);
	struct FVector STATIC_RandomPointInBoundingBox(const struct FVector& Origin, const struct FVector& BoxExtent);
	int STATIC_RandomIntegerInRangeFromStream(int Min, int Max, const struct FRandomStream& Stream);
	int STATIC_RandomIntegerInRange(int Min, int Max);
	int STATIC_RandomIntegerFromStream(int Max, const struct FRandomStream& Stream);
	int STATIC_RandomInteger(int Max);
	float STATIC_RandomFloatInRangeFromStream(float Min, float Max, const struct FRandomStream& Stream);
	float STATIC_RandomFloatInRange(float Min, float Max);
	float STATIC_RandomFloatFromStream(const struct FRandomStream& Stream);
	float STATIC_RandomFloat();
	bool STATIC_RandomBoolWithWeightFromStream(float Weight, const struct FRandomStream& RandomStream);
	bool STATIC_RandomBoolWithWeight(float Weight);
	bool STATIC_RandomBoolFromStream(const struct FRandomStream& Stream);
	bool STATIC_RandomBool();
	float STATIC_RadiansToDegrees(float A);
	struct FVector STATIC_ProjectVectorOnToVector(const struct FVector& V, const struct FVector& Target);
	struct FVector STATIC_ProjectVectorOnToPlane(const struct FVector& V, const struct FVector& PlaneNormal);
	struct FVector STATIC_ProjectPointOnToPlane(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNormal);
	bool STATIC_PointsAreCoplanar(TArray<struct FVector> Points, float Tolerance);
	int STATIC_Percent_IntInt(int A, int B);
	float STATIC_Percent_FloatFloat(float A, float B);
	unsigned char STATIC_Percent_ByteByte(unsigned char A, unsigned char B);
	int STATIC_Or_IntInt(int A, int B);
	struct FDateTime STATIC_Now();
	bool STATIC_NotEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);
	bool STATIC_NotEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance);
	bool STATIC_NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);
	bool STATIC_NotEqual_ObjectObject(class UObject* A, class UObject* B);
	bool STATIC_NotEqual_NameName(const struct FName& A, const struct FName& B);
	bool STATIC_NotEqual_IntInt(int A, int B);
	bool STATIC_NotEqual_FloatFloat(float A, float B);
	bool STATIC_NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_NotEqual_ClassClass(class UClass* A, class UClass* B);
	bool STATIC_NotEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_NotEqual_BoolBool(bool A, bool B);
	bool STATIC_Not_PreBool(bool A);
	int STATIC_Not_Int(int A);
	float STATIC_NormalizeToRange(float Value, float RangeMin, float RangeMax);
	struct FRotator STATIC_NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B);
	float STATIC_NormalizeAxis(float Angle);
	struct FVector2D STATIC_Normal2D(const struct FVector2D& A);
	struct FVector STATIC_Normal(const struct FVector& A);
	struct FVector STATIC_NegateVector(const struct FVector& A);
	struct FRotator STATIC_NegateRotator(const struct FRotator& A);
	bool STATIC_NearlyEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);
	bool STATIC_NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);
	float STATIC_MultiplyMultiply_FloatFloat(float Base, float Exp);
	float STATIC_MultiplyByPi(float Value);
	struct FVector STATIC_Multiply_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Multiply_VectorInt(const struct FVector& A, int B);
	struct FVector STATIC_Multiply_VectorFloat(const struct FVector& A, float B);
	struct FVector2D STATIC_Multiply_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D STATIC_Multiply_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan STATIC_Multiply_TimespanFloat(const struct FTimespan& A, float Scalar);
	struct FRotator STATIC_Multiply_RotatorInt(const struct FRotator& A, int B);
	struct FRotator STATIC_Multiply_RotatorFloat(const struct FRotator& A, float B);
	struct FLinearColor STATIC_Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	struct FLinearColor STATIC_Multiply_LinearColorFloat(const struct FLinearColor& A, float B);
	int STATIC_Multiply_IntInt(int A, int B);
	float STATIC_Multiply_IntFloat(int A, float B);
	float STATIC_Multiply_FloatFloat(float A, float B);
	unsigned char STATIC_Multiply_ByteByte(unsigned char A, unsigned char B);
	struct FVector STATIC_MirrorVectorByNormal(const struct FVector& InVect, const struct FVector& InNormal);
	void STATIC_MinOfIntArray(TArray<int> IntArray, int* IndexOfMinValue, int* MinValue);
	void STATIC_MinOfFloatArray(TArray<float> FloatArray, int* IndexOfMinValue, float* MinValue);
	void STATIC_MinOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMinValue, unsigned char* MinValue);
	void STATIC_MinimumAreaRectangle(class UObject* WorldContextObject, TArray<struct FVector> InVerts, const struct FVector& SampleSurfaceNormal, bool bDebugDraw, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY);
	int STATIC_Min(int A, int B);
	void STATIC_MaxOfIntArray(TArray<int> IntArray, int* IndexOfMaxValue, int* MaxValue);
	void STATIC_MaxOfFloatArray(TArray<float> FloatArray, int* IndexOfMaxValue, float* MaxValue);
	void STATIC_MaxOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMaxValue, unsigned char* MaxValue);
	int STATIC_Max(int A, int B);
	float STATIC_MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	float STATIC_MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	struct FVector2D STATIC_MakeVector2D(float X, float Y);
	struct FVector STATIC_MakeVector(float X, float Y, float Z);
	struct FTransform STATIC_MakeTransform(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale);
	struct FTimespan STATIC_MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds);
	struct FRotator STATIC_MakeRotFromZY(const struct FVector& Z, const struct FVector& Y);
	struct FRotator STATIC_MakeRotFromZX(const struct FVector& Z, const struct FVector& X);
	struct FRotator STATIC_MakeRotFromZ(const struct FVector& Z);
	struct FRotator STATIC_MakeRotFromYZ(const struct FVector& Y, const struct FVector& Z);
	struct FRotator STATIC_MakeRotFromYX(const struct FVector& Y, const struct FVector& X);
	struct FRotator STATIC_MakeRotFromY(const struct FVector& Y);
	struct FRotator STATIC_MakeRotFromXZ(const struct FVector& X, const struct FVector& Z);
	struct FRotator STATIC_MakeRotFromXY(const struct FVector& X, const struct FVector& Y);
	struct FRotator STATIC_MakeRotFromX(const struct FVector& X);
	struct FRotator STATIC_MakeRotator(float Roll, float Pitch, float Yaw);
	struct FRotator STATIC_MakeRotationFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up);
	struct FRandomStream STATIC_MakeRandomStream(int InitialSeed);
	float STATIC_MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);
	struct FPlane STATIC_MakePlaneFromPointAndNormal(const struct FVector& Point, const struct FVector& Normal);
	struct FDateTime STATIC_MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond);
	struct FLinearColor STATIC_MakeColor(float R, float G, float B, float A);
	float STATIC_Loge(float A);
	bool STATIC_LinePlaneIntersection_OriginNormal(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& PlaneOrigin, const struct FVector& PlaneNormal, float* T, struct FVector* Intersection);
	bool STATIC_LinePlaneIntersection(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FPlane& APlane, float* T, struct FVector* Intersection);
	struct FLinearColor STATIC_LinearColorLerpUsingHSV(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);
	struct FLinearColor STATIC_LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);
	struct FVector STATIC_LessLess_VectorRotator(const struct FVector& A, const struct FRotator& B);
	bool STATIC_LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_LessEqual_IntInt(int A, int B);
	bool STATIC_LessEqual_FloatFloat(float A, float B);
	bool STATIC_LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_LessEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_Less_IntInt(int A, int B);
	bool STATIC_Less_FloatFloat(float A, float B);
	bool STATIC_Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_Less_ByteByte(unsigned char A, unsigned char B);
	float STATIC_Lerp(float A, float B, float Alpha);
	bool STATIC_IsMorning(const struct FDateTime& A);
	bool STATIC_IsLeapYear(int Year);
	bool STATIC_IsAfternoon(const struct FDateTime& A);
	struct FTransform STATIC_InvertTransform(const struct FTransform& T);
	struct FVector STATIC_InverseTransformLocation(const struct FTransform& T, const struct FVector& Location);
	struct FVector STATIC_InverseTransformDirection(const struct FTransform& T, const struct FVector& Direction);
	float STATIC_InverseLerp(float A, float B, float Value);
	bool STATIC_InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);
	float STATIC_Hypotenuse(float Width, float Height);
	void STATIC_HSVToRGB_Vector(const struct FLinearColor& HSV, struct FLinearColor* RGB);
	struct FLinearColor STATIC_HSVToRGB(float H, float S, float V, float A);
	float STATIC_GridSnap_Float(float Location, float GridSize);
	struct FVector STATIC_GreaterGreater_VectorRotator(const struct FVector& A, const struct FRotator& B);
	bool STATIC_GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_GreaterEqual_IntInt(int A, int B);
	bool STATIC_GreaterEqual_FloatFloat(float A, float B);
	bool STATIC_GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_GreaterEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_Greater_IntInt(int A, int B);
	bool STATIC_Greater_FloatFloat(float A, float B);
	bool STATIC_Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_Greater_ByteByte(unsigned char A, unsigned char B);
	int STATIC_GetYear(const struct FDateTime& A);
	void STATIC_GetYawPitchFromVector(const struct FVector& InVec, float* Yaw, float* Pitch);
	struct FVector STATIC_GetVectorArrayAverage(TArray<struct FVector> Vectors);
	struct FVector STATIC_GetUpVector(const struct FRotator& InRot);
	float STATIC_GetTotalSeconds(const struct FTimespan& A);
	float STATIC_GetTotalMinutes(const struct FTimespan& A);
	float STATIC_GetTotalMilliseconds(const struct FTimespan& A);
	float STATIC_GetTotalHours(const struct FTimespan& A);
	float STATIC_GetTotalDays(const struct FTimespan& A);
	struct FTimespan STATIC_GetTimeOfDay(const struct FDateTime& A);
	float STATIC_GetTAU();
	int STATIC_GetSeconds(const struct FTimespan& A);
	int STATIC_GetSecond(const struct FDateTime& A);
	struct FVector STATIC_GetRightVector(const struct FRotator& InRot);
	float STATIC_GetPointDistanceToSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd);
	float STATIC_GetPointDistanceToLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection);
	float STATIC_GetPI();
	int STATIC_GetMonth(const struct FDateTime& A);
	int STATIC_GetMinutes(const struct FTimespan& A);
	int STATIC_GetMinute(const struct FDateTime& A);
	float STATIC_GetMinElement(const struct FVector& A);
	int STATIC_GetMilliseconds(const struct FTimespan& A);
	int STATIC_GetMillisecond(const struct FDateTime& A);
	float STATIC_GetMaxElement(const struct FVector& A);
	int STATIC_GetHours(const struct FTimespan& A);
	int STATIC_GetHour12(const struct FDateTime& A);
	int STATIC_GetHour(const struct FDateTime& A);
	struct FVector STATIC_GetForwardVector(const struct FRotator& InRot);
	struct FTimespan STATIC_GetDuration(const struct FTimespan& A);
	struct FVector STATIC_GetDirectionUnitVector(const struct FVector& From, const struct FVector& To);
	int STATIC_GetDays(const struct FTimespan& A);
	int STATIC_GetDayOfYear(const struct FDateTime& A);
	int STATIC_GetDay(const struct FDateTime& A);
	struct FDateTime STATIC_GetDate(const struct FDateTime& A);
	void STATIC_GetAxes(const struct FRotator& A, struct FVector* X, struct FVector* Y, struct FVector* Z);
	int STATIC_FTrunc(float A);
	struct FTimespan STATIC_FromSeconds(float Seconds);
	struct FTimespan STATIC_FromMinutes(float Minutes);
	struct FTimespan STATIC_FromMilliseconds(float Milliseconds);
	struct FTimespan STATIC_FromHours(float Hours);
	struct FTimespan STATIC_FromDays(float Days);
	float STATIC_Fraction(float A);
	int STATIC_FMod(float Dividend, float Divisor, float* Remainder);
	float STATIC_FMin(float A, float B);
	float STATIC_FMax(float A, float B);
	float STATIC_FloatSpringInterp(float Current, float Target, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, struct FFloatSpringState* SpringState);
	float STATIC_FixedTurn(float InCurrent, float InDesired, float InDeltaRate);
	float STATIC_FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);
	float STATIC_FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);
	float STATIC_FInterpEaseInOut(float A, float B, float Alpha, float Exponent);
	void STATIC_FindNearestPointsOnLineSegments(const struct FVector& Segment1Start, const struct FVector& Segment1End, const struct FVector& Segment2Start, const struct FVector& Segment2End, struct FVector* Segment1Point, struct FVector* Segment2Point);
	struct FRotator STATIC_FindLookAtRotation(const struct FVector& Start, const struct FVector& Target);
	struct FVector STATIC_FindClosestPointOnSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd);
	struct FVector STATIC_FindClosestPointOnLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection);
	int STATIC_FFloor(float A);
	float STATIC_FClamp(float Value, float Min, float Max);
	int STATIC_FCeil(float A);
	float STATIC_Exp(float A);
	bool STATIC_EqualEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);
	bool STATIC_EqualEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance);
	bool STATIC_EqualEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B);
	bool STATIC_EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);
	bool STATIC_EqualEqual_ObjectObject(class UObject* A, class UObject* B);
	bool STATIC_EqualEqual_NameName(const struct FName& A, const struct FName& B);
	bool STATIC_EqualEqual_IntInt(int A, int B);
	bool STATIC_EqualEqual_FloatFloat(float A, float B);
	bool STATIC_EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_EqualEqual_ClassClass(class UClass* A, class UClass* B);
	bool STATIC_EqualEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_EqualEqual_BoolBool(bool A, bool B);
	float STATIC_Ease(float A, float B, float Alpha, TEnumAsByte<enum class EEasingFunc> EasingFunc, float BlendExp, int Steps);
	float STATIC_DotProduct2D(const struct FVector2D& A, const struct FVector2D& B);
	float STATIC_Dot_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Divide_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Divide_VectorInt(const struct FVector& A, int B);
	struct FVector STATIC_Divide_VectorFloat(const struct FVector& A, float B);
	struct FVector2D STATIC_Divide_Vector2DFloat(const struct FVector2D& A, float B);
	int STATIC_Divide_IntInt(int A, int B);
	float STATIC_Divide_FloatFloat(float A, float B);
	unsigned char STATIC_Divide_ByteByte(unsigned char A, unsigned char B);
	float STATIC_DegTan(float A);
	float STATIC_DegSin(float A);
	float STATIC_DegreesToRadians(float A);
	float STATIC_DegCos(float A);
	float STATIC_DegAtan2(float A, float B);
	float STATIC_DegAtan(float A);
	float STATIC_DegAsin(float A);
	float STATIC_DegAcos(float A);
	int STATIC_DaysInYear(int Year);
	int STATIC_DaysInMonth(int Year, int Month);
	struct FDateTime STATIC_DateTimeMinValue();
	struct FDateTime STATIC_DateTimeMaxValue();
	bool STATIC_DateTimeFromString(const struct FString& DateTimeString, struct FDateTime* Result);
	bool STATIC_DateTimeFromIsoString(const struct FString& IsoString, struct FDateTime* Result);
	float STATIC_CrossProduct2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector STATIC_Cross_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);
	float STATIC_Cos(float A);
	struct FTransform STATIC_ConvertTransformToRelative(const struct FTransform& Transform, const struct FTransform& ParentTransform);
	struct FVector2D STATIC_Conv_VectorToVector2D(const struct FVector& InVector);
	struct FTransform STATIC_Conv_VectorToTransform(const struct FVector& InLocation);
	struct FRotator STATIC_Conv_VectorToRotator(const struct FVector& InVec);
	struct FLinearColor STATIC_Conv_VectorToLinearColor(const struct FVector& InVec);
	struct FVector STATIC_Conv_Vector2DToVector(const struct FVector2D& InVector2D, float Z);
	struct FVector STATIC_Conv_RotatorToVector(const struct FRotator& InRot);
	struct FVector STATIC_Conv_LinearColorToVector(const struct FLinearColor& InLinearColor);
	struct FColor STATIC_Conv_LinearColorToColor(const struct FLinearColor& InLinearColor);
	float STATIC_Conv_IntToFloat(int inInt);
	unsigned char STATIC_Conv_IntToByte(int inInt);
	bool STATIC_Conv_IntToBool(int inInt);
	struct FVector STATIC_Conv_FloatToVector(float InFloat);
	struct FLinearColor STATIC_Conv_FloatToLinearColor(float InFloat);
	struct FLinearColor STATIC_Conv_ColorToLinearColor(const struct FColor& InColor);
	int STATIC_Conv_ByteToInt(unsigned char InByte);
	float STATIC_Conv_ByteToFloat(unsigned char InByte);
	int STATIC_Conv_BoolToInt(bool InBool);
	float STATIC_Conv_BoolToFloat(bool InBool);
	unsigned char STATIC_Conv_BoolToByte(bool InBool);
	struct FTransform STATIC_ComposeTransforms(const struct FTransform& A, const struct FTransform& B);
	struct FRotator STATIC_ComposeRotators(const struct FRotator& A, const struct FRotator& B);
	bool STATIC_ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass);
	struct FVector STATIC_ClampVectorSize(const struct FVector& A, float Min, float Max);
	float STATIC_ClampAxis(float Angle);
	float STATIC_ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);
	int STATIC_Clamp(int Value, int Min, int Max);
	struct FLinearColor STATIC_CInterpTo(const struct FLinearColor& Current, const struct FLinearColor& Target, float DeltaTime, float InterpSpeed);
	void STATIC_BreakVector2D(const struct FVector2D& InVec, float* X, float* Y);
	void STATIC_BreakVector(const struct FVector& InVec, float* X, float* Y, float* Z);
	void STATIC_BreakTransform(const struct FTransform& InTransform, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale);
	void STATIC_BreakTimespan(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* Milliseconds);
	void STATIC_BreakRotIntoAxes(const struct FRotator& InRot, struct FVector* X, struct FVector* Y, struct FVector* Z);
	void STATIC_BreakRotator(const struct FRotator& InRot, float* Roll, float* Pitch, float* Yaw);
	void STATIC_BreakRandomStream(const struct FRandomStream& InRandomStream, int* InitialSeed);
	void STATIC_BreakDateTime(const struct FDateTime& InDateTime, int* Year, int* Month, int* Day, int* Hour, int* Minute, int* Second, int* Millisecond);
	void STATIC_BreakColor(const struct FLinearColor& InColor, float* R, float* G, float* B, float* A);
	bool STATIC_BooleanXOR(bool A, bool B);
	bool STATIC_BooleanOR(bool A, bool B);
	bool STATIC_BooleanNOR(bool A, bool B);
	bool STATIC_BooleanNAND(bool A, bool B);
	bool STATIC_BooleanAND(bool A, bool B);
	unsigned char STATIC_BMin(unsigned char A, unsigned char B);
	unsigned char STATIC_BMax(unsigned char A, unsigned char B);
	float STATIC_Atan2(float A, float B);
	float STATIC_Atan(float A);
	float STATIC_Asin(float A);
	int STATIC_And_IntInt(int A, int B);
	struct FVector STATIC_Add_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Add_VectorInt(const struct FVector& A, int B);
	struct FVector STATIC_Add_VectorFloat(const struct FVector& A, float B);
	struct FVector2D STATIC_Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D STATIC_Add_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan STATIC_Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	int STATIC_Add_IntInt(int A, int B);
	float STATIC_Add_FloatFloat(float A, float B);
	struct FDateTime STATIC_Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	unsigned char STATIC_Add_ByteByte(unsigned char A, unsigned char B);
	float STATIC_Acos(float A);
	int STATIC_Abs_Int(int A);
	float STATIC_Abs(float A);
};


// Class Engine.KismetNodeHelperLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetNodeHelperLibrary");
		return ptr;
	}


	void STATIC_MarkBit(int Index, int* Data);
	bool STATIC_HasUnmarkedBit(int Data, int NumBits);
	bool STATIC_HasMarkedBit(int Data, int NumBits);
	unsigned char STATIC_GetValidValue(class UEnum* Enum, unsigned char EnumeratorValue);
	int STATIC_GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);
	int STATIC_GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);
	int STATIC_GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);
	unsigned char STATIC_GetEnumeratorValueFromIndex(class UEnum* Enum, unsigned char EnumeratorIndex);
	struct FString STATIC_GetEnumeratorUserFriendlyName(class UEnum* Enum, unsigned char EnumeratorValue);
	struct FName STATIC_GetEnumeratorName(class UEnum* Enum, unsigned char EnumeratorValue);
	void STATIC_ClearBit(int Index, int* Data);
	void STATIC_ClearAllBits(int* Data);
	bool STATIC_BitIsMarked(int Data, int Index);
};


// Class Engine.KismetRenderingLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetRenderingLibrary");
		return ptr;
	}


	void STATIC_ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, const struct FString& FilePath, const struct FString& Filename);
	void STATIC_ExportRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FString& FilePath, const struct FString& Filename);
	void STATIC_EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, const struct FDrawToRenderTargetContext& Context);
	void STATIC_DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material);
	class UTextureRenderTarget2D* STATIC_CreateRenderTarget2D(class UObject* WorldContextObject, int Width, int Height);
	void STATIC_ClearRenderTarget2D(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FLinearColor& ClearColor);
	void STATIC_BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas** Canvas, struct FVector2D* Size, struct FDrawToRenderTargetContext* Context);
};


// Class Engine.KismetStringLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetStringLibrary");
		return ptr;
	}


	struct FString STATIC_TrimTrailing(const struct FString& SourceString);
	struct FString STATIC_Trim(const struct FString& SourceString);
	struct FString STATIC_ToUpper(const struct FString& SourceString);
	struct FString STATIC_ToLower(const struct FString& SourceString);
	struct FString STATIC_TimeSecondsToString(float InSeconds);
	bool STATIC_StartsWith(const struct FString& SourceString, const struct FString& InPrefix, TEnumAsByte<enum class ESearchCase> SearchCase);
	bool STATIC_Split(const struct FString& SourceString, const struct FString& InStr, TEnumAsByte<enum class ESearchCase> SearchCase, TEnumAsByte<enum class ESearchDir> SearchDir, struct FString* LeftS, struct FString* RightS);
	struct FString STATIC_RightPad(const struct FString& SourceString, int ChCount);
	struct FString STATIC_RightChop(const struct FString& SourceString, int Count);
	struct FString STATIC_Right(const struct FString& SourceString, int Count);
	struct FString STATIC_Reverse(const struct FString& SourceString);
	int STATIC_ReplaceInline(const struct FString& SearchText, const struct FString& ReplacementText, TEnumAsByte<enum class ESearchCase> SearchCase, struct FString* SourceString);
	struct FString STATIC_Replace(const struct FString& SourceString, const struct FString& From, const struct FString& To, TEnumAsByte<enum class ESearchCase> SearchCase);
	TArray<struct FString> STATIC_ParseIntoArray(const struct FString& SourceString, const struct FString& Delimiter, bool CullEmptyStrings);
	bool STATIC_NotEqual_StrStr(const struct FString& A, const struct FString& B);
	bool STATIC_NotEqual_StriStri(const struct FString& A, const struct FString& B);
	struct FString STATIC_Mid(const struct FString& SourceString, int Start, int Count);
	bool STATIC_MatchesWildcard(const struct FString& SourceString, const struct FString& Wildcard, TEnumAsByte<enum class ESearchCase> SearchCase);
	int STATIC_Len(const struct FString& S);
	struct FString STATIC_LeftPad(const struct FString& SourceString, int ChCount);
	struct FString STATIC_LeftChop(const struct FString& SourceString, int Count);
	struct FString STATIC_Left(const struct FString& SourceString, int Count);
	struct FString STATIC_JoinStringArray(TArray<struct FString> SourceArray, const struct FString& Separator);
	bool STATIC_IsNumeric(const struct FString& SourceString);
	struct FString STATIC_GetSubstring(const struct FString& SourceString, int StartIndex, int Length);
	int STATIC_GetCharacterAsNumber(const struct FString& SourceString, int Index);
	TArray<struct FString> STATIC_GetCharacterArrayFromString(const struct FString& SourceString);
	int STATIC_FindSubstring(const struct FString& SearchIn, const struct FString& Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);
	bool STATIC_EqualEqual_StrStr(const struct FString& A, const struct FString& B);
	bool STATIC_EqualEqual_StriStri(const struct FString& A, const struct FString& B);
	bool STATIC_EndsWith(const struct FString& SourceString, const struct FString& InSuffix, TEnumAsByte<enum class ESearchCase> SearchCase);
	int STATIC_CullArray(const struct FString& SourceString, TArray<struct FString>* inArray);
	struct FString STATIC_Conv_VectorToString(const struct FVector& InVec);
	struct FString STATIC_Conv_Vector2dToString(const struct FVector2D& InVec);
	struct FString STATIC_Conv_TransformToString(const struct FTransform& InTrans);
	void STATIC_Conv_StringToVector2D(const struct FString& inString, struct FVector2D* OutConvertedVector2D, bool* OutIsValid);
	void STATIC_Conv_StringToVector(const struct FString& inString, struct FVector* OutConvertedVector, bool* OutIsValid);
	void STATIC_Conv_StringToRotator(const struct FString& inString, struct FRotator* OutConvertedRotator, bool* OutIsValid);
	struct FName STATIC_Conv_StringToName(const struct FString& inString);
	int STATIC_Conv_StringToInt(const struct FString& inString);
	float STATIC_Conv_StringToFloat(const struct FString& inString);
	void STATIC_Conv_StringToColor(const struct FString& inString, struct FLinearColor* OutConvertedColor, bool* OutIsValid);
	struct FString STATIC_Conv_RotatorToString(const struct FRotator& InRot);
	struct FString STATIC_Conv_ObjectToString(class UObject* InObj);
	struct FString STATIC_Conv_NameToString(const struct FName& InName);
	struct FString STATIC_Conv_IntToString(int inInt);
	struct FString STATIC_Conv_FloatToString(float InFloat);
	struct FString STATIC_Conv_ColorToString(const struct FLinearColor& InColor);
	struct FString STATIC_Conv_ByteToString(unsigned char InByte);
	struct FString STATIC_Conv_BoolToString(bool InBool);
	bool STATIC_Contains(const struct FString& SearchIn, const struct FString& Substring, bool bUseCase, bool bSearchFromEnd);
	struct FString STATIC_Concat_StrStr(const struct FString& A, const struct FString& B);
	struct FString STATIC_BuildString_Vector2d(const struct FString& AppendTo, const struct FString& Prefix, const struct FVector2D& InVector2D, const struct FString& Suffix);
	struct FString STATIC_BuildString_Vector(const struct FString& AppendTo, const struct FString& Prefix, const struct FVector& InVector, const struct FString& Suffix);
	struct FString STATIC_BuildString_Rotator(const struct FString& AppendTo, const struct FString& Prefix, const struct FRotator& InRot, const struct FString& Suffix);
	struct FString STATIC_BuildString_Object(const struct FString& AppendTo, const struct FString& Prefix, class UObject* InObj, const struct FString& Suffix);
	struct FString STATIC_BuildString_Name(const struct FString& AppendTo, const struct FString& Prefix, const struct FName& InName, const struct FString& Suffix);
	struct FString STATIC_BuildString_Int(const struct FString& AppendTo, const struct FString& Prefix, int inInt, const struct FString& Suffix);
	struct FString STATIC_BuildString_Float(const struct FString& AppendTo, const struct FString& Prefix, float InFloat, const struct FString& Suffix);
	struct FString STATIC_BuildString_Color(const struct FString& AppendTo, const struct FString& Prefix, const struct FLinearColor& InColor, const struct FString& Suffix);
	struct FString STATIC_BuildString_Bool(const struct FString& AppendTo, const struct FString& Prefix, bool InBool, const struct FString& Suffix);
};


// Class Engine.KismetTextLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetTextLibrary");
		return ptr;
	}


	struct FText STATIC_TextTrimTrailing(const struct FText& InText);
	struct FText STATIC_TextTrimPrecedingAndTrailing(const struct FText& InText);
	struct FText STATIC_TextTrimPreceding(const struct FText& InText);
	bool STATIC_TextIsTransient(const struct FText& InText);
	bool STATIC_TextIsEmpty(const struct FText& InText);
	bool STATIC_TextIsCultureInvariant(const struct FText& InText);
	bool STATIC_NotEqual_TextText(const struct FText& A, const struct FText& B);
	bool STATIC_NotEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B);
	struct FText STATIC_GetEmptyText();
	struct FText STATIC_Format(const struct FText& InPattern, TArray<struct FFormatArgumentData> InArgs);
	bool STATIC_FindTextInLocalizationTable(const struct FString& Namespace, const struct FString& Key, struct FText* OutText);
	bool STATIC_EqualEqual_TextText(const struct FText& A, const struct FText& B);
	bool STATIC_EqualEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B);
	struct FText STATIC_Conv_VectorToText(const struct FVector& InVec);
	struct FText STATIC_Conv_Vector2dToText(const struct FVector2D& InVec);
	struct FText STATIC_Conv_TransformToText(const struct FTransform& InTrans);
	struct FString STATIC_Conv_TextToString(const struct FText& InText);
	struct FText STATIC_Conv_StringToText(const struct FString& inString);
	struct FText STATIC_Conv_RotatorToText(const struct FRotator& InRot);
	struct FText STATIC_Conv_ObjectToText(class UObject* InObj);
	struct FText STATIC_Conv_NameToText(const struct FName& InName);
	struct FText STATIC_Conv_IntToText(int Value, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);
	struct FText STATIC_Conv_FloatToText(float Value, TEnumAsByte<enum class ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);
	struct FText STATIC_Conv_ColorToText(const struct FLinearColor& InColor);
	struct FText STATIC_Conv_ByteToText(unsigned char Value);
	struct FText STATIC_Conv_BoolToText(bool InBool);
	struct FText STATIC_AsTimeZoneTime_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone);
	struct FText STATIC_AsTimeZoneDateTime_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone);
	struct FText STATIC_AsTimeZoneDate_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone);
	struct FText STATIC_AsTimespan_Timespan(const struct FTimespan& InTimespan);
	struct FText STATIC_AsTime_DateTime(const struct FDateTime& In);
	struct FText STATIC_AsPercent_Float(float Value, TEnumAsByte<enum class ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);
	struct FText STATIC_AsDateTime_DateTime(const struct FDateTime& In);
	struct FText STATIC_AsDate_DateTime(const struct FDateTime& InDateTime);
	struct FText STATIC_AsCurrencyBase(int BaseValue, const struct FString& CurrencyCode);
	struct FText STATIC_AsCurrency_Integer(int Value, TEnumAsByte<enum class ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode);
	struct FText STATIC_AsCurrency_Float(float Value, TEnumAsByte<enum class ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode);
};


// Class Engine.MeshVertexPainterKismetLibrary
// 0x0000 (0x0028 - 0x0028)
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshVertexPainterKismetLibrary");
		return ptr;
	}


	void STATIC_RemovePaintedVertices(class UStaticMeshComponent* StaticMeshComponent);
	void STATIC_PaintVerticesSingleColor(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& FillColor, bool bConvertToSRGB);
	void STATIC_PaintVerticesLerpAlongAxis(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& StartColor, const struct FLinearColor& EndColor, TEnumAsByte<enum class EVertexPaintAxis> Axis, bool bConvertToSRGB);
};


// Class Engine.PendingNetGame
// 0x00A0 (0x00C8 - 0x0028)
class UPendingNetGame : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET
	class UNetDriver*                                  NetDriver;                                        		// 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDemoNetDriver*                              DemoNetDriver;                                    		// 0x0038(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x88];                              		// 0x0040(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PendingNetGame");
		return ptr;
	}

};


// Class Engine.StereoLayerFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StereoLayerFunctionLibrary");
		return ptr;
	}


	void STATIC_ShowSplashScreen();
	void STATIC_SetSplashScreen(class UTexture* Texture, const struct FVector2D& Scale, const struct FVector2D& Offset, bool bShowLoadingMovie, bool bShowOnSet);
	void STATIC_HideSplashScreen();
	void STATIC_EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);
};


// Class Engine.VisualLoggerKismetLibrary
// 0x0000 (0x0028 - 0x0028)
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VisualLoggerKismetLibrary");
		return ptr;
	}


	void STATIC_LogText(class UObject* WorldContextObject, const struct FString& Text, const struct FName& LogCategory);
	void STATIC_LogLocation(class UObject* WorldContextObject, const struct FVector& Location, const struct FString& Text, const struct FLinearColor& ObjectColor, float Radius, const struct FName& LogCategory);
	void STATIC_LogBox(class UObject* WorldContextObject, const struct FBox& BoxShape, const struct FString& Text, const struct FLinearColor& ObjectColor, const struct FName& LogCategory);
};


// Class Engine.BodySetup
// 0x02E8 (0x0310 - 0x0028)
class UBodySetup : public UObject
{
public:
	struct FKAggregateGeom                             AggGeom;                                          		// 0x0028(0x0048) (CPF_Edit)
	struct FName                                       BoneName;                                         		// 0x0070(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	TEnumAsByte<enum class EPhysicsType>               PhysicsType;                                      		// 0x0078(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0079(0x0003) MISSED OFFSET
	unsigned char                                      bAlwaysFullAnimWeight : 1;                        		// 0x007C(0x0001) (CPF_Deprecated)
	unsigned char                                      bConsiderForBounds : 1;                           		// 0x007C(0x0001) (CPF_Edit)
	unsigned char                                      bMeshCollideAll : 1;                              		// 0x007C(0x0001) (CPF_Transient)
	unsigned char                                      bDoubleSidedGeometry : 1;                         		// 0x007C(0x0001) (CPF_Edit)
	unsigned char                                      bGenerateNonMirroredCollision : 1;                		// 0x007C(0x0001)
	unsigned char                                      bSharedCookedData : 1;                            		// 0x007C(0x0001)
	unsigned char                                      bGenerateMirroredCollision : 1;                   		// 0x007C(0x0001)
	unsigned char                                      UnknownData01[0x3];                               		// 0x007D(0x0003) MISSED OFFSET
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x0080(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EBodyCollisionResponse>     CollisionReponse;                                 		// 0x0088(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ECollisionTraceFlag>        CollisionTraceFlag;                               		// 0x0089(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                               		// 0x008A(0x0006) MISSED OFFSET
	struct FBodyInstance                               DefaultInstance;                                  		// 0x0090(0x01B0) (CPF_Edit)
	struct FWalkableSlopeOverride                      WalkableSlopeOverride;                            		// 0x0240(0x0008) (CPF_Edit)
	float                                              BuildScale;                                       		// 0x0248(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FVector                                     BuildScale3D;                                     		// 0x024C(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0xB8];                              		// 0x0258(0x00B8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BodySetup");
		return ptr;
	}

};


// Class Engine.BodySetup2D
// 0x0030 (0x0340 - 0x0310)
class UBodySetup2D : public UBodySetup
{
public:
	struct FAggregateGeometry2D                        AggGeom2D;                                        		// 0x0310(0x0030)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BodySetup2D");
		return ptr;
	}

};


// Class Engine.PhysicsAsset
// 0x00E8 (0x0110 - 0x0028)
class UPhysicsAsset : public UObject
{
public:
	TArray<int>                                        BoundsBodies;                                     		// 0x0028(0x0010) (CPF_ZeroConstructor)
	TArray<class USkeletalBodySetup*>                  SkeletalBodySetups;                               		// 0x0038(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	TArray<class UPhysicsConstraintTemplate*>          ConstraintSetup;                                  		// 0x0048(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      bUseAsyncScene : 1;                               		// 0x0058(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0xA7];                              		// 0x0059(0x00A7) MISSED OFFSET
	TArray<class UBodySetup*>                          BodySetup;                                        		// 0x0100(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsAsset");
		return ptr;
	}

};


// Class Engine.SkeletalBodySetup
// 0x0010 (0x0320 - 0x0310)
class USkeletalBodySetup : public UBodySetup
{
public:
	TArray<struct FPhysicalAnimationProfile>           PhysicalAnimationData;                            		// 0x0310(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalBodySetup");
		return ptr;
	}

};


// Class Engine.BoneMaskFilter
// 0x0010 (0x0038 - 0x0028)
class UBoneMaskFilter : public UObject
{
public:
	TArray<struct FInputBlendPose>                     BlendPoses;                                       		// 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BoneMaskFilter");
		return ptr;
	}

};


// Class Engine.BookMark
// 0x0028 (0x0050 - 0x0028)
class UBookMark : public UObject
{
public:
	struct FVector                                     Location;                                         		// 0x0028(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    Rotation;                                         		// 0x0034(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FString>                             HiddenLevels;                                     		// 0x0040(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BookMark");
		return ptr;
	}

};


// Class Engine.BookMark2D
// 0x0010 (0x0038 - 0x0028)
class UBookMark2D : public UObject
{
public:
	float                                              Zoom2D;                                           		// 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FIntPoint                                   Location;                                         		// 0x002C(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BookMark2D");
		return ptr;
	}

};


// Class Engine.Breakpoint
// 0x0018 (0x0040 - 0x0028)
class UBreakpoint : public UObject
{
public:
	unsigned char                                      bEnabled : 1;                                     		// 0x0028(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0029(0x0007) MISSED OFFSET
	class UEdGraphNode*                                Node;                                             		// 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bStepOnce : 1;                                    		// 0x0038(0x0001)
	unsigned char                                      bStepOnce_WasPreviouslyDisabled : 1;              		// 0x0038(0x0001)
	unsigned char                                      bStepOnce_RemoveAfterHit : 1;                     		// 0x0038(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Breakpoint");
		return ptr;
	}

};


// Class Engine.BrushBuilder
// 0x0058 (0x0080 - 0x0028)
class UBrushBuilder : public UObject
{
public:
	struct FString                                     BitmapFilename;                                   		// 0x0028(0x0010) (CPF_ZeroConstructor)
	struct FString                                     ToolTip;                                          		// 0x0038(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      NotifyBadParams : 1;                              		// 0x0048(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0049(0x0007) MISSED OFFSET
	TArray<struct FVector>                             Vertices;                                         		// 0x0050(0x0010) (CPF_ZeroConstructor)
	TArray<struct FBuilderPoly>                        Polys;                                            		// 0x0060(0x0010) (CPF_ZeroConstructor)
	struct FName                                       Layer;                                            		// 0x0070(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      MergeCoplanars : 1;                               		// 0x0078(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BrushBuilder");
		return ptr;
	}

};


// Class Engine.ButtonStyleAsset
// 0x02A8 (0x02D0 - 0x0028)
class UButtonStyleAsset : public UObject
{
public:
	struct FButtonStyle                                ButtonStyle;                                      		// 0x0028(0x02A8) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ButtonStyleAsset");
		return ptr;
	}

};


// Class Engine.CameraAnim
// 0x0508 (0x0530 - 0x0028)
class UCameraAnim : public UObject
{
public:
	class UInterpGroup*                                CameraInterpGroup;                                		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimLength;                                       		// 0x0030(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FBox                                        BoundingBox;                                      		// 0x0034(0x001C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRelativeToInitialTransform : 1;                  		// 0x0050(0x0001) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bRelativeToInitialFOV : 1;                        		// 0x0050(0x0001) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0051(0x0003) MISSED OFFSET
	float                                              BaseFOV;                                          		// 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                               		// 0x0058(0x0008) MISSED OFFSET
	struct FPostProcessSettings                        BasePostProcessSettings;                          		// 0x0060(0x04C0)
	float                                              BasePostProcessBlendWeight;                       		// 0x0520(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                               		// 0x0524(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraAnim");
		return ptr;
	}

};


// Class Engine.CameraAnimInst
// 0x00E8 (0x0110 - 0x0028)
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                          		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UInterpGroupInst*                            InterpGroupInst;                                  		// 0x0030(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                              		// 0x0038(0x0018) MISSED OFFSET
	float                                              PlayRate;                                         		// 0x0050(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                              		// 0x0054(0x0014) MISSED OFFSET
	class UInterpTrackMove*                            MoveTrack;                                        		// 0x0068(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UInterpTrackInstMove*                        MoveInst;                                         		// 0x0070(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TEnumAsByte<enum class ECameraAnimPlaySpace>       PlaySpace;                                        		// 0x0078(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x97];                              		// 0x0079(0x0097) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraAnimInst");
		return ptr;
	}


	void Stop(bool bImmediate);
	void SetScale(float NewDuration);
	void SetDuration(float NewDuration);
};


// Class Engine.CameraModifier
// 0x0020 (0x0048 - 0x0028)
class UCameraModifier : public UObject
{
public:
	unsigned char                                      bDebug : 1;                                       		// 0x0028(0x0001) (CPF_Edit)
	unsigned char                                      bExclusive : 1;                                   		// 0x0028(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0029(0x0003) MISSED OFFSET
	unsigned char                                      Priority;                                         		// 0x002C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x002D(0x0003) MISSED OFFSET
	class APlayerCameraManager*                        CameraOwner;                                      		// 0x0030(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              AlphaInTime;                                      		// 0x0038(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AlphaOutTime;                                     		// 0x003C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              Alpha;                                            		// 0x0040(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraModifier");
		return ptr;
	}


	bool IsDisabled();
	class AActor* GetViewTarget();
	void EnableModifier();
	void DisableModifier(bool bImmediate);
	void BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, struct FPostProcessSettings* PostProcessSettings);
	void BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, struct FVector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV);
};


// Class Engine.CameraModifier_CameraShake
// 0x0018 (0x0060 - 0x0048)
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray<class UCameraShake*>                        ActiveShakes;                                     		// 0x0048(0x0010) (CPF_ZeroConstructor)
	float                                              SplitScreenShakeScale;                            		// 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraModifier_CameraShake");
		return ptr;
	}

};


// Class Engine.Canvas
// 0x02A8 (0x02D0 - 0x0028)
class UCanvas : public UObject
{
public:
	float                                              OrgX;                                             		// 0x0028(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OrgY;                                             		// 0x002C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ClipX;                                            		// 0x0030(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ClipY;                                            		// 0x0034(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      DrawColor;                                        		// 0x0038(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCenterX : 1;                                     		// 0x003C(0x0001)
	unsigned char                                      bCenterY : 1;                                     		// 0x003C(0x0001)
	unsigned char                                      bNoSmooth : 1;                                    		// 0x003C(0x0001)
	unsigned char                                      UnknownData00[0x3];                               		// 0x003D(0x0003) MISSED OFFSET
	int                                                SizeX;                                            		// 0x0040(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SizeY;                                            		// 0x0044(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                               		// 0x0048(0x0008) MISSED OFFSET
	struct FPlane                                      ColorModulate;                                    		// 0x0050(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture2D*                                  DefaultTexture;                                   		// 0x0060(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture2D*                                  GradientTexture0;                                 		// 0x0068(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UReporterGraph*                              ReporterGraph;                                    		// 0x0070(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x258];                             		// 0x0078(0x0258) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Canvas");
		return ptr;
	}


	struct FVector2D K2_TextSize(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& Scale);
	struct FVector2D K2_StrLen(class UFont* RenderFont, const struct FString& RenderText);
	struct FVector K2_Project(const struct FVector& WorldLocation);
	void K2_DrawTriangle(class UTexture* RenderTexture, TArray<struct FCanvasUVTri> Triangles);
	void K2_DrawTexture(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, TEnumAsByte<enum class EBlendMode> BlendMode, float Rotation, const struct FVector2D& PivotPoint);
	void K2_DrawText(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& ScreenPosition, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor);
	void K2_DrawPolygon(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int NumberOfSides, const struct FLinearColor& RenderColor);
	void K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, TArray<struct FCanvasUVTri> Triangles);
	void K2_DrawMaterial(class UMaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint);
	void K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor);
	void K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness);
	void K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize);
	void K2_Deproject(const struct FVector2D& ScreenPosition, struct FVector* WorldOrigin, struct FVector* WorldDirection);
};


// Class Engine.Channel
// 0x0040 (0x0068 - 0x0028)
class UChannel : public UObject
{
public:
	class UNetConnection*                              Connection;                                       		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x38];                              		// 0x0030(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Channel");
		return ptr;
	}

};


// Class Engine.ActorChannel
// 0x01C8 (0x0230 - 0x0068)
class UActorChannel : public UChannel
{
public:
	class AActor*                                      Actor;                                            		// 0x0068(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C0];                             		// 0x0070(0x01C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorChannel");
		return ptr;
	}

};


// Class Engine.ControlChannel
// 0x0018 (0x0080 - 0x0068)
class UControlChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x18];                              		// 0x0068(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ControlChannel");
		return ptr;
	}

};


// Class Engine.VoiceChannel
// 0x0010 (0x0078 - 0x0068)
class UVoiceChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x0068(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VoiceChannel");
		return ptr;
	}

};


// Class Engine.CheckBoxStyleAsset
// 0x05E0 (0x0608 - 0x0028)
class UCheckBoxStyleAsset : public UObject
{
public:
	struct FCheckBoxStyle                              CheckBoxStyle;                                    		// 0x0028(0x05E0) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CheckBoxStyleAsset");
		return ptr;
	}

};


// Class Engine.Commandlet
// 0x0058 (0x0080 - 0x0028)
class UCommandlet : public UObject
{
public:
	struct FString                                     HelpDescription;                                  		// 0x0028(0x0010) (CPF_ZeroConstructor)
	struct FString                                     HelpUsage;                                        		// 0x0038(0x0010) (CPF_ZeroConstructor)
	struct FString                                     HelpWebLink;                                      		// 0x0048(0x0010) (CPF_ZeroConstructor)
	TArray<struct FString>                             HelpParamNames;                                   		// 0x0058(0x0010) (CPF_ZeroConstructor)
	TArray<struct FString>                             HelpParamDescriptions;                            		// 0x0068(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      IsServer : 1;                                     		// 0x0078(0x0001)
	unsigned char                                      IsClient : 1;                                     		// 0x0078(0x0001)
	unsigned char                                      IsEditor : 1;                                     		// 0x0078(0x0001)
	unsigned char                                      LogToConsole : 1;                                 		// 0x0078(0x0001)
	unsigned char                                      ShowErrorCount : 1;                               		// 0x0078(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Commandlet");
		return ptr;
	}

};


// Class Engine.PluginCommandlet
// 0x0020 (0x00A0 - 0x0080)
class UPluginCommandlet : public UCommandlet
{
public:
	unsigned char                                      UnknownData00[0x20];                              		// 0x0080(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PluginCommandlet");
		return ptr;
	}

};


// Class Engine.SmokeTestCommandlet
// 0x0000 (0x0080 - 0x0080)
class USmokeTestCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SmokeTestCommandlet");
		return ptr;
	}

};


// Class Engine.CurveLinearColor
// 0x01E0 (0x0210 - 0x0030)
class UCurveLinearColor : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurves[0x4];                                 		// 0x0030(0x0078)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurveLinearColor");
		return ptr;
	}


	struct FLinearColor GetLinearColorValue(float InTime);
};


// Class Engine.CurveVector
// 0x0168 (0x0198 - 0x0030)
class UCurveVector : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurves[0x3];                                 		// 0x0030(0x0078)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurveVector");
		return ptr;
	}


	struct FVector GetVectorValue(float InTime);
};


// Class Engine.CurveEdPresetCurve
// 0x0000 (0x0028 - 0x0028)
class UCurveEdPresetCurve : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurveEdPresetCurve");
		return ptr;
	}

};


// Class Engine.CurveTable
// 0x0050 (0x0078 - 0x0028)
class UCurveTable : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                              		// 0x0028(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurveTable");
		return ptr;
	}

};


// Class Engine.PreviewMeshCollection
// 0x0018 (0x0040 - 0x0028)
class UPreviewMeshCollection : public UDataAsset
{
public:
	class USkeleton*                                   Skeleton;                                         		// 0x0028(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	TArray<struct FPreviewMeshCollectionEntry>         SkeletalMeshes;                                   		// 0x0030(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PreviewMeshCollection");
		return ptr;
	}

};


// Class Engine.TireType
// 0x0008 (0x0030 - 0x0028)
class UTireType : public UDataAsset
{
public:
	float                                              FrictionScale;                                    		// 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TireType");
		return ptr;
	}

};


// Class Engine.DestructibleFractureSettings
// 0x0090 (0x00B8 - 0x0028)
class UDestructibleFractureSettings : public UObject
{
public:
	int                                                CellSiteCount;                                    		// 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FFractureMaterial                           FractureMaterialDesc;                             		// 0x002C(0x0024) (CPF_Edit, CPF_Transient)
	int                                                RandomSeed;                                       		// 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0054(0x0004) MISSED OFFSET
	TArray<struct FVector>                             VoronoiSites;                                     		// 0x0058(0x0010) (CPF_ZeroConstructor)
	int                                                OriginalSubmeshCount;                             		// 0x0068(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                               		// 0x006C(0x0004) MISSED OFFSET
	TArray<class UMaterialInterface*>                  Materials;                                        		// 0x0070(0x0010) (CPF_ZeroConstructor)
	TArray<struct FDestructibleChunkParameters>        ChunkParameters;                                  		// 0x0080(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData02[0x28];                              		// 0x0090(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DestructibleFractureSettings");
		return ptr;
	}

};


// Class Engine.AnimationSettings
// 0x0038 (0x0070 - 0x0038)
class UAnimationSettings : public UDeveloperSettings
{
public:
	int                                                CompressCommandletVersion;                        		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x003C(0x0004) MISSED OFFSET
	TArray<struct FString>                             KeyEndEffectorsMatchNameArray;                    		// 0x0040(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	class UClass*                                      DefaultCompressionAlgorithm;                      		// 0x0050(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_NoClear, CPF_IsPlainOldData)
	TEnumAsByte<enum class AnimationCompressionFormat> RotationCompressionFormat;                        		// 0x0058(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<enum class AnimationCompressionFormat> TranslationCompressionFormat;                     		// 0x0059(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                               		// 0x005A(0x0002) MISSED OFFSET
	float                                              AlternativeCompressionThreshold;                  		// 0x005C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      ForceRecompression : 1;                           		// 0x0060(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bOnlyCheckForMissingSkeletalMeshes : 1;           		// 0x0061(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bForceBelowThreshold : 1;                         		// 0x0062(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bFirstRecompressUsingCurrentOrDefault : 1;        		// 0x0063(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bRaiseMaxErrorToExisting : 1;                     		// 0x0064(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bTryFixedBitwiseCompression : 1;                  		// 0x0065(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bTryPerTrackBitwiseCompression : 1;               		// 0x0066(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bTryLinearKeyRemovalCompression : 1;              		// 0x0067(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bTryIntervalKeyRemoval : 1;                       		// 0x0068(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnablePerformanceLog : 1;                        		// 0x0069(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bStripAnimationDataOnDedicatedServer : 1;         		// 0x006A(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationSettings");
		return ptr;
	}

};


// Class Engine.AudioSettings
// 0x0080 (0x00B8 - 0x0038)
class UAudioSettings : public UDeveloperSettings
{
public:
	struct FStringAssetReference                       DefaultSoundClassName;                            		// 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringAssetReference                       DefaultSoundConcurrencyName;                      		// 0x0048(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringAssetReference                       DefaultSoundSubmixName;                           		// 0x0058(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringAssetReference                       DefaultBaseSoundMix;                              		// 0x0068(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringAssetReference                       VoiPSoundClass;                                   		// 0x0078(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	float                                              LowPassFilterResonance;                           		// 0x0088(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaximumConcurrentStreams;                         		// 0x008C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TArray<struct FAudioQualitySettings>               QualityLevels;                                    		// 0x0090(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      bAllowVirtualizedSounds : 1;                      		// 0x00A0(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData00[0x7];                               		// 0x00A1(0x0007) MISSED OFFSET
	struct FString                                     DialogueFilenameFormat;                           		// 0x00A8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AudioSettings");
		return ptr;
	}

};


// Class Engine.UserInterfaceSettings
// 0x0130 (0x0168 - 0x0038)
class UUserInterfaceSettings : public UDeveloperSettings
{
public:
	TEnumAsByte<enum class ERenderFocusRule>           RenderFocusRule;                                  		// 0x0038(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0039(0x0007) MISSED OFFSET
	struct FStringClassReference                       DefaultCursor;                                    		// 0x0040(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringClassReference                       TextEditBeamCursor;                               		// 0x0050(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringClassReference                       CrosshairsCursor;                                 		// 0x0060(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringClassReference                       HandCursor;                                       		// 0x0070(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringClassReference                       GrabHandCursor;                                   		// 0x0080(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringClassReference                       GrabHandClosedCursor;                             		// 0x0090(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringClassReference                       SlashedCircleCursor;                              		// 0x00A0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	float                                              ApplicationScale;                                 		// 0x00B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<enum class EUIScalingRule>             UIScaleRule;                                      		// 0x00B4(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x00B5(0x0003) MISSED OFFSET
	struct FStringClassReference                       CustomScalingRuleClass;                           		// 0x00B8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FRuntimeFloatCurve                          UIScaleCurve;                                     		// 0x00C8(0x0080) (CPF_Edit, CPF_Config)
	TArray<class UObject*>                             CursorClasses;                                    		// 0x0148(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class UClass*                                      CustomScalingRuleClassInstance;                   		// 0x0158(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UDPICustomScalingRule*                       CustomScalingRule;                                		// 0x0160(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UserInterfaceSettings");
		return ptr;
	}

};


// Class Engine.StreamingSettings
// 0x0030 (0x0068 - 0x0038)
class UStreamingSettings : public UDeveloperSettings
{
public:
	unsigned char                                      AsyncLoadingThreadEnabled : 1;                    		// 0x0038(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      WarnIfTimeLimitExceeded : 1;                      		// 0x0038(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0039(0x0003) MISSED OFFSET
	float                                              TimeLimitExceededMultiplier;                      		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              TimeLimitExceededMinTime;                         		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MinBulkDataSizeForAsyncLoading;                   		// 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AsyncIOBandwidthLimit;                            		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UseBackgroundLevelStreaming : 1;                  		// 0x004C(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      AsyncLoadingUseFullTimeLimit : 1;                 		// 0x004C(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      LoadAllStreamingLevels : 1;                       		// 0x004C(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData01[0x3];                               		// 0x004D(0x0003) MISSED OFFSET
	float                                              AsyncLoadingTimeLimit;                            		// 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              PriorityAsyncLoadingExtraTime;                    		// 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              LevelStreamingActorsUpdateTimeLimit;              		// 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                LevelStreamingComponentsRegistrationGranularity;  		// 0x005C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      EventDrivenLoaderEnabled : 1;                     		// 0x0060(0x0001) (CPF_Edit, CPF_Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StreamingSettings");
		return ptr;
	}

};


// Class Engine.GarbageCollectionSettings
// 0x0020 (0x0058 - 0x0038)
class UGarbageCollectionSettings : public UDeveloperSettings
{
public:
	float                                              TimeBetweenPurgingPendingKillObjects;             		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      FlushStreamingOnGC : 1;                           		// 0x003C(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      AllowParallelGC : 1;                              		// 0x003C(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      CreateGCClusters : 1;                             		// 0x003C(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      MergeGCClusters : 1;                              		// 0x003C(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData00[0x3];                               		// 0x003D(0x0003) MISSED OFFSET
	int                                                NumRetriesBeforeForcingGC;                        		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxObjectsNotConsideredByGC;                      		// 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                SizeOfPermanentObjectPool;                        		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxObjectsInGame;                                 		// 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxObjectsInEditor;                               		// 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GarbageCollectionSettings");
		return ptr;
	}

};


// Class Engine.MeshSimplificationSettings
// 0x0008 (0x0040 - 0x0038)
class UMeshSimplificationSettings : public UDeveloperSettings
{
public:
	struct FName                                       MeshReductionModuleName;                          		// 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshSimplificationSettings");
		return ptr;
	}

};


// Class Engine.NetworkSettings
// 0x0008 (0x0040 - 0x0038)
class UNetworkSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bVerifyPeer : 1;                                  		// 0x0038(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bEnableMultiplayerWorldOriginRebasing : 1;        		// 0x0038(0x0001) (CPF_Edit, CPF_Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetworkSettings");
		return ptr;
	}

};


// Class Engine.PhysicsSettings
// 0x0090 (0x00C8 - 0x0038)
class UPhysicsSettings : public UDeveloperSettings
{
public:
	float                                              DefaultGravityZ;                                  		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DefaultTerminalVelocity;                          		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DefaultFluidFriction;                             		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                SimulateScratchMemorySize;                        		// 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                RagdollAggregateThreshold;                        		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              TriangleMeshTriangleMinAreaThreshold;             		// 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnableAsyncScene : 1;                            		// 0x0050(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnableShapeSharing : 1;                          		// 0x0051(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnableAsyncSceneOnDedicatedServer : 1;           		// 0x0052(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnableShapeSharingOnDedicatedServer : 1;         		// 0x0053(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnablePCM : 1;                                   		// 0x0054(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bWarnMissingLocks : 1;                            		// 0x0055(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnable2DPhysics : 1;                             		// 0x0056(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<enum class ESettingsLockedAxis>        LockedAxis;                                       		// 0x0057(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_Deprecated, CPF_IsPlainOldData)
	TEnumAsByte<enum class ESettingsDOF>               DefaultDegreesOfFreedom;                          		// 0x0058(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0059(0x0003) MISSED OFFSET
	float                                              BounceThresholdVelocity;                          		// 0x005C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<enum class EFrictionCombineMode>       FrictionCombineMode;                              		// 0x0060(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<enum class EFrictionCombineMode>       RestitutionCombineMode;                           		// 0x0061(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                               		// 0x0062(0x0002) MISSED OFFSET
	float                                              MaxAngularVelocity;                               		// 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MaxDepenetrationVelocity;                         		// 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ContactOffsetMultiplier;                          		// 0x006C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MinContactOffset;                                 		// 0x0070(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MaxContactOffset;                                 		// 0x0074(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bSimulateSkeletalMeshOnDedicatedServer : 1;       		// 0x0078(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<enum class ECollisionTraceFlag>        DefaultShapeComplexity;                           		// 0x0079(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bDefaultHasComplexCollision : 1;                  		// 0x007A(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      bSuppressFaceRemapTable : 1;                      		// 0x007B(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bSupportUVFromHitResults : 1;                     		// 0x007C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bDisableActiveActors : 1;                         		// 0x007D(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bDisableCCD : 1;                                  		// 0x007E(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                               		// 0x007F(0x0001) MISSED OFFSET
	float                                              MaxPhysicsDeltaTime;                              		// 0x0080(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bSubstepping : 1;                                 		// 0x0084(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bSubsteppingAsync : 1;                            		// 0x0085(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                               		// 0x0086(0x0002) MISSED OFFSET
	float                                              MaxSubstepDeltaTime;                              		// 0x0088(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxSubsteps;                                      		// 0x008C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              SyncSceneSmoothingFactor;                         		// 0x0090(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AsyncSceneSmoothingFactor;                        		// 0x0094(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              InitialAverageFrameRate;                          		// 0x0098(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MaxPhysicsDeltaTimeOnDedicatedServer;             		// 0x009C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bSubsteppingOnDedicatedServer : 1;                		// 0x00A0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bSubsteppingAsyncOnDedicatedServer : 1;           		// 0x00A1(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                               		// 0x00A2(0x0002) MISSED OFFSET
	float                                              MaxSubstepDeltaTimeOnDedicatedServer;             		// 0x00A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxSubstepsOnDedicatedServer;                     		// 0x00A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              SyncSceneSmoothingFactorOnDedicatedServer;        		// 0x00AC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AsyncSceneSmoothingFactorOnDedicatedServer;       		// 0x00B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              InitialAverageFrameRateOnDedicatedServer;         		// 0x00B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TArray<struct FPhysicalSurfaceName>                PhysicalSurfaces;                                 		// 0x00B8(0x0010) (CPF_ZeroConstructor, CPF_Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsSettings");
		return ptr;
	}

};


// Class Engine.RendererSettings
// 0x0078 (0x00B0 - 0x0038)
class URendererSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bMobileHDR : 1;                                   		// 0x0038(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0039(0x0003) MISSED OFFSET
	uint32_t                                           MobileNumDynamicPointLights;                      		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bMobileDynamicPointLightsUseStaticBranch : 1;     		// 0x0040(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bMobileEnableStaticAndCSMShadowReceivers : 1;     		// 0x0040(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bMobileDisableVertexFog : 1;                      		// 0x0040(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bDiscardUnusedQualityLevels : 1;                  		// 0x0040(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bOcclusionCulling : 1;                            		// 0x0040(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0041(0x0003) MISSED OFFSET
	float                                              MinScreenRadiusForLights;                         		// 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MinScreenRadiusForEarlyZPass;                     		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MinScreenRadiusForCSMdepth;                       		// 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bPrecomputedVisibilityWarning : 1;                		// 0x0050(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bTextureStreaming : 1;                            		// 0x0050(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bUseDXT5NormalMaps : 1;                           		// 0x0050(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bClearCoatEnableSecondNormal : 1;                 		// 0x0050(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0051(0x0003) MISSED OFFSET
	int                                                ReflectionCaptureResolution;                      		// 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      ReflectionEnvironmentLightmapMixBasedOnRoughness : 1;		// 0x0058(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bForwardShading : 1;                              		// 0x0058(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bVertexFoggingForOpaque : 1;                      		// 0x0058(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bAllowStaticLighting : 1;                         		// 0x0058(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bUseNormalMapsForStaticLighting : 1;              		// 0x0058(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bGenerateMeshDistanceFields : 1;                  		// 0x0058(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bGenerateLandscapeGIData : 1;                     		// 0x0058(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData03[0x3];                               		// 0x0059(0x0003) MISSED OFFSET
	float                                              TessellationAdaptivePixelsPerTriangle;            		// 0x005C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bSeparateTranslucency : 1;                        		// 0x0060(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData04[0x3];                               		// 0x0061(0x0003) MISSED OFFSET
	TEnumAsByte<enum class ETranslucentSortPolicy>     TranslucentSortPolicy;                            		// 0x0064(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                               		// 0x0065(0x0003) MISSED OFFSET
	struct FVector                                     TranslucentSortAxis;                              		// 0x0068(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<enum class ECustomDepthStencil>        CustomDepthStencil;                               		// 0x0074(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                               		// 0x0075(0x0003) MISSED OFFSET
	unsigned char                                      bDefaultFeatureBloom : 1;                         		// 0x0078(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bDefaultFeatureAmbientOcclusion : 1;              		// 0x0078(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bDefaultFeatureAmbientOcclusionStaticFraction : 1;		// 0x0078(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bDefaultFeatureAutoExposure : 1;                  		// 0x0078(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData07[0x3];                               		// 0x0079(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EAutoExposureMethodUI>      DefaultFeatureAutoExposure;                       		// 0x007C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                               		// 0x007D(0x0003) MISSED OFFSET
	unsigned char                                      bDefaultFeatureMotionBlur : 1;                    		// 0x0080(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bDefaultFeatureLensFlare : 1;                     		// 0x0080(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData09[0x3];                               		// 0x0081(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EAntiAliasingMethod>        DefaultFeatureAntiAliasing;                       		// 0x0084(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                               		// 0x0085(0x0003) MISSED OFFSET
	unsigned char                                      bStencilForLODDither : 1;                         		// 0x0088(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData11[0x3];                               		// 0x0089(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EEarlyZPass>                EarlyZPass;                                       		// 0x008C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                               		// 0x008D(0x0003) MISSED OFFSET
	unsigned char                                      bEarlyZPassMovable : 1;                           		// 0x0090(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bDBuffer : 1;                                     		// 0x0090(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData13[0x3];                               		// 0x0091(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EClearSceneOptions>         ClearSceneMethod;                                 		// 0x0094(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                               		// 0x0095(0x0003) MISSED OFFSET
	unsigned char                                      bBasePassOutputsVelocity : 1;                     		// 0x0098(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bSelectiveBasePassOutputs : 1;                    		// 0x0098(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bDefaultParticleCutouts : 1;                      		// 0x0098(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bGlobalClipPlane : 1;                             		// 0x0098(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData15[0x3];                               		// 0x0099(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EGBufferFormat>             GBufferFormat;                                    		// 0x009C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData16[0x3];                               		// 0x009D(0x0003) MISSED OFFSET
	unsigned char                                      bUseGPUMorphTargets : 1;                          		// 0x00A0(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bInstancedStereo : 1;                             		// 0x00A0(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bMultiView : 1;                                   		// 0x00A0(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bMobileMultiView : 1;                             		// 0x00A0(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData17[0x3];                               		// 0x00A1(0x0003) MISSED OFFSET
	float                                              WireframeCullThreshold;                           		// 0x00A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bSupportStationarySkylight : 1;                   		// 0x00A8(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bSupportLowQualityLightmaps : 1;                  		// 0x00A8(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bSupportPointLightWholeSceneShadows : 1;          		// 0x00A8(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bSupportAtmosphericFog : 1;                       		// 0x00A8(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bSupportSkinCacheShaders : 1;                     		// 0x00A8(0x0001) (CPF_Edit, CPF_Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RendererSettings");
		return ptr;
	}

};


// Class Engine.RendererOverrideSettings
// 0x0008 (0x0040 - 0x0038)
class URendererOverrideSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bSupportAllShaderPermutations : 1;                		// 0x0038(0x0001) (CPF_Edit, CPF_Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RendererOverrideSettings");
		return ptr;
	}

};


// Class Engine.TextureLODSettings
// 0x0010 (0x0038 - 0x0028)
class UTextureLODSettings : public UObject
{
public:
	TArray<struct FTextureLODGroup>                    TextureLODGroups;                                 		// 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureLODSettings");
		return ptr;
	}

};


// Class Engine.DeviceProfile
// 0x0088 (0x00C0 - 0x0038)
class UDeviceProfile : public UTextureLODSettings
{
public:
	struct FString                                     DeviceType;                                       		// 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_EditConst)
	struct FString                                     BaseProfileName;                                  		// 0x0048(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	class UObject*                                     Parent;                                           		// 0x0058(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                               		// 0x0060(0x0008) MISSED OFFSET
	TArray<struct FString>                             CVars;                                            		// 0x0068(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData01[0x48];                              		// 0x0078(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DeviceProfile");
		return ptr;
	}

};


// Class Engine.DeviceProfileManager
// 0x00E8 (0x0110 - 0x0028)
class UDeviceProfileManager : public UObject
{
public:
	TArray<class UObject*>                             Profiles;                                         		// 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0xD8];                              		// 0x0038(0x00D8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DeviceProfileManager");
		return ptr;
	}

};


// Class Engine.DialogueVoice
// 0x0018 (0x0040 - 0x0028)
class UDialogueVoice : public UObject
{
public:
	TEnumAsByte<enum class EGrammaticalGender>         Gender;                                           		// 0x0028(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EGrammaticalNumber>         Plurality;                                        		// 0x0029(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                               		// 0x002A(0x0002) MISSED OFFSET
	struct FGuid                                       LocalizationGUID;                                 		// 0x002C(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DialogueVoice");
		return ptr;
	}

};


// Class Engine.DialogueWave
// 0x0048 (0x0070 - 0x0028)
class UDialogueWave : public UObject
{
public:
	unsigned char                                      bMature : 1;                                      		// 0x0028(0x0001) (CPF_Edit)
	unsigned char                                      bOverride_SubtitleOverride : 1;                   		// 0x0028(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0029(0x0007) MISSED OFFSET
	struct FString                                     SpokenText;                                       		// 0x0030(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FString                                     SubtitleOverride;                                 		// 0x0040(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FDialogueContextMapping>             ContextMappings;                                  		// 0x0050(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FGuid                                       LocalizationGUID;                                 		// 0x0060(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DialogueWave");
		return ptr;
	}

};


// Class Engine.Distribution
// 0x0008 (0x0030 - 0x0028)
class UDistribution : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Distribution");
		return ptr;
	}

};


// Class Engine.DistributionFloat
// 0x0008 (0x0038 - 0x0030)
class UDistributionFloat : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                  		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      bBakedDataSuccesfully : 1;                        		// 0x0030(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloat");
		return ptr;
	}

};


// Class Engine.DistributionFloatConstant
// 0x0008 (0x0040 - 0x0038)
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                         		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatConstant");
		return ptr;
	}

};


// Class Engine.DistributionFloatParameterBase
// 0x0020 (0x0060 - 0x0040)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                    		// 0x0040(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinInput;                                         		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxInput;                                         		// 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinOutput;                                        		// 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxOutput;                                        		// 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class DistributionParamMode>      ParamMode;                                        		// 0x0058(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatParameterBase");
		return ptr;
	}

};


// Class Engine.DistributionFloatParticleParameter
// 0x0000 (0x0060 - 0x0060)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatParticleParameter");
		return ptr;
	}

};


// Class Engine.DistributionFloatConstantCurve
// 0x0018 (0x0050 - 0x0038)
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                    		// 0x0038(0x0018) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatConstantCurve");
		return ptr;
	}

};


// Class Engine.DistributionFloatUniform
// 0x0008 (0x0040 - 0x0038)
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Min;                                              		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Max;                                              		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatUniform");
		return ptr;
	}

};


// Class Engine.DistributionFloatUniformCurve
// 0x0018 (0x0050 - 0x0038)
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                    		// 0x0038(0x0018) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatUniformCurve");
		return ptr;
	}

};


// Class Engine.DistributionVector
// 0x0008 (0x0038 - 0x0030)
class UDistributionVector : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                  		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      bIsDirty : 1;                                     		// 0x0030(0x0001)
	unsigned char                                      bBakedDataSuccesfully : 1;                        		// 0x0030(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVector");
		return ptr;
	}

};


// Class Engine.DistributionVectorConstant
// 0x0018 (0x0050 - 0x0038)
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                     Constant;                                         		// 0x0038(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLockAxes : 1;                                    		// 0x0044(0x0001)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0045(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EDistributionVectorLockFlags> LockedAxes;                                       		// 0x0048(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorConstant");
		return ptr;
	}

};


// Class Engine.DistributionVectorParameterBase
// 0x0040 (0x0090 - 0x0050)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	struct FName                                       ParameterName;                                    		// 0x0050(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     MinInput;                                         		// 0x0058(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     MaxInput;                                         		// 0x0064(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     MinOutput;                                        		// 0x0070(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     MaxOutput;                                        		// 0x007C(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class DistributionParamMode>      ParamModes[0x3];                                  		// 0x0088(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorParameterBase");
		return ptr;
	}

};


// Class Engine.DistributionVectorParticleParameter
// 0x0000 (0x0090 - 0x0090)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorParticleParameter");
		return ptr;
	}

};


// Class Engine.DistributionVectorConstantCurve
// 0x0020 (0x0058 - 0x0038)
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                    		// 0x0038(0x0018) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bLockAxes : 1;                                    		// 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0051(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EDistributionVectorLockFlags> LockedAxes;                                       		// 0x0054(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorConstantCurve");
		return ptr;
	}

};


// Class Engine.DistributionVectorUniform
// 0x0028 (0x0060 - 0x0038)
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                                     Max;                                              		// 0x0038(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     Min;                                              		// 0x0044(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLockAxes : 1;                                    		// 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0051(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EDistributionVectorLockFlags> LockedAxes;                                       		// 0x0054(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EDistributionVectorMirrorFlags> MirrorFlags[0x3];                                 		// 0x0055(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseExtremes : 1;                                 		// 0x0058(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorUniform");
		return ptr;
	}

};


// Class Engine.DistributionVectorUniformCurve
// 0x0028 (0x0060 - 0x0038)
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                    		// 0x0038(0x0018) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bLockAxes1 : 1;                                   		// 0x0050(0x0001)
	unsigned char                                      bLockAxes2 : 1;                                   		// 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0051(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EDistributionVectorLockFlags> LockedAxes[0x2];                                  		// 0x0054(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EDistributionVectorMirrorFlags> MirrorFlags[0x3];                                 		// 0x0056(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0059(0x0003) MISSED OFFSET
	unsigned char                                      bUseExtremes : 1;                                 		// 0x005C(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorUniformCurve");
		return ptr;
	}

};


// Class Engine.DPICustomScalingRule
// 0x0000 (0x0028 - 0x0028)
class UDPICustomScalingRule : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DPICustomScalingRule");
		return ptr;
	}

};


// Class Engine.DynamicBlueprintBinding
// 0x0000 (0x0028 - 0x0028)
class UDynamicBlueprintBinding : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicBlueprintBinding");
		return ptr;
	}

};


// Class Engine.ComponentDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{
public:
	TArray<struct FBlueprintComponentDelegateBinding>  ComponentDelegateBindings;                        		// 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ComponentDelegateBinding");
		return ptr;
	}

};


// Class Engine.InputDelegateBinding
// 0x0000 (0x0028 - 0x0028)
class UInputDelegateBinding : public UDynamicBlueprintBinding
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputDelegateBinding");
		return ptr;
	}

};


// Class Engine.InputActionDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputActionDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings;                      		// 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputActionDelegateBinding");
		return ptr;
	}

};


// Class Engine.InputAxisDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputAxisDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisDelegateBinding>  InputAxisDelegateBindings;                        		// 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputAxisDelegateBinding");
		return ptr;
	}

};


// Class Engine.InputAxisKeyDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings;                     		// 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputAxisKeyDelegateBinding");
		return ptr;
	}

};


// Class Engine.InputVectorAxisDelegateBinding
// 0x0000 (0x0038 - 0x0038)
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputVectorAxisDelegateBinding");
		return ptr;
	}

};


// Class Engine.InputKeyDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputKeyDelegateBinding>   InputKeyDelegateBindings;                         		// 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputKeyDelegateBinding");
		return ptr;
	}

};


// Class Engine.InputTouchDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputTouchDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings;                       		// 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputTouchDelegateBinding");
		return ptr;
	}

};


// Class Engine.EdGraph
// 0x0098 (0x00C0 - 0x0028)
class UEdGraph : public UObject
{
public:
	class UClass*                                      Schema;                                           		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UEdGraphNode*>                        Nodes;                                            		// 0x0030(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bEditable : 1;                                    		// 0x0040(0x0001)
	unsigned char                                      bAllowDeletion : 1;                               		// 0x0040(0x0001)
	unsigned char                                      bAllowRenaming : 1;                               		// 0x0040(0x0001)
	unsigned char                                      UnknownData00[0x7F];                              		// 0x0041(0x007F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EdGraph");
		return ptr;
	}

};


// Class Engine.EdGraphNode_Documentation
// 0x0020 (0x00C0 - 0x00A0)
class UEdGraphNode_Documentation : public UEdGraphNode
{
public:
	struct FString                                     Link;                                             		// 0x00A0(0x0010) (CPF_ZeroConstructor)
	struct FString                                     Excerpt;                                          		// 0x00B0(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EdGraphNode_Documentation");
		return ptr;
	}

};


// Class Engine.EdGraphSchema
// 0x0000 (0x0028 - 0x0028)
class UEdGraphSchema : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EdGraphSchema");
		return ptr;
	}

};


// Class Engine.ImportantToggleSettingInterface
// 0x0000 (0x0028 - 0x0028)
class UImportantToggleSettingInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ImportantToggleSettingInterface");
		return ptr;
	}

};


// Class Engine.EndUserSettings
// 0x0010 (0x0038 - 0x0028)
class UEndUserSettings : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET
	unsigned char                                      bSendAnonymousUsageDataToEpic : 1;                		// 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bSendMeanTimeBetweenFailureDataToEpic : 1;        		// 0x0031(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bAllowUserIdInUsageData : 1;                      		// 0x0032(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EndUserSettings");
		return ptr;
	}

};


// Class Engine.EngineHandlerComponentFactory
// 0x0000 (0x0028 - 0x0028)
class UEngineHandlerComponentFactory : public UHandlerComponentFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EngineHandlerComponentFactory");
		return ptr;
	}

};


// Class Engine.Exporter
// 0x0040 (0x0068 - 0x0028)
class UExporter : public UObject
{
public:
	class UClass*                                      SupportedClass;                                   		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UObject*                                     ExportRootScope;                                  		// 0x0030(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FString>                             FormatExtension;                                  		// 0x0038(0x0010) (CPF_ZeroConstructor)
	TArray<struct FString>                             FormatDescription;                                		// 0x0048(0x0010) (CPF_ZeroConstructor)
	int                                                PreferredFormatIndex;                             		// 0x0058(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                TextIndent;                                       		// 0x005C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bText : 1;                                        		// 0x0060(0x0001)
	unsigned char                                      bSelectedOnly : 1;                                		// 0x0060(0x0001)
	unsigned char                                      bForceFileOperations : 1;                         		// 0x0060(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Exporter");
		return ptr;
	}

};


// Class Engine.ExtendedReflectionSettings
// 0x0080 (0x00A8 - 0x0028)
class UExtendedReflectionSettings : public UObject
{
public:
	float                                              GlobalOverrideIntensity;                          		// 0x0028(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                StreamingSectionSize;                             		// 0x002C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FExtendedReflectionSharedCubemap>    SharedCubemaps;                                   		// 0x0030(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst)
	TArray<class UTextureCube*>                        ReferencedCubemaps;                               		// 0x0040(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData00[0x58];                              		// 0x0050(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ExtendedReflectionSettings");
		return ptr;
	}

};


// Class Engine.FontImportOptions
// 0x00B0 (0x00D8 - 0x0028)
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                             		// 0x0028(0x00B0) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FontImportOptions");
		return ptr;
	}

};


// Class Engine.Font
// 0x0198 (0x01C0 - 0x0028)
class UFont : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET
	TEnumAsByte<enum class EFontCacheType>             FontCacheType;                                    		// 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                               		// 0x0031(0x0007) MISSED OFFSET
	TArray<struct FFontCharacter>                      Characters;                                       		// 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<class UTexture2D*>                          Textures;                                         		// 0x0048(0x0010) (CPF_ZeroConstructor)
	int                                                IsRemapped;                                       		// 0x0058(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              EmScale;                                          		// 0x005C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Ascent;                                           		// 0x0060(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Descent;                                          		// 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Leading;                                          		// 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                Kerning;                                          		// 0x006C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FFontImportOptionsData                      ImportOptions;                                    		// 0x0070(0x00B0) (CPF_Edit)
	int                                                NumCharacters;                                    		// 0x0120(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0124(0x0004) MISSED OFFSET
	TArray<int>                                        MaxCharHeight;                                    		// 0x0128(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	float                                              ScalingFactor;                                    		// 0x0138(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LegacyFontSize;                                   		// 0x013C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       LegacyFontName;                                   		// 0x0140(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FCompositeFont                              CompositeFont;                                    		// 0x0148(0x0028)
	unsigned char                                      UnknownData03[0x50];                              		// 0x0170(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Font");
		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect_Base
// 0x0000 (0x0028 - 0x0028)
class UHapticFeedbackEffect_Base : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HapticFeedbackEffect_Base");
		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect_Buffer
// 0x0040 (0x0068 - 0x0028)
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
{
public:
	TArray<unsigned char>                              Amplitudes;                                       		// 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	int                                                SampleRate;                                       		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2C];                              		// 0x003C(0x002C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HapticFeedbackEffect_Buffer");
		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect_Curve
// 0x0100 (0x0128 - 0x0028)
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
{
public:
	struct FHapticFeedbackDetails_Curve                HapticDetails;                                    		// 0x0028(0x0100) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HapticFeedbackEffect_Curve");
		return ptr;
	}

};


// Class Engine.SoundConcurrency
// 0x0010 (0x0038 - 0x0028)
class USoundConcurrency : public UObject
{
public:
	struct FSoundConcurrencySettings                   Concurrency;                                      		// 0x0028(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundConcurrency");
		return ptr;
	}

};


// Class Engine.SoundEffectPreset
// 0x0018 (0x0040 - 0x0028)
class USoundEffectPreset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                              		// 0x0028(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundEffectPreset");
		return ptr;
	}

};


// Class Engine.SoundEffectBase
// 0x0068 (0x0090 - 0x0028)
class USoundEffectBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x68];                              		// 0x0028(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundEffectBase");
		return ptr;
	}

};


// Class Engine.SoundEffectSourcePreset
// 0x0000 (0x0040 - 0x0040)
class USoundEffectSourcePreset : public USoundEffectPreset
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundEffectSourcePreset");
		return ptr;
	}

};


// Class Engine.SoundEffectSource
// 0x0000 (0x0090 - 0x0090)
class USoundEffectSource : public USoundEffectBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundEffectSource");
		return ptr;
	}

};


// Class Engine.SoundEffectSubmixPreset
// 0x0000 (0x0040 - 0x0040)
class USoundEffectSubmixPreset : public USoundEffectPreset
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundEffectSubmixPreset");
		return ptr;
	}

};


// Class Engine.SoundEffectSubmix
// 0x0000 (0x0090 - 0x0090)
class USoundEffectSubmix : public USoundEffectBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundEffectSubmix");
		return ptr;
	}

};


// Class Engine.SoundSubmix
// 0x0030 (0x0058 - 0x0028)
class USoundSubmix : public UObject
{
public:
	TArray<class USoundSubmix*>                        ChildSubmixes;                                    		// 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	class USoundSubmix*                                ParentSubmix;                                     		// 0x0038(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class USoundEffectSubmixPreset*>            SubmixEffectChain;                                		// 0x0040(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	float                                              OutputWetLevel;                                   		// 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundSubmix");
		return ptr;
	}

};


// Class Engine.SoundBase
// 0x0068 (0x0090 - 0x0028)
class USoundBase : public UObject
{
public:
	class USoundClass*                                 SoundClassObject;                                 		// 0x0028(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class USoundSubmix*                                SoundSubmixObject;                                		// 0x0030(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDebug : 1;                                       		// 0x0038(0x0001) (CPF_Edit)
	unsigned char                                      bOverrideConcurrency : 1;                         		// 0x0038(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bIgnoreFocus : 1;                                 		// 0x0038(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0039(0x0007) MISSED OFFSET
	class USoundConcurrency*                           SoundConcurrencySettings;                         		// 0x0040(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FSoundConcurrencySettings                   ConcurrencyOverrides;                             		// 0x0048(0x0010) (CPF_Edit, CPF_BlueprintVisible)
	TEnumAsByte<enum class EMaxConcurrentResolutionRule> MaxConcurrentResolutionRule;                      		// 0x0058(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0059(0x0003) MISSED OFFSET
	int                                                MaxConcurrentPlayCount;                           		// 0x005C(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              Duration;                                         		// 0x0060(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0064(0x0004) MISSED OFFSET
	class USoundAttenuation*                           AttenuationSettings;                              		// 0x0068(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Priority;                                         		// 0x0070(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                               		// 0x0074(0x0004) MISSED OFFSET
	TArray<class USoundEffectSourcePreset*>            SourceEffectChain;                                		// 0x0078(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData04[0x8];                               		// 0x0088(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundBase");
		return ptr;
	}

};


// Class Engine.SoundGroups
// 0x0060 (0x0088 - 0x0028)
class USoundGroups : public UObject
{
public:
	TArray<struct FSoundGroup>                         SoundGroupProfiles;                               		// 0x0028(0x0010) (CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData00[0x50];                              		// 0x0038(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundGroups");
		return ptr;
	}

};


// Class Engine.SoundWave
// 0x01D0 (0x0260 - 0x0090)
class USoundWave : public USoundBase
{
public:
	int                                                CompressionQuality;                               		// 0x0090(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLooping : 1;                                     		// 0x0094(0x0001) (CPF_Edit)
	unsigned char                                      bStreaming : 1;                                   		// 0x0094(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0095(0x0003) MISSED OFFSET
	int                                                StreamingPriority;                                		// 0x0098(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bMature : 1;                                      		// 0x009C(0x0001) (CPF_Edit)
	unsigned char                                      bManualWordWrap : 1;                              		// 0x009C(0x0001) (CPF_Edit)
	unsigned char                                      bSingleLine : 1;                                  		// 0x009C(0x0001) (CPF_Edit)
	unsigned char                                      bVirtualizeWhenSilent : 1;                        		// 0x009C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x3];                               		// 0x009D(0x0003) MISSED OFFSET
	TEnumAsByte<enum class ESoundGroup>                SoundGroup;                                       		// 0x00A0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                               		// 0x00A1(0x0007) MISSED OFFSET
	struct FString                                     SpokenText;                                       		// 0x00A8(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	float                                              SubtitlePriority;                                 		// 0x00B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Volume;                                           		// 0x00BC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Pitch;                                            		// 0x00C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumChannels;                                      		// 0x00C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	int                                                SampleRate;                                       		// 0x00C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	int                                                RawPCMDataSize;                                   		// 0x00CC(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FSubtitleCue>                        Subtitles;                                        		// 0x00D0(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FLocalizedSubtitle>                  LocalizedSubtitles;                               		// 0x00E0(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData03[0x170];                             		// 0x00F0(0x0170) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundWave");
		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect_SoundWave
// 0x0038 (0x0060 - 0x0028)
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
{
public:
	class USoundWave*                                  SoundWave;                                        		// 0x0028(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                              		// 0x0030(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HapticFeedbackEffect_SoundWave");
		return ptr;
	}

};


// Class Engine.InheritableComponentHandler
// 0x0010 (0x0038 - 0x0028)
class UInheritableComponentHandler : public UObject
{
public:
	TArray<struct FComponentOverrideRecord>            Records;                                          		// 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InheritableComponentHandler");
		return ptr;
	}

};


// Class Engine.PlayerInput
// 0x0370 (0x0398 - 0x0028)
class UPlayerInput : public UObject
{
public:
	unsigned char                                      UnknownData00[0xF8];                              		// 0x0028(0x00F8) MISSED OFFSET
	TArray<struct FKeyBind>                            DebugExecBindings;                                		// 0x0120(0x0010) (CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData01[0x30];                              		// 0x0130(0x0030) MISSED OFFSET
	TArray<struct FName>                               InvertedAxis;                                     		// 0x0160(0x0010) (CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData02[0x228];                             		// 0x0170(0x0228) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerInput");
		return ptr;
	}


	void SetMouseSensitivity(float Sensitivity);
	void SetBind(const struct FName& BindName, const struct FString& Command);
	void InvertAxisKey(const struct FKey& AxisKey);
	void InvertAxis(const struct FName& AxisName);
	void ClearSmoothing();
};


// Class Engine.InputSettings
// 0x0080 (0x00A8 - 0x0028)
class UInputSettings : public UObject
{
public:
	TArray<struct FInputAxisConfigEntry>               AxisConfig;                                       		// 0x0028(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      bAltEnterTogglesFullscreen : 1;                   		// 0x0038(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bF11TogglesFullscreen : 1;                        		// 0x0038(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bUseMouseForTouch : 1;                            		// 0x0038(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bEnableMouseSmoothing : 1;                        		// 0x0038(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bEnableFOVScaling : 1;                            		// 0x0038(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0039(0x0003) MISSED OFFSET
	float                                              FOVScale;                                         		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DoubleClickTime;                                  		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bCaptureMouseOnLaunch : 1;                        		// 0x0044(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<enum class EMouseCaptureMode>          DefaultViewportMouseCaptureMode;                  		// 0x0045(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bDefaultViewportMouseLock : 1;                    		// 0x0046(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_Deprecated, CPF_IsPlainOldData)
	TEnumAsByte<enum class EMouseLockMode>             DefaultViewportMouseLockMode;                     		// 0x0047(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TArray<struct FInputActionKeyMapping>              ActionMappings;                                   		// 0x0048(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FInputAxisKeyMapping>                AxisMappings;                                     		// 0x0058(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      bAlwaysShowTouchInterface : 1;                    		// 0x0068(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bShowConsoleOnFourFingerTap : 1;                  		// 0x0069(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                               		// 0x006A(0x0006) MISSED OFFSET
	struct FStringAssetReference                       DefaultTouchInterface;                            		// 0x0070(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FKey                                        ConsoleKey;                                       		// 0x0080(0x0018) (CPF_Config, CPF_Deprecated)
	TArray<struct FKey>                                ConsoleKeys;                                      		// 0x0098(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputSettings");
		return ptr;
	}

};


// Class Engine.InterpCurveEdSetup
// 0x0018 (0x0040 - 0x0028)
class UInterpCurveEdSetup : public UObject
{
public:
	TArray<struct FCurveEdTab>                         Tabs;                                             		// 0x0028(0x0010) (CPF_ZeroConstructor)
	int                                                ActiveTab;                                        		// 0x0038(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpCurveEdSetup");
		return ptr;
	}

};


// Class Engine.InterpData
// 0x0048 (0x0070 - 0x0028)
class UInterpData : public UObject
{
public:
	float                                              InterpLength;                                     		// 0x0028(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	float                                              PathBuildTime;                                    		// 0x002C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UInterpGroup*>                        InterpGroups;                                     		// 0x0030(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x0040(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              EdSectionStart;                                   		// 0x0048(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              EdSectionEnd;                                     		// 0x004C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bShouldBakeAndPrune : 1;                          		// 0x0050(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0051(0x0007) MISSED OFFSET
	class UInterpGroupDirector*                        CachedDirectorGroup;                              		// 0x0058(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FName>                               AllEventNames;                                    		// 0x0060(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpData");
		return ptr;
	}

};


// Class Engine.InterpFilter
// 0x0010 (0x0038 - 0x0028)
class UInterpFilter : public UObject
{
public:
	struct FString                                     Caption;                                          		// 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpFilter");
		return ptr;
	}

};


// Class Engine.InterpFilter_Classes
// 0x0000 (0x0038 - 0x0038)
class UInterpFilter_Classes : public UInterpFilter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpFilter_Classes");
		return ptr;
	}

};


// Class Engine.InterpFilter_Custom
// 0x0000 (0x0038 - 0x0038)
class UInterpFilter_Custom : public UInterpFilter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpFilter_Custom");
		return ptr;
	}

};


// Class Engine.InterpGroup
// 0x0028 (0x0050 - 0x0028)
class UInterpGroup : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET
	TArray<class UInterpTrack*>                        InterpTracks;                                     		// 0x0030(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	struct FName                                       GroupName;                                        		// 0x0040(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      GroupColor;                                       		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCollapsed : 1;                                   		// 0x004C(0x0001)
	unsigned char                                      bVisible : 1;                                     		// 0x004C(0x0001) (CPF_Transient)
	unsigned char                                      bIsFolder : 1;                                    		// 0x004C(0x0001)
	unsigned char                                      bIsParented : 1;                                  		// 0x004C(0x0001)
	unsigned char                                      bIsSelected : 1;                                  		// 0x004C(0x0001) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroup");
		return ptr;
	}

};


// Class Engine.InterpGroupCamera
// 0x0010 (0x0060 - 0x0050)
class UInterpGroupCamera : public UInterpGroup
{
public:
	class UCameraAnim*                                 CameraAnimInst;                                   		// 0x0050(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              CompressTolerance;                                		// 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupCamera");
		return ptr;
	}

};


// Class Engine.InterpGroupDirector
// 0x0000 (0x0050 - 0x0050)
class UInterpGroupDirector : public UInterpGroup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupDirector");
		return ptr;
	}

};


// Class Engine.InterpGroupInst
// 0x0020 (0x0048 - 0x0028)
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                            		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class AActor*                                      GroupActor;                                       		// 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UInterpTrackInst*>                    TrackInst;                                        		// 0x0038(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupInst");
		return ptr;
	}

};


// Class Engine.InterpGroupInstCamera
// 0x0000 (0x0048 - 0x0048)
class UInterpGroupInstCamera : public UInterpGroupInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupInstCamera");
		return ptr;
	}

};


// Class Engine.InterpGroupInstDirector
// 0x0000 (0x0048 - 0x0048)
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupInstDirector");
		return ptr;
	}

};


// Class Engine.InterpTrack
// 0x0048 (0x0070 - 0x0028)
class UInterpTrack : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x0028(0x0010) MISSED OFFSET
	TArray<class UInterpTrack*>                        SubTracks;                                        		// 0x0038(0x0010) (CPF_ZeroConstructor)
	class UClass*                                      TrackInstClass;                                   		// 0x0048(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ETrackActiveCondition>      ActiveCondition;                                  		// 0x0050(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                               		// 0x0051(0x0007) MISSED OFFSET
	struct FString                                     TrackTitle;                                       		// 0x0058(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bOnePerGroup : 1;                                 		// 0x0068(0x0001)
	unsigned char                                      bDirGroupOnly : 1;                                		// 0x0068(0x0001)
	unsigned char                                      bDisableTrack : 1;                                		// 0x0068(0x0001)
	unsigned char                                      bIsSelected : 1;                                  		// 0x0068(0x0001) (CPF_Transient)
	unsigned char                                      bIsAnimControlTrack : 1;                          		// 0x0068(0x0001)
	unsigned char                                      bSubTrackOnly : 1;                                		// 0x0068(0x0001)
	unsigned char                                      bVisible : 1;                                     		// 0x0068(0x0001) (CPF_Transient)
	unsigned char                                      bIsRecording : 1;                                 		// 0x0068(0x0001) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrack");
		return ptr;
	}

};


// Class Engine.InterpTrackBoolProp
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackBoolProp : public UInterpTrack
{
public:
	TArray<struct FBoolTrackKey>                       BoolTrack;                                        		// 0x0070(0x0010) (CPF_ZeroConstructor)
	struct FName                                       PropertyName;                                     		// 0x0080(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackBoolProp");
		return ptr;
	}

};


// Class Engine.InterpTrackDirector
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray<struct FDirectorTrackCut>                   CutTrack;                                         		// 0x0070(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bSimulateCameraCutsOnClients : 1;                 		// 0x0080(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackDirector");
		return ptr;
	}

};


// Class Engine.InterpTrackEvent
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray<struct FEventTrackKey>                      EventTrack;                                       		// 0x0070(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                      		// 0x0080(0x0001) (CPF_Edit)
	unsigned char                                      bFireEventsWhenBackwards : 1;                     		// 0x0080(0x0001) (CPF_Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;               		// 0x0080(0x0001) (CPF_Edit)
	unsigned char                                      bUseCustomEventName : 1;                          		// 0x0080(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackEvent");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatBase
// 0x0020 (0x0090 - 0x0070)
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                       		// 0x0070(0x0018) (CPF_ZeroConstructor)
	float                                              CurveTension;                                     		// 0x0088(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatBase");
		return ptr;
	}

};


// Class Engine.InterpTrackAnimControl
// 0x0020 (0x00B0 - 0x0090)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	struct FName                                       SlotName;                                         		// 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FAnimControlTrackKey>                AnimSeqs;                                         		// 0x0098(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bSkipAnimNotifiers : 1;                           		// 0x00A8(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackAnimControl");
		return ptr;
	}

};


// Class Engine.InterpTrackFade
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned char                                      bPersistFade : 1;                                 		// 0x0090(0x0001) (CPF_Edit)
	unsigned char                                      bFadeAudio : 1;                                   		// 0x0090(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0091(0x0003) MISSED OFFSET
	struct FLinearColor                                FadeColor;                                        		// 0x0094(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFade");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatAnimBPParam
// 0x0020 (0x00B0 - 0x0090)
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{
public:
	class UAnimBlueprintGeneratedClass*                AnimBlueprintClass;                               		// 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      AnimClass;                                        		// 0x0098(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       ParamName;                                        		// 0x00A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                               		// 0x00A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatAnimBPParam");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatMaterialParam
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                  		// 0x0090(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FName                                       ParamName;                                        		// 0x00A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatParticleParam
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                        		// 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatParticleParam");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatProp
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatProp");
		return ptr;
	}

};


// Class Engine.InterpTrackMove
// 0x0058 (0x00C8 - 0x0070)
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                         		// 0x0070(0x0018) (CPF_ZeroConstructor)
	struct FInterpCurveVector                          EulerTrack;                                       		// 0x0088(0x0018) (CPF_ZeroConstructor)
	struct FInterpLookupTrack                          LookupTrack;                                      		// 0x00A0(0x0010)
	struct FName                                       LookAtGroupName;                                  		// 0x00B0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LinCurveTension;                                  		// 0x00B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AngCurveTension;                                  		// 0x00BC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseQuatInterpolation : 1;                        		// 0x00C0(0x0001) (CPF_Edit)
	unsigned char                                      bShowArrowAtKeys : 1;                             		// 0x00C0(0x0001) (CPF_Edit)
	unsigned char                                      bDisableMovement : 1;                             		// 0x00C0(0x0001) (CPF_Edit)
	unsigned char                                      bShowTranslationOnCurveEd : 1;                    		// 0x00C0(0x0001) (CPF_Edit)
	unsigned char                                      bShowRotationOnCurveEd : 1;                       		// 0x00C0(0x0001) (CPF_Edit)
	unsigned char                                      bHide3DTrack : 1;                                 		// 0x00C0(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x00C1(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EInterpTrackMoveRotMode>    RotMode;                                          		// 0x00C4(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackMove");
		return ptr;
	}

};


// Class Engine.InterpTrackMoveAxis
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{
public:
	TEnumAsByte<enum class EInterpMoveAxis>            MoveAxis;                                         		// 0x0090(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0091(0x0007) MISSED OFFSET
	struct FInterpLookupTrack                          LookupTrack;                                      		// 0x0098(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackMoveAxis");
		return ptr;
	}

};


// Class Engine.InterpTrackSlomo
// 0x0000 (0x0090 - 0x0090)
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackSlomo");
		return ptr;
	}

};


// Class Engine.InterpTrackLinearColorBase
// 0x0020 (0x0090 - 0x0070)
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	struct FInterpCurveLinearColor                     LinearColorTrack;                                 		// 0x0070(0x0018) (CPF_ZeroConstructor)
	float                                              CurveTension;                                     		// 0x0088(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackLinearColorBase");
		return ptr;
	}

};


// Class Engine.InterpTrackLinearColorProp
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackLinearColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackParticleReplay
// 0x0010 (0x0080 - 0x0070)
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	TArray<struct FParticleReplayTrackKey>             TrackKeys;                                        		// 0x0070(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackParticleReplay");
		return ptr;
	}

};


// Class Engine.InterpTrackToggle
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray<struct FToggleTrackKey>                     ToggleTrack;                                      		// 0x0070(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bActivateSystemEachUpdate : 1;                    		// 0x0080(0x0001) (CPF_Edit)
	unsigned char                                      bActivateWithJustAttachedFlag : 1;                		// 0x0080(0x0001) (CPF_Edit)
	unsigned char                                      bFireEventsWhenForwards : 1;                      		// 0x0080(0x0001) (CPF_Edit)
	unsigned char                                      bFireEventsWhenBackwards : 1;                     		// 0x0080(0x0001) (CPF_Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;               		// 0x0080(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackToggle");
		return ptr;
	}

};


// Class Engine.InterpTrackVectorBase
// 0x0020 (0x0090 - 0x0070)
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                      		// 0x0070(0x0018) (CPF_ZeroConstructor)
	float                                              CurveTension;                                     		// 0x0088(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVectorBase");
		return ptr;
	}

};


// Class Engine.InterpTrackAudioMaster
// 0x0000 (0x0090 - 0x0090)
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackAudioMaster");
		return ptr;
	}

};


// Class Engine.InterpTrackColorProp
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackColorScale
// 0x0000 (0x0090 - 0x0090)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackColorScale");
		return ptr;
	}

};


// Class Engine.InterpTrackSound
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray<struct FSoundTrackKey>                      Sounds;                                           		// 0x0090(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bPlayOnReverse : 1;                               		// 0x00A0(0x0001) (CPF_Edit)
	unsigned char                                      bContinueSoundOnMatineeEnd : 1;                   		// 0x00A0(0x0001) (CPF_Edit)
	unsigned char                                      bSuppressSubtitles : 1;                           		// 0x00A0(0x0001) (CPF_Edit)
	unsigned char                                      bTreatAsDialogue : 1;                             		// 0x00A0(0x0001) (CPF_Edit)
	unsigned char                                      bAttach : 1;                                      		// 0x00A0(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackSound");
		return ptr;
	}

};


// Class Engine.InterpTrackVectorMaterialParam
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                  		// 0x0090(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FName                                       ParamName;                                        		// 0x00A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVectorMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackVectorProp
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVectorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackVisibility
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackVisibility : public UInterpTrack
{
public:
	TArray<struct FVisibilityTrackKey>                 VisibilityTrack;                                  		// 0x0070(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                      		// 0x0080(0x0001) (CPF_Edit)
	unsigned char                                      bFireEventsWhenBackwards : 1;                     		// 0x0080(0x0001) (CPF_Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;               		// 0x0080(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVisibility");
		return ptr;
	}

};


// Class Engine.InterpTrackInst
// 0x0000 (0x0028 - 0x0028)
class UInterpTrackInst : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInst");
		return ptr;
	}

};


// Class Engine.InterpTrackInstAnimControl
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0028(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstAnimControl");
		return ptr;
	}

};


// Class Engine.InterpTrackInstAudioMaster
// 0x0000 (0x0028 - 0x0028)
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstAudioMaster");
		return ptr;
	}

};


// Class Engine.InterpTrackInstColorScale
// 0x0000 (0x0028 - 0x0028)
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstColorScale");
		return ptr;
	}

};


// Class Engine.InterpTrackInstDirector
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                    		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstDirector");
		return ptr;
	}

};


// Class Engine.InterpTrackInstEvent
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0028(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstEvent");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFade
// 0x0000 (0x0028 - 0x0028)
class UInterpTrackInstFade : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFade");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatAnimBPParam
// 0x0018 (0x0040 - 0x0028)
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{
public:
	class UAnimInstance*                               AnimScriptInstance;                               		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              ResetFloat;                                       		// 0x0030(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                               		// 0x0034(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatAnimBPParam");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0038 (0x0060 - 0x0028)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                		// 0x0028(0x0010) (CPF_ZeroConstructor)
	TArray<float>                                      ResetFloats;                                      		// 0x0038(0x0010) (CPF_ZeroConstructor)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                            		// 0x0048(0x0010) (CPF_ZeroConstructor)
	class UInterpTrackFloatMaterialParam*              InstancedTrack;                                   		// 0x0058(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatParticleParam
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                       		// 0x0028(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatParticleParam");
		return ptr;
	}

};


// Class Engine.InterpTrackInstMove
// 0x0018 (0x0040 - 0x0028)
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                    		// 0x0028(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    ResetRotation;                                    		// 0x0034(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstMove");
		return ptr;
	}

};


// Class Engine.InterpTrackInstParticleReplay
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0028(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstParticleReplay");
		return ptr;
	}

};


// Class Engine.InterpTrackInstProperty
// 0x0010 (0x0038 - 0x0028)
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	class UProperty*                                   InterpProperty;                                   		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UObject*                                     PropertyOuterObjectInst;                          		// 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstProperty");
		return ptr;
	}

};


// Class Engine.InterpTrackInstBoolProp
// 0x0018 (0x0050 - 0x0038)
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0038(0x0008) MISSED OFFSET
	class UBoolProperty*                               BoolProperty;                                     		// 0x0040(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      ResetBool : 1;                                    		// 0x0048(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstBoolProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstColorProp
// 0x0010 (0x0048 - 0x0038)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0038(0x0008) MISSED OFFSET
	struct FColor                                      ResetColor;                                       		// 0x0040(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatProp
// 0x0010 (0x0048 - 0x0038)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0038(0x0008) MISSED OFFSET
	float                                              ResetFloat;                                       		// 0x0040(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstLinearColorProp
// 0x0018 (0x0050 - 0x0038)
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0038(0x0008) MISSED OFFSET
	struct FLinearColor                                ResetColor;                                       		// 0x0040(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstLinearColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorProp
// 0x0018 (0x0050 - 0x0038)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0038(0x0008) MISSED OFFSET
	struct FVector                                     ResetVector;                                      		// 0x0040(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstVectorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstSlomo
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                              OldTimeDilation;                                  		// 0x0028(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstSlomo");
		return ptr;
	}

};


// Class Engine.InterpTrackInstSound
// 0x0010 (0x0038 - 0x0028)
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0028(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x002C(0x0004) MISSED OFFSET
	class UAudioComponent*                             PlayAudioComp;                                    		// 0x0030(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstSound");
		return ptr;
	}

};


// Class Engine.InterpTrackInstToggle
// 0x0010 (0x0038 - 0x0028)
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	TEnumAsByte<enum class ETrackToggleAction>         Action;                                           		// 0x0028(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0029(0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                               		// 0x002C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bSavedActiveState : 1;                            		// 0x0030(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstToggle");
		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorMaterialParam
// 0x0038 (0x0060 - 0x0028)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                		// 0x0028(0x0010) (CPF_ZeroConstructor)
	TArray<struct FVector>                             ResetVectors;                                     		// 0x0038(0x0010) (CPF_ZeroConstructor)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                            		// 0x0048(0x0010) (CPF_ZeroConstructor)
	class UInterpTrackVectorMaterialParam*             InstancedTrack;                                   		// 0x0058(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstVectorMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackInstVisibility
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	TEnumAsByte<enum class EVisibilityTrackAction>     Action;                                           		// 0x0028(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0029(0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                               		// 0x002C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstVisibility");
		return ptr;
	}

};


// Class Engine.IntSerialization
// 0x0028 (0x0050 - 0x0028)
class UIntSerialization : public UObject
{
public:
	uint16_t                                           UnsignedInt16Variable;                            		// 0x0028(0x0002) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                               		// 0x002A(0x0002) MISSED OFFSET
	uint32_t                                           UnsignedInt32Variable;                            		// 0x002C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	uint64_t                                           UnsignedInt64Variable;                            		// 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int8_t                                             SignedInt8Variable;                               		// 0x0038(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                               		// 0x0039(0x0001) MISSED OFFSET
	int16_t                                            SignedInt16Variable;                              		// 0x003A(0x0002) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                               		// 0x003C(0x0004) MISSED OFFSET
	int64_t                                            SignedInt64Variable;                              		// 0x0040(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnsignedInt8Variable;                             		// 0x0048(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                               		// 0x0049(0x0003) MISSED OFFSET
	int                                                SignedInt32Variable;                              		// 0x004C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.IntSerialization");
		return ptr;
	}

};


// Class Engine.Layer
// 0x0020 (0x0048 - 0x0028)
class ULayer : public UObject
{
public:
	struct FName                                       LayerName;                                        		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsVisible : 1;                                   		// 0x0030(0x0001)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0031(0x0007) MISSED OFFSET
	TArray<struct FLayerActorStats>                    ActorStats;                                       		// 0x0038(0x0010) (CPF_ZeroConstructor, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Layer");
		return ptr;
	}

};


// Class Engine.LevelStreaming
// 0x0148 (0x0170 - 0x0028)
class ULevelStreaming : public UObject
{
public:
	struct FName                                       PackageName;                                      		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	TAssetPtr<class UWorld>                            WorldAsset;                                       		// 0x0030(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_EditConst)
	struct FName                                       PackageNameToLoad;                                		// 0x0050(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FName>                               LODPackageNames;                                  		// 0x0058(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x18];                              		// 0x0068(0x0018) MISSED OFFSET
	struct FTransform                                  LevelTransform;                                   		// 0x0080(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                               		// 0x00B0(0x000C) MISSED OFFSET
	unsigned char                                      bShouldBeVisibleInEditor : 1;                     		// 0x00BC(0x0001)
	unsigned char                                      bLocked : 1;                                      		// 0x00BC(0x0001)
	unsigned char                                      bShouldBeLoaded : 1;                              		// 0x00BC(0x0001) (CPF_BlueprintVisible)
	unsigned char                                      bShouldBeVisible : 1;                             		// 0x00BC(0x0001) (CPF_BlueprintVisible)
	unsigned char                                      bIsStatic : 1;                                    		// 0x00BC(0x0001) (CPF_Edit, CPF_DisableEditOnInstance)
	unsigned char                                      bShouldBlockOnLoad : 1;                           		// 0x00BD(0x0001) (CPF_BlueprintVisible)
	unsigned char                                      UnknownData02[0x2];                               		// 0x00BE(0x0002) MISSED OFFSET
	int                                                LevelLODIndex;                                    		// 0x00C0(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bDisableDistanceStreaming : 1;                    		// 0x00C4(0x0001) (CPF_BlueprintVisible, CPF_Transient)
	unsigned char                                      bDrawOnLevelStatusMap : 1;                        		// 0x00C4(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData03[0x3];                               		// 0x00C5(0x0003) MISSED OFFSET
	struct FColor                                      DrawColor;                                        		// 0x00C8(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FLinearColor                                LevelColor;                                       		// 0x00CC(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                               		// 0x00DC(0x0004) MISSED OFFSET
	TArray<class ALevelStreamingVolume*>               EditorStreamingVolumes;                           		// 0x00E0(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	float                                              MinTimeBetweenVolumeUnloadRequests;               		// 0x00F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                               		// 0x00F4(0x0004) MISSED OFFSET
	TArray<struct FString>                             Keywords;                                         		// 0x00F8(0x0010) (CPF_ZeroConstructor)
	struct FScriptMulticastDelegate                    OnLevelLoaded;                                    		// 0x0108(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelUnloaded;                                  		// 0x0118(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelShown;                                     		// 0x0128(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelHidden;                                    		// 0x0138(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	class ULevel*                                      LoadedLevel;                                      		// 0x0148(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ULevel*                                      PendingUnloadLevel;                               		// 0x0150(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x18];                              		// 0x0158(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreaming");
		return ptr;
	}


	bool IsStreamingStatePending();
	bool IsLevelVisible();
	bool IsLevelLoaded();
	class ALevelScriptActor* GetLevelScriptActor();
	class ULevelStreaming* CreateInstance(const struct FString& UniqueInstanceName);
};


// Class Engine.LevelStreamingAlwaysLoaded
// 0x0000 (0x0170 - 0x0170)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingAlwaysLoaded");
		return ptr;
	}

};


// Class Engine.LevelStreamingKismet
// 0x0000 (0x0170 - 0x0170)
class ULevelStreamingKismet : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingKismet");
		return ptr;
	}


	class ULevelStreamingKismet* STATIC_LoadLevelInstance(class UObject* WorldContextObject, const struct FString& LevelName, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess);
};


// Class Engine.LevelStreamingPersistent
// 0x0000 (0x0170 - 0x0170)
class ULevelStreamingPersistent : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingPersistent");
		return ptr;
	}

};


// Class Engine.LightmappedSurfaceCollection
// 0x0018 (0x0040 - 0x0028)
class ULightmappedSurfaceCollection : public UObject
{
public:
	class UModel*                                      SourceModel;                                      		// 0x0028(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<int>                                        Surfaces;                                         		// 0x0030(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmappedSurfaceCollection");
		return ptr;
	}

};


// Class Engine.LightmassPrimitiveSettingsObject
// 0x0018 (0x0040 - 0x0028)
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                		// 0x0028(0x0018) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmassPrimitiveSettingsObject");
		return ptr;
	}

};


// Class Engine.LocalMessage
// 0x0000 (0x0028 - 0x0028)
class ULocalMessage : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LocalMessage");
		return ptr;
	}

};


// Class Engine.EngineMessage
// 0x0080 (0x00A8 - 0x0028)
class UEngineMessage : public ULocalMessage
{
public:
	struct FString                                     FailedPlaceMessage;                               		// 0x0028(0x0010) (CPF_ZeroConstructor)
	struct FString                                     MaxedOutMessage;                                  		// 0x0038(0x0010) (CPF_ZeroConstructor)
	struct FString                                     EnteredMessage;                                   		// 0x0048(0x0010) (CPF_ZeroConstructor)
	struct FString                                     LeftMessage;                                      		// 0x0058(0x0010) (CPF_ZeroConstructor)
	struct FString                                     GlobalNameChange;                                 		// 0x0068(0x0010) (CPF_ZeroConstructor)
	struct FString                                     SpecEnteredMessage;                               		// 0x0078(0x0010) (CPF_ZeroConstructor)
	struct FString                                     NewPlayerMessage;                                 		// 0x0088(0x0010) (CPF_ZeroConstructor)
	struct FString                                     NewSpecMessage;                                   		// 0x0098(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EngineMessage");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAbs
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAbs");
		return ptr;
	}

};


// Class Engine.MaterialExpressionActorPositionWS
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionActorPositionWS");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAdd
// 0x0078 (0x00D8 - 0x0060)
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060(0x0038)
	struct FExpressionInput                            B;                                                		// 0x0098(0x0038)
	float                                              ConstA;                                           		// 0x00D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstB;                                           		// 0x00D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAdd");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAppendVector
// 0x0070 (0x00D0 - 0x0060)
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060(0x0038)
	struct FExpressionInput                            B;                                                		// 0x0098(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAppendVector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAtmosphericFogColor
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{
public:
	struct FExpressionInput                            WorldPosition;                                    		// 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAtmosphericFogColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAtmosphericLightColor
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAtmosphericLightColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAtmosphericLightVector
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAtmosphericLightVector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionBlackBody
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionBlackBody : public UMaterialExpression
{
public:
	struct FExpressionInput                            Temp;                                             		// 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionBlackBody");
		return ptr;
	}

};


// Class Engine.MaterialExpressionBlendMaterialAttributes
// 0x00C0 (0x0120 - 0x0060)
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    A;                                                		// 0x0060(0x0040)
	struct FMaterialAttributesInput                    B;                                                		// 0x00A0(0x0040)
	struct FExpressionInput                            Alpha;                                            		// 0x00E0(0x0038)
	TEnumAsByte<enum class EMaterialAttributeBlend>    PixelAttributeBlendType;                          		// 0x0118(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EMaterialAttributeBlend>    VertexAttributeBlendType;                         		// 0x0119(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionBlendMaterialAttributes");
		return ptr;
	}

};


// Class Engine.MaterialExpressionBreakMaterialAttributes
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    MaterialAttributes;                               		// 0x0060(0x0040)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionBreakMaterialAttributes");
		return ptr;
	}

};


// Class Engine.MaterialExpressionBumpOffset
// 0x00B8 (0x0118 - 0x0060)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x0060(0x0038)
	struct FExpressionInput                            Height;                                           		// 0x0098(0x0038)
	struct FExpressionInput                            HeightRatioInput;                                 		// 0x00D0(0x0038)
	float                                              HeightRatio;                                      		// 0x0108(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ReferencePlane;                                   		// 0x010C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                  		// 0x0110(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionBumpOffset");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraPositionWS
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCameraPositionWS");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraVectorWS
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCameraVectorWS");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCeil
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCeil");
		return ptr;
	}

};


// Class Engine.MaterialExpressionClamp
// 0x00B8 (0x0118 - 0x0060)
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060(0x0038)
	struct FExpressionInput                            Min;                                              		// 0x0098(0x0038)
	struct FExpressionInput                            Max;                                              		// 0x00D0(0x0038)
	TEnumAsByte<enum class EClampMode>                 ClampMode;                                        		// 0x0108(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0109(0x0003) MISSED OFFSET
	float                                              MinDefault;                                       		// 0x010C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxDefault;                                       		// 0x0110(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionClamp");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCollectionParameter
// 0x0020 (0x0080 - 0x0060)
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{
public:
	class UMaterialParameterCollection*                Collection;                                       		// 0x0060(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       ParameterName;                                    		// 0x0068(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FGuid                                       ParameterId;                                      		// 0x0070(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCollectionParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionComment
// 0x0028 (0x0088 - 0x0060)
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                SizeX;                                            		// 0x0060(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SizeY;                                            		// 0x0064(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     Text;                                             		// 0x0068(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FLinearColor                                CommentColor;                                     		// 0x0078(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionComment");
		return ptr;
	}

};


// Class Engine.MaterialExpressionComponentMask
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060(0x0038)
	unsigned char                                      R : 1;                                            		// 0x0098(0x0001) (CPF_Edit)
	unsigned char                                      G : 1;                                            		// 0x0098(0x0001) (CPF_Edit)
	unsigned char                                      B : 1;                                            		// 0x0098(0x0001) (CPF_Edit)
	unsigned char                                      A : 1;                                            		// 0x0098(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionComponentMask");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant
// 0x0008 (0x0068 - 0x0060)
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x0060(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (0x0068 - 0x0060)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x0060(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              G;                                                		// 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant2Vector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant3Vector
// 0x0010 (0x0070 - 0x0060)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	struct FLinearColor                                Constant;                                         		// 0x0060(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant3Vector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (0x0070 - 0x0060)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	struct FLinearColor                                Constant;                                         		// 0x0060(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant4Vector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstantBiasScale
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060(0x0038)
	float                                              Bias;                                             		// 0x0098(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Scale;                                            		// 0x009C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstantBiasScale");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCosine
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060(0x0038)
	float                                              Period;                                           		// 0x0098(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCosine");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCrossProduct
// 0x0070 (0x00D0 - 0x0060)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060(0x0038)
	struct FExpressionInput                            B;                                                		// 0x0098(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCrossProduct");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCustom
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	struct FString                                     Code;                                             		// 0x0060(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TEnumAsByte<enum class ECustomMaterialOutputType>  OutputType;                                       		// 0x0070(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0071(0x0007) MISSED OFFSET
	struct FString                                     Description;                                      		// 0x0078(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCustomInput>                        Inputs;                                           		// 0x0088(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCustom");
		return ptr;
	}

};


// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionClearCoatNormalCustomOutput");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTangentOutput
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTangentOutput");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDDX
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionDDX : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                            		// 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDDX");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDDY
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionDDY : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                            		// 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDDY");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDecalDerivative
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionDecalDerivative : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDecalDerivative");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDecalLifetimeOpacity
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDecalLifetimeOpacity");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDecalMipmapLevel
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{
public:
	struct FExpressionInput                            TextureSize;                                      		// 0x0060(0x0038)
	float                                              ConstWidth;                                       		// 0x0098(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstHeight;                                      		// 0x009C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDecalMipmapLevel");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthFade
// 0x0078 (0x00D8 - 0x0060)
class UMaterialExpressionDepthFade : public UMaterialExpression
{
public:
	struct FExpressionInput                            InOpacity;                                        		// 0x0060(0x0038)
	struct FExpressionInput                            FadeDistance;                                     		// 0x0098(0x0038)
	float                                              OpacityDefault;                                   		// 0x00D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FadeDistanceDefault;                              		// 0x00D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthFade");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthOfFieldFunction
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{
public:
	TEnumAsByte<enum class EDepthOfFieldFunctionValue> FunctionValue;                                    		// 0x0060(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0061(0x0007) MISSED OFFSET
	struct FExpressionInput                            Depth;                                            		// 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthOfFieldFunction");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDeriveNormalZ
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                             		// 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDeriveNormalZ");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDesaturation
// 0x0080 (0x00E0 - 0x0060)
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060(0x0038)
	struct FExpressionInput                            Fraction;                                         		// 0x0098(0x0038)
	struct FLinearColor                                LuminanceFactors;                                 		// 0x00D0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDesaturation");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistance
// 0x0070 (0x00D0 - 0x0060)
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060(0x0038)
	struct FExpressionInput                            B;                                                		// 0x0098(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDistance");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceCullFade
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDistanceCullFade");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceFieldGradient
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                         		// 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDistanceFieldGradient");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceToNearestSurface
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                         		// 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDistanceToNearestSurface");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDivide
// 0x0078 (0x00D8 - 0x0060)
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060(0x0038)
	struct FExpressionInput                            B;                                                		// 0x0098(0x0038)
	float                                              ConstA;                                           		// 0x00D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstB;                                           		// 0x00D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDivide");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDotProduct
// 0x0070 (0x00D0 - 0x0060)
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060(0x0038)
	struct FExpressionInput                            B;                                                		// 0x0098(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDotProduct");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDynamicParameter
// 0x0020 (0x0080 - 0x0060)
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray<struct FString>                             ParamNames;                                       		// 0x0060(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	struct FLinearColor                                DefaultValue;                                     		// 0x0070(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDynamicParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionEyeAdaptation
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionEyeAdaptation");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFeatureLevelSwitch
// 0x0118 (0x0178 - 0x0060)
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                          		// 0x0060(0x0038)
	struct FExpressionInput                            Inputs[0x4];                                      		// 0x0098(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFeatureLevelSwitch");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFloor
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFloor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFmod
// 0x0070 (0x00D0 - 0x0060)
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060(0x0038)
	struct FExpressionInput                            B;                                                		// 0x0098(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFmod");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSample
// 0x0010 (0x0070 - 0x0060)
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                             		// 0x0060(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                FontTexturePage;                                  		// 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFontSample");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSampleParameter
// 0x0020 (0x0090 - 0x0070)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FName                                       ParameterName;                                    		// 0x0070(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                   		// 0x0078(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       Group;                                            		// 0x0088(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFontSampleParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFrac
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFrac");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFresnel
// 0x00B8 (0x0118 - 0x0060)
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	struct FExpressionInput                            ExponentIn;                                       		// 0x0060(0x0038)
	float                                              Exponent;                                         		// 0x0098(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x009C(0x0004) MISSED OFFSET
	struct FExpressionInput                            BaseReflectFractionIn;                            		// 0x00A0(0x0038)
	float                                              BaseReflectFraction;                              		// 0x00D8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                               		// 0x00DC(0x0004) MISSED OFFSET
	struct FExpressionInput                            Normal;                                           		// 0x00E0(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFresnel");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFunctionInput
// 0x00D0 (0x0130 - 0x0060)
class UMaterialExpressionFunctionInput : public UMaterialExpression
{
public:
	struct FExpressionInput                            Preview;                                          		// 0x0060(0x0038)
	struct FString                                     InputName;                                        		// 0x0098(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FString                                     Description;                                      		// 0x00A8(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FGuid                                       ID;                                               		// 0x00B8(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EFunctionInputType>         InputType;                                        		// 0x00C8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x00C9(0x0007) MISSED OFFSET
	struct FVector4                                    PreviewValue;                                     		// 0x00D0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUsePreviewValueAsDefault : 1;                    		// 0x00E0(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x3];                               		// 0x00E1(0x0003) MISSED OFFSET
	int                                                SortPriority;                                     		// 0x00E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCompilingFunctionPreview : 1;                    		// 0x00E8(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData02[0x47];                              		// 0x00E9(0x0047) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFunctionInput");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFunctionOutput
// 0x0078 (0x00D8 - 0x0060)
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{
public:
	struct FString                                     OutputName;                                       		// 0x0060(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FString                                     Description;                                      		// 0x0070(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	int                                                SortPriority;                                     		// 0x0080(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0084(0x0004) MISSED OFFSET
	struct FExpressionInput                            A;                                                		// 0x0088(0x0038)
	unsigned char                                      bLastPreviewed : 1;                               		// 0x00C0(0x0001)
	unsigned char                                      UnknownData01[0x3];                               		// 0x00C1(0x0003) MISSED OFFSET
	struct FGuid                                       ID;                                               		// 0x00C4(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFunctionOutput");
		return ptr;
	}

};


// Class Engine.MaterialExpressionGetMaterialAttributes
// 0x0050 (0x00B0 - 0x0060)
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    MaterialAttributes;                               		// 0x0060(0x0040)
	TArray<struct FGuid>                               AttributeGetTypes;                                		// 0x00A0(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionGetMaterialAttributes");
		return ptr;
	}

};


// Class Engine.MaterialExpressionGIReplace
// 0x00A8 (0x0108 - 0x0060)
class UMaterialExpressionGIReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                          		// 0x0060(0x0038)
	struct FExpressionInput                            StaticIndirect;                                   		// 0x0098(0x0038)
	struct FExpressionInput                            DynamicIndirect;                                  		// 0x00D0(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionGIReplace");
		return ptr;
	}

};


// Class Engine.MaterialExpressionIf
// 0x0128 (0x0188 - 0x0060)
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060(0x0038)
	struct FExpressionInput                            B;                                                		// 0x0098(0x0038)
	struct FExpressionInput                            AGreaterThanB;                                    		// 0x00D0(0x0038)
	struct FExpressionInput                            AEqualsB;                                         		// 0x0108(0x0038)
	struct FExpressionInput                            ALessThanB;                                       		// 0x0140(0x0038)
	float                                              EqualsThreshold;                                  		// 0x0178(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstB;                                           		// 0x017C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstAEqualsB;                                    		// 0x0180(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionIf");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightmapUVs
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLightmapUVs");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightmassReplace
// 0x0070 (0x00D0 - 0x0060)
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                         		// 0x0060(0x0038)
	struct FExpressionInput                            Lightmass;                                        		// 0x0098(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLightmassReplace");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightVector
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLightVector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLinearInterpolate
// 0x00B8 (0x0118 - 0x0060)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060(0x0038)
	struct FExpressionInput                            B;                                                		// 0x0098(0x0038)
	struct FExpressionInput                            Alpha;                                            		// 0x00D0(0x0038)
	float                                              ConstA;                                           		// 0x0108(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstB;                                           		// 0x010C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstAlpha;                                       		// 0x0110(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLinearInterpolate");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLogarithm2
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{
public:
	struct FExpressionInput                            X;                                                		// 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLogarithm2");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMakeMaterialAttributes
// 0x0578 (0x05D8 - 0x0060)
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{
public:
	struct FExpressionInput                            BaseColor;                                        		// 0x0060(0x0038)
	struct FExpressionInput                            Metallic;                                         		// 0x0098(0x0038)
	struct FExpressionInput                            Specular;                                         		// 0x00D0(0x0038)
	struct FExpressionInput                            Roughness;                                        		// 0x0108(0x0038)
	struct FExpressionInput                            EmissiveColor;                                    		// 0x0140(0x0038)
	struct FExpressionInput                            Opacity;                                          		// 0x0178(0x0038)
	struct FExpressionInput                            OpacityMask;                                      		// 0x01B0(0x0038)
	struct FExpressionInput                            Normal;                                           		// 0x01E8(0x0038)
	struct FExpressionInput                            WorldPositionOffset;                              		// 0x0220(0x0038)
	struct FExpressionInput                            WorldDisplacement;                                		// 0x0258(0x0038)
	struct FExpressionInput                            TessellationMultiplier;                           		// 0x0290(0x0038)
	struct FExpressionInput                            SubsurfaceColor;                                  		// 0x02C8(0x0038)
	struct FExpressionInput                            ClearCoat;                                        		// 0x0300(0x0038)
	struct FExpressionInput                            ClearCoatRoughness;                               		// 0x0338(0x0038)
	struct FExpressionInput                            AmbientOcclusion;                                 		// 0x0370(0x0038)
	struct FExpressionInput                            Refraction;                                       		// 0x03A8(0x0038)
	struct FExpressionInput                            CustomizedUVs[0x8];                               		// 0x03E0(0x0038)
	struct FExpressionInput                            PixelDepthOffset;                                 		// 0x05A0(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMakeMaterialAttributes");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMaterialFunctionCall
// 0x0028 (0x0088 - 0x0060)
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{
public:
	class UMaterialFunction*                           MaterialFunction;                                 		// 0x0060(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FFunctionExpressionInput>            FunctionInputs;                                   		// 0x0068(0x0010) (CPF_ZeroConstructor)
	TArray<struct FFunctionExpressionOutput>           FunctionOutputs;                                  		// 0x0078(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMaterialFunctionCall");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMaterialProxyReplace
// 0x0070 (0x00D0 - 0x0060)
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                         		// 0x0060(0x0038)
	struct FExpressionInput                            MaterialProxy;                                    		// 0x0098(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMaterialProxyReplace");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMax
// 0x0078 (0x00D8 - 0x0060)
class UMaterialExpressionMax : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060(0x0038)
	struct FExpressionInput                            B;                                                		// 0x0098(0x0038)
	float                                              ConstA;                                           		// 0x00D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstB;                                           		// 0x00D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMax");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMin
// 0x0078 (0x00D8 - 0x0060)
class UMaterialExpressionMin : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060(0x0038)
	struct FExpressionInput                            B;                                                		// 0x0098(0x0038)
	float                                              ConstA;                                           		// 0x00D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstB;                                           		// 0x00D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMin");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMultiply
// 0x0078 (0x00D8 - 0x0060)
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060(0x0038)
	struct FExpressionInput                            B;                                                		// 0x0098(0x0038)
	float                                              ConstA;                                           		// 0x00D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstB;                                           		// 0x00D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMultiply");
		return ptr;
	}

};


// Class Engine.MaterialExpressionNoise
// 0x0098 (0x00F8 - 0x0060)
class UMaterialExpressionNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                         		// 0x0060(0x0038)
	struct FExpressionInput                            FilterWidth;                                      		// 0x0098(0x0038)
	float                                              Scale;                                            		// 0x00D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                Quality;                                          		// 0x00D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ENoiseFunction>             NoiseFunction;                                    		// 0x00D8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x00D9(0x0003) MISSED OFFSET
	unsigned char                                      bTurbulence : 1;                                  		// 0x00DC(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x3];                               		// 0x00DD(0x0003) MISSED OFFSET
	int                                                Levels;                                           		// 0x00E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OutputMin;                                        		// 0x00E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OutputMax;                                        		// 0x00E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LevelScale;                                       		// 0x00EC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bTiling : 1;                                      		// 0x00F0(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData02[0x3];                               		// 0x00F1(0x0003) MISSED OFFSET
	uint32_t                                           RepeatSize;                                       		// 0x00F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionNoise");
		return ptr;
	}

};


// Class Engine.MaterialExpressionNormalize
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                      		// 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionNormalize");
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectBounds
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionObjectBounds : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectBounds");
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectOrientation
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectOrientation");
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectPositionWS
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectPositionWS");
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectRadius
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectRadius");
		return ptr;
	}

};


// Class Engine.MaterialExpressionOneMinus
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionOneMinus");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPanner
// 0x00B8 (0x0118 - 0x0060)
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x0060(0x0038)
	struct FExpressionInput                            Time;                                             		// 0x0098(0x0038)
	struct FExpressionInput                            Speed;                                            		// 0x00D0(0x0038)
	float                                              SpeedX;                                           		// 0x0108(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SpeedY;                                           		// 0x010C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                  		// 0x0110(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bFractionalPart : 1;                              		// 0x0114(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPanner");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParameter
// 0x0020 (0x0080 - 0x0060)
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                    		// 0x0060(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                   		// 0x0068(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       Group;                                            		// 0x0078(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionScalarParameter
// 0x0010 (0x0090 - 0x0080)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                     		// 0x0080(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SliderMin;                                        		// 0x0084(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SliderMax;                                        		// 0x0088(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionScalarParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticBoolParameter
// 0x0008 (0x0088 - 0x0080)
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{
public:
	unsigned char                                      DefaultValue : 1;                                 		// 0x0080(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticBoolParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0070 (0x00F8 - 0x0088)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{
public:
	struct FExpressionInput                            A;                                                		// 0x0088(0x0038)
	struct FExpressionInput                            B;                                                		// 0x00C0(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticSwitchParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0040 (0x00C0 - 0x0080)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0080(0x0038)
	unsigned char                                      DefaultR : 1;                                     		// 0x00B8(0x0001) (CPF_Edit)
	unsigned char                                      DefaultG : 1;                                     		// 0x00B8(0x0001) (CPF_Edit)
	unsigned char                                      DefaultB : 1;                                     		// 0x00B8(0x0001) (CPF_Edit)
	unsigned char                                      DefaultA : 1;                                     		// 0x00B8(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticComponentMaskParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionVectorParameter
// 0x0010 (0x0090 - 0x0080)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                     		// 0x0080(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionVectorParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleColor
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionParticleColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleDirection
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionParticleDirection : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleDirection");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleMacroUV
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleMacroUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleMotionBlurFade
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleMotionBlurFade");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticlePositionWS
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticlePositionWS");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleRadius
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionParticleRadius : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleRadius");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleRandom
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionParticleRandom : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleRandom");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleRelativeTime
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleRelativeTime");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSize
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionParticleSize : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSize");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSpeed
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSpeed");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPerInstanceFadeAmount
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPerInstanceFadeAmount");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPerInstanceRandom
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPerInstanceRandom");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPixelDepth
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPixelDepth");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPixelNormalWS
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPixelNormalWS");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPower
// 0x0078 (0x00D8 - 0x0060)
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                             		// 0x0060(0x0038)
	struct FExpressionInput                            Exponent;                                         		// 0x0098(0x0038)
	float                                              ConstExponent;                                    		// 0x00D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPower");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPrecomputedAOMask
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPrecomputedAOMask");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPreSkinnedPosition
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPreSkinnedPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionQualitySwitch
// 0x00E0 (0x0140 - 0x0060)
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                          		// 0x0060(0x0038)
	struct FExpressionInput                            Inputs[0x3];                                      		// 0x0098(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionQualitySwitch");
		return ptr;
	}

};


// Class Engine.MaterialExpressionReflectionVectorWS
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{
public:
	struct FExpressionInput                            CustomWorldNormal;                                		// 0x0060(0x0038)
	unsigned char                                      bNormalizeCustomWorldNormal : 1;                  		// 0x0098(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionReflectionVectorWS");
		return ptr;
	}

};


// Class Engine.MaterialExpressionRotateAboutAxis
// 0x00E8 (0x0148 - 0x0060)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                            NormalizedRotationAxis;                           		// 0x0060(0x0038)
	struct FExpressionInput                            RotationAngle;                                    		// 0x0098(0x0038)
	struct FExpressionInput                            PivotPoint;                                       		// 0x00D0(0x0038)
	struct FExpressionInput                            Position;                                         		// 0x0108(0x0038)
	float                                              Period;                                           		// 0x0140(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionRotateAboutAxis");
		return ptr;
	}

};


// Class Engine.MaterialExpressionRotator
// 0x0080 (0x00E0 - 0x0060)
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x0060(0x0038)
	struct FExpressionInput                            Time;                                             		// 0x0098(0x0038)
	float                                              CenterX;                                          		// 0x00D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CenterY;                                          		// 0x00D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Speed;                                            		// 0x00D8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                  		// 0x00DC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionRotator");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneColor
// 0x0080 (0x00E0 - 0x0060)
class UMaterialExpressionSceneColor : public UMaterialExpression
{
public:
	TEnumAsByte<enum class EMaterialSceneAttributeInputMode> InputMode;                                        		// 0x0060(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0061(0x0007) MISSED OFFSET
	struct FExpressionInput                            Input;                                            		// 0x0068(0x0038)
	struct FExpressionInput                            OffsetFraction;                                   		// 0x00A0(0x0038) (CPF_Deprecated)
	struct FVector2D                                   ConstInput;                                       		// 0x00D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneDepth
// 0x0080 (0x00E0 - 0x0060)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	TEnumAsByte<enum class EMaterialSceneAttributeInputMode> InputMode;                                        		// 0x0060(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0061(0x0007) MISSED OFFSET
	struct FExpressionInput                            Input;                                            		// 0x0068(0x0038)
	struct FExpressionInput                            Coordinates;                                      		// 0x00A0(0x0038) (CPF_Deprecated)
	struct FVector2D                                   ConstInput;                                       		// 0x00D8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneDepth");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneTexelSize
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneTexelSize");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneTexture
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x0060(0x0038)
	TEnumAsByte<enum class ESceneTextureId>            SceneTextureId;                                   		// 0x0098(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bClampUVs : 1;                                    		// 0x0099(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bFiltered : 1;                                    		// 0x009A(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneTexture");
		return ptr;
	}

};


// Class Engine.MaterialExpressionScreenPosition
// 0x0008 (0x0068 - 0x0060)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:
	TEnumAsByte<enum class EMaterialExpressionScreenPositionMapping> Mapping;                                          		// 0x0060(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionScreenPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSetMaterialAttributes
// 0x0020 (0x0080 - 0x0060)
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
{
public:
	TArray<struct FExpressionInput>                    Inputs;                                           		// 0x0060(0x0010) (CPF_ZeroConstructor)
	TArray<struct FGuid>                               AttributeSetTypes;                                		// 0x0070(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSetMaterialAttributes");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSine
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060(0x0038)
	float                                              Period;                                           		// 0x0098(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSine");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSpeedTree
// 0x0010 (0x0070 - 0x0060)
class UMaterialExpressionSpeedTree : public UMaterialExpression
{
public:
	TEnumAsByte<enum class ESpeedTreeGeometryType>     GeometryType;                                     		// 0x0060(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ESpeedTreeWindType>         WindType;                                         		// 0x0061(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ESpeedTreeLODType>          LODType;                                          		// 0x0062(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                               		// 0x0063(0x0001) MISSED OFFSET
	float                                              BillboardThreshold;                               		// 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAccurateWindVelocities : 1;                      		// 0x0068(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSpeedTree");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSphereMask
// 0x00E8 (0x0148 - 0x0060)
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060(0x0038)
	struct FExpressionInput                            B;                                                		// 0x0098(0x0038)
	struct FExpressionInput                            Radius;                                           		// 0x00D0(0x0038)
	struct FExpressionInput                            Hardness;                                         		// 0x0108(0x0038)
	float                                              AttenuationRadius;                                		// 0x0140(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              HardnessPercent;                                  		// 0x0144(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSphereMask");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSphericalParticleOpacity
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{
public:
	struct FExpressionInput                            Density;                                          		// 0x0060(0x0038)
	float                                              ConstantDensity;                                  		// 0x0098(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSphericalParticleOpacity");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSquareRoot
// 0x0038 (0x0098 - 0x0060)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSquareRoot");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticBool
// 0x0008 (0x0068 - 0x0060)
class UMaterialExpressionStaticBool : public UMaterialExpression
{
public:
	unsigned char                                      Value : 1;                                        		// 0x0060(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticBool");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticSwitch
// 0x00B0 (0x0110 - 0x0060)
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{
public:
	unsigned char                                      DefaultValue : 1;                                 		// 0x0060(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0061(0x0007) MISSED OFFSET
	struct FExpressionInput                            A;                                                		// 0x0068(0x0038)
	struct FExpressionInput                            B;                                                		// 0x00A0(0x0038)
	struct FExpressionInput                            Value;                                            		// 0x00D8(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticSwitch");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSubtract
// 0x0078 (0x00D8 - 0x0060)
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060(0x0038)
	struct FExpressionInput                            B;                                                		// 0x0098(0x0038)
	float                                              ConstA;                                           		// 0x00D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstB;                                           		// 0x00D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSubtract");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureBase
// 0x0010 (0x0070 - 0x0060)
class UMaterialExpressionTextureBase : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                          		// 0x0060(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EMaterialSamplerType>       SamplerType;                                      		// 0x0068(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0069(0x0003) MISSED OFFSET
	unsigned char                                      IsDefaultMeshpaintTexture : 1;                    		// 0x006C(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureBase");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureObject
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureObject");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSample
// 0x0128 (0x0198 - 0x0070)
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x0070(0x0038)
	struct FExpressionInput                            TextureObject;                                    		// 0x00A8(0x0038)
	struct FExpressionInput                            MipValue;                                         		// 0x00E0(0x0038)
	struct FExpressionInput                            CoordinatesDX;                                    		// 0x0118(0x0038)
	struct FExpressionInput                            CoordinatesDY;                                    		// 0x0150(0x0038)
	TEnumAsByte<enum class ETextureMipValueMode>       MipValueMode;                                     		// 0x0188(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ESamplerSourceMode>         SamplerSource;                                    		// 0x0189(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                               		// 0x018A(0x0002) MISSED OFFSET
	uint32_t                                           ConstCoordinate;                                  		// 0x018C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ConstMipValue;                                    		// 0x0190(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSample");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSubUV
// 0x0008 (0x01A0 - 0x0198)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:
	unsigned char                                      bBlend : 1;                                       		// 0x0198(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSubUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0020 (0x01B8 - 0x0198)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FName                                       ParameterName;                                    		// 0x0198(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                   		// 0x01A0(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       Group;                                            		// 0x01B0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureObjectParameter
// 0x0000 (0x01B8 - 0x01B8)
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureObjectParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (0x01B8 - 0x01B8)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter2D");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAntialiasedTextureMask
// 0x0008 (0x01C0 - 0x01B8)
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                              threshold;                                        		// 0x01B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ETextureColorChannel>       Channel;                                          		// 0x01BC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAntialiasedTextureMask");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0008 (0x01C0 - 0x01B8)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:
	unsigned char                                      bBlend : 1;                                       		// 0x01B8(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterSubUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (0x01B8 - 0x01B8)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterCube");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (0x0070 - 0x0060)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                  		// 0x0060(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              UTiling;                                          		// 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VTiling;                                          		// 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnMirrorU : 1;                                    		// 0x006C(0x0001) (CPF_Edit)
	unsigned char                                      UnMirrorV : 1;                                    		// 0x006C(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureCoordinate");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureProperty
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionTextureProperty : public UMaterialExpression
{
public:
	struct FExpressionInput                            TextureObject;                                    		// 0x0060(0x0038)
	TEnumAsByte<enum class EMaterialExposedTextureProperty> Property;                                         		// 0x0098(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureProperty");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTime
// 0x0008 (0x0068 - 0x0060)
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned char                                      bIgnorePause : 1;                                 		// 0x0060(0x0001) (CPF_Edit)
	unsigned char                                      bOverride_Period : 1;                             		// 0x0060(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0061(0x0003) MISSED OFFSET
	float                                              Period;                                           		// 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTime");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTransform
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060(0x0038)
	TEnumAsByte<enum class EMaterialVectorCoordTransformSource> TransformSourceType;                              		// 0x0098(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EMaterialVectorCoordTransform> TransformType;                                    		// 0x0099(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTransform");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTransformPosition
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060(0x0038)
	TEnumAsByte<enum class EMaterialPositionTransformSource> TransformSourceType;                              		// 0x0098(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EMaterialPositionTransformSource> TransformType;                                    		// 0x0099(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTransformPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTwoSidedSign
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTwoSidedSign");
		return ptr;
	}

};


// Class Engine.MaterialExpressionVectorNoise
// 0x0048 (0x00A8 - 0x0060)
class UMaterialExpressionVectorNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                         		// 0x0060(0x0038)
	TEnumAsByte<enum class EVectorNoiseFunction>       NoiseFunction;                                    		// 0x0098(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0099(0x0003) MISSED OFFSET
	int                                                Quality;                                          		// 0x009C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bTiling : 1;                                      		// 0x00A0(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x3];                               		// 0x00A1(0x0003) MISSED OFFSET
	uint32_t                                           TileSize;                                         		// 0x00A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionVectorNoise");
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexColor
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionVertexColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexNormalWS
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionVertexNormalWS");
		return ptr;
	}

};


// Class Engine.MaterialExpressionViewProperty
// 0x0008 (0x0068 - 0x0060)
class UMaterialExpressionViewProperty : public UMaterialExpression
{
public:
	TEnumAsByte<enum class EMaterialExposedViewProperty> Property;                                         		// 0x0060(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionViewProperty");
		return ptr;
	}

};


// Class Engine.MaterialExpressionViewSize
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionViewSize : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionViewSize");
		return ptr;
	}

};


// Class Engine.MaterialExpressionWorldPosition
// 0x0008 (0x0068 - 0x0060)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:
	TEnumAsByte<enum class EWorldPositionIncludedOffsets> WorldPositionShaderOffset;                        		// 0x0060(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionWorldPosition");
		return ptr;
	}

};


// Class Engine.MaterialFunction
// 0x0040 (0x0068 - 0x0028)
class UMaterialFunction : public UObject
{
public:
	struct FGuid                                       StateId;                                          		// 0x0028(0x0010) (CPF_ZeroConstructor, CPF_DuplicateTransient, CPF_IsPlainOldData)
	struct FString                                     Description;                                      		// 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bExposeToLibrary : 1;                             		// 0x0048(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0049(0x0007) MISSED OFFSET
	TArray<class UMaterialExpression*>                 FunctionExpressions;                              		// 0x0050(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bReentrantFlag : 1;                               		// 0x0060(0x0001) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialFunction");
		return ptr;
	}

};


// Class Engine.Material
// 0x0918 (0x0988 - 0x0070)
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x0070(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColorMaterialInput                         DiffuseColor;                                     		// 0x0078(0x0040) (CPF_Deprecated)
	struct FColorMaterialInput                         SpecularColor;                                    		// 0x00B8(0x0040) (CPF_Deprecated)
	struct FColorMaterialInput                         BaseColor;                                        		// 0x00F8(0x0040)
	struct FScalarMaterialInput                        Metallic;                                         		// 0x0138(0x0040)
	struct FScalarMaterialInput                        Specular;                                         		// 0x0178(0x0040)
	struct FScalarMaterialInput                        Roughness;                                        		// 0x01B8(0x0040)
	struct FVectorMaterialInput                        Normal;                                           		// 0x01F8(0x0048)
	struct FColorMaterialInput                         EmissiveColor;                                    		// 0x0240(0x0040)
	struct FScalarMaterialInput                        Opacity;                                          		// 0x0280(0x0040)
	struct FScalarMaterialInput                        OpacityMask;                                      		// 0x02C0(0x0040)
	TEnumAsByte<enum class EMaterialDomain>            MaterialDomain;                                   		// 0x0300(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EBlendMode>                 BlendMode;                                        		// 0x0301(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EDecalBlendMode>            DecalBlendMode;                                   		// 0x0302(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EMaterialDecalResponse>     MaterialDecalResponse;                            		// 0x0303(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EMaterialShadingModel>      ShadingModel;                                     		// 0x0304(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0305(0x0003) MISSED OFFSET
	float                                              OpacityMaskClipValue;                             		// 0x0308(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                               		// 0x030C(0x0004) MISSED OFFSET
	struct FVectorMaterialInput                        WorldPositionOffset;                              		// 0x0310(0x0048)
	struct FVectorMaterialInput                        WorldDisplacement;                                		// 0x0358(0x0048)
	struct FScalarMaterialInput                        TessellationMultiplier;                           		// 0x03A0(0x0040)
	struct FColorMaterialInput                         SubsurfaceColor;                                  		// 0x03E0(0x0040)
	struct FScalarMaterialInput                        ClearCoat;                                        		// 0x0420(0x0040)
	struct FScalarMaterialInput                        ClearCoatRoughness;                               		// 0x0460(0x0040)
	struct FScalarMaterialInput                        AmbientOcclusion;                                 		// 0x04A0(0x0040)
	struct FScalarMaterialInput                        Refraction;                                       		// 0x04E0(0x0040)
	struct FVector2MaterialInput                       CustomizedUVs[0x8];                               		// 0x0520(0x0048)
	struct FMaterialAttributesInput                    MaterialAttributes;                               		// 0x0760(0x0040)
	struct FScalarMaterialInput                        PixelDepthOffset;                                 		// 0x07A0(0x0040)
	unsigned char                                      bEnableSeparateTranslucency : 1;                  		// 0x07E0(0x0001) (CPF_Edit)
	unsigned char                                      bEnableMobileSeparateTranslucency : 1;            		// 0x07E0(0x0001) (CPF_Edit)
	unsigned char                                      bEnableResponsiveAA : 1;                          		// 0x07E0(0x0001) (CPF_Edit)
	unsigned char                                      bScreenSpaceReflections : 1;                      		// 0x07E0(0x0001) (CPF_Edit)
	unsigned char                                      TwoSided : 1;                                     		// 0x07E0(0x0001) (CPF_Edit)
	unsigned char                                      DitheredLODTransition : 1;                        		// 0x07E0(0x0001) (CPF_Edit)
	unsigned char                                      DitherOpacityMask : 1;                            		// 0x07E0(0x0001) (CPF_Edit)
	unsigned char                                      bAllowNegativeEmissiveColor : 1;                  		// 0x07E0(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData02[0x3];                               		// 0x07E1(0x0003) MISSED OFFSET
	int                                                NumCustomizedUVs;                                 		// 0x07E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ETranslucencyLightingMode>  TranslucencyLightingMode;                         		// 0x07E8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                               		// 0x07E9(0x0003) MISSED OFFSET
	float                                              TranslucencyDirectionalLightingIntensity;         		// 0x07EC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      AllowTranslucentCustomDepthWrites : 1;            		// 0x07F0(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData04[0x3];                               		// 0x07F1(0x0003) MISSED OFFSET
	float                                              TranslucentShadowDensityScale;                    		// 0x07F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TranslucentSelfShadowDensityScale;                		// 0x07F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TranslucentSelfShadowSecondDensityScale;          		// 0x07FC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TranslucentSelfShadowSecondOpacity;               		// 0x0800(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TranslucentBackscatteringExponent;                		// 0x0804(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                TranslucentMultipleScatteringExtinction;          		// 0x0808(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TranslucentShadowStartOffset;                     		// 0x0818(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDisableDepthTest : 1;                            		// 0x081C(0x0001) (CPF_Edit)
	unsigned char                                      bGenerateSphericalParticleNormals : 1;            		// 0x081C(0x0001) (CPF_Edit)
	unsigned char                                      bTangentSpaceNormal : 1;                          		// 0x081C(0x0001) (CPF_Edit)
	unsigned char                                      bUseEmissiveForDynamicAreaLighting : 1;           		// 0x081C(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bBlockGI : 1;                                     		// 0x081C(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUsedAsSpecialEngineMaterial : 1;                 		// 0x081C(0x0001) (CPF_DuplicateTransient)
	unsigned char                                      bUsedWithSkeletalMesh : 1;                        		// 0x081C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUsedWithEditorCompositing : 1;                   		// 0x081C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUsedWithParticleSprites : 1;                     		// 0x081D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUsedWithBeamTrails : 1;                          		// 0x081D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUsedWithMeshParticles : 1;                       		// 0x081D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUsedWithStaticLighting : 1;                      		// 0x081D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUsedWithMorphTargets : 1;                        		// 0x081D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUsedWithSplineMeshes : 1;                        		// 0x081D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUsedWithInstancedStaticMeshes : 1;               		// 0x081D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUsesDistortion : 1;                              		// 0x081D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUsedWithClothing : 1;                            		// 0x081E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUsedWithUI : 1;                                  		// 0x081E(0x0001) (CPF_Deprecated)
	unsigned char                                      bAutomaticallySetUsageInEditor : 1;               		// 0x081E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bFullyRough : 1;                                  		// 0x081E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUseFullPrecision : 1;                            		// 0x081E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUseLightmapDirectionality : 1;                   		// 0x081E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUseHQForwardReflections : 1;                     		// 0x081E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bUsePlanarForwardReflections : 1;                 		// 0x081E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bNormalCurvatureToRoughness : 1;                  		// 0x081F(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	TEnumAsByte<enum class EMaterialTessellationMode>  D3D11TessellationMode;                            		// 0x0820(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                               		// 0x0821(0x0003) MISSED OFFSET
	unsigned char                                      bEnableCrackFreeDisplacement : 1;                 		// 0x0824(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bEnableAdaptiveTessellation : 1;                  		// 0x0824(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData06[0x3];                               		// 0x0825(0x0003) MISSED OFFSET
	float                                              MaxDisplacement;                                  		// 0x0828(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      Wireframe : 1;                                    		// 0x082C(0x0001) (CPF_Edit)
	unsigned char                                      bOutputVelocityOnBasePass : 1;                    		// 0x082C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData07[0x3];                               		// 0x082D(0x0003) MISSED OFFSET
	int                                                EditorX;                                          		// 0x0830(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                EditorY;                                          		// 0x0834(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                EditorPitch;                                      		// 0x0838(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                EditorYaw;                                        		// 0x083C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UMaterialExpression*>                 Expressions;                                      		// 0x0840(0x0010) (CPF_ZeroConstructor)
	TArray<struct FMaterialFunctionInfo>               MaterialFunctionInfos;                            		// 0x0850(0x0010) (CPF_ZeroConstructor)
	TArray<struct FMaterialParameterCollectionInfo>    MaterialParameterCollectionInfos;                 		// 0x0860(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bCanMaskedBeAssumedOpaque : 1;                    		// 0x0870(0x0001)
	unsigned char                                      bIsMasked : 1;                                    		// 0x0870(0x0001) (CPF_Deprecated)
	unsigned char                                      bIsPreviewMaterial : 1;                           		// 0x0870(0x0001) (CPF_Transient, CPF_DuplicateTransient)
	unsigned char                                      bUseMaterialAttributes : 1;                       		// 0x0870(0x0001) (CPF_Edit)
	unsigned char                                      bUseTranslucencyVertexFog : 1;                    		// 0x0870(0x0001) (CPF_Edit)
	unsigned char                                      bAllowDevelopmentShaderCompile : 1;               		// 0x0870(0x0001) (CPF_Transient, CPF_DuplicateTransient)
	unsigned char                                      bIsMaterialEditorStatsMaterial : 1;               		// 0x0870(0x0001) (CPF_Transient, CPF_DuplicateTransient)
	unsigned char                                      UnknownData08[0x3];                               		// 0x0871(0x0003) MISSED OFFSET
	uint32_t                                           UsageFlagWarnings;                                		// 0x0874(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient, CPF_IsPlainOldData)
	TEnumAsByte<enum class EBlendableLocation>         BlendableLocation;                                		// 0x0878(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                               		// 0x0879(0x0003) MISSED OFFSET
	int                                                BlendablePriority;                                		// 0x087C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      BlendableOutputAlpha : 1;                         		// 0x0880(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ERefractionMode>            RefractionMode;                                   		// 0x0881(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData10[0x2];                               		// 0x0882(0x0002) MISSED OFFSET
	float                                              RefractionDepthBias;                              		// 0x0884(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FGuid                                       StateId;                                          		// 0x0888(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0xE0];                              		// 0x0898(0x00E0) MISSED OFFSET
	TArray<class UTexture*>                            ExpressionTextureReferences;                      		// 0x0978(0x0010) (CPF_ZeroConstructor, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Material");
		return ptr;
	}

};


// Class Engine.MaterialInstanceDynamic
// 0x0050 (0x0200 - 0x01B0)
class UMaterialInstanceDynamic : public UMaterialInstance
{
public:
	unsigned char                                      UnknownData00[0x50];                              		// 0x01B0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstanceDynamic");
		return ptr;
	}


	void SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value);
	void SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value);
	void SetScalarParameterValue(const struct FName& ParameterName, float Value);
	void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* SourceA, class UMaterialInstance* SourceB, float Alpha);
	struct FLinearColor K2_GetVectorParameterValue(const struct FName& ParameterName);
	class UTexture* K2_GetTextureParameterValue(const struct FName& ParameterName);
	float K2_GetScalarParameterValue(const struct FName& ParameterName);
	void K2_CopyMaterialInstanceParameters(class UMaterialInterface* Source);
	void CopyParameterOverrides(class UMaterialInstance* MaterialInstance);
	void CopyInterpParameters(class UMaterialInstance* Source);
};


// Class Engine.MaterialParameterCollection
// 0x0040 (0x0068 - 0x0028)
class UMaterialParameterCollection : public UObject
{
public:
	struct FGuid                                       StateId;                                          		// 0x0028(0x0010) (CPF_ZeroConstructor, CPF_DuplicateTransient, CPF_IsPlainOldData)
	TArray<struct FCollectionScalarParameter>          ScalarParameters;                                 		// 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCollectionVectorParameter>          VectorParameters;                                 		// 0x0048(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                              		// 0x0058(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialParameterCollection");
		return ptr;
	}

};


// Class Engine.MaterialParameterCollectionInstance
// 0x00C0 (0x00E8 - 0x0028)
class UMaterialParameterCollectionInstance : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET
	class UMaterialParameterCollection*                Collection;                                       		// 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UWorld*                                      World;                                            		// 0x0038(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xA8];                              		// 0x0040(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialParameterCollectionInstance");
		return ptr;
	}

};


// Class Engine.MatineeInterface
// 0x0000 (0x0028 - 0x0028)
class UMatineeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatineeInterface");
		return ptr;
	}

};


// Class Engine.MorphTarget
// 0x0018 (0x0040 - 0x0028)
class UMorphTarget : public UObject
{
public:
	class USkeletalMesh*                               BaseSkelMesh;                                     		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                              		// 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphTarget");
		return ptr;
	}

};


// Class Engine.NavArea_Default
// 0x0000 (0x0040 - 0x0040)
class UNavArea_Default : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavArea_Default");
		return ptr;
	}

};


// Class Engine.NavArea_LowHeight
// 0x0000 (0x0040 - 0x0040)
class UNavArea_LowHeight : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavArea_LowHeight");
		return ptr;
	}

};


// Class Engine.NavArea_Null
// 0x0000 (0x0040 - 0x0040)
class UNavArea_Null : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavArea_Null");
		return ptr;
	}

};


// Class Engine.NavArea_Obstacle
// 0x0000 (0x0040 - 0x0040)
class UNavArea_Obstacle : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavArea_Obstacle");
		return ptr;
	}

};


// Class Engine.NavAreaMeta
// 0x0000 (0x0040 - 0x0040)
class UNavAreaMeta : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavAreaMeta");
		return ptr;
	}

};


// Class Engine.NavAreaMeta_SwitchByAgent
// 0x0080 (0x00C0 - 0x0040)
class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
{
public:
	class UClass*                                      Agent0Area;                                       		// 0x0040(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent1Area;                                       		// 0x0048(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent2Area;                                       		// 0x0050(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent3Area;                                       		// 0x0058(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent4Area;                                       		// 0x0060(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent5Area;                                       		// 0x0068(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent6Area;                                       		// 0x0070(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent7Area;                                       		// 0x0078(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent8Area;                                       		// 0x0080(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent9Area;                                       		// 0x0088(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent10Area;                                      		// 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent11Area;                                      		// 0x0098(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent12Area;                                      		// 0x00A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent13Area;                                      		// 0x00A8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent14Area;                                      		// 0x00B0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent15Area;                                      		// 0x00B8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavAreaMeta_SwitchByAgent");
		return ptr;
	}

};


// Class Engine.NavCollision
// 0x00E8 (0x0110 - 0x0028)
class UNavCollision : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                              		// 0x0028(0x0050) MISSED OFFSET
	TArray<struct FNavCollisionCylinder>               CylinderCollision;                                		// 0x0078(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FNavCollisionBox>                    BoxCollision;                                     		// 0x0088(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	class UClass*                                      AreaClass;                                        		// 0x0098(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsDynamicObstacle : 1;                           		// 0x00A0(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      bGatherConvexGeometry : 1;                        		// 0x00A0(0x0001) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData01[0x6F];                              		// 0x00A1(0x006F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavCollision");
		return ptr;
	}

};


// Class Engine.NavigationDataChunk
// 0x0008 (0x0030 - 0x0028)
class UNavigationDataChunk : public UObject
{
public:
	struct FName                                       NavigationDataName;                               		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationDataChunk");
		return ptr;
	}

};


// Class Engine.RecastNavMeshDataChunk
// 0x0010 (0x0040 - 0x0030)
class URecastNavMeshDataChunk : public UNavigationDataChunk
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RecastNavMeshDataChunk");
		return ptr;
	}

};


// Class Engine.NavigationPath
// 0x0098 (0x00C0 - 0x0028)
class UNavigationPath : public UObject
{
public:
	struct FScriptMulticastDelegate                    PathUpdatedNotifier;                              		// 0x0028(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	TArray<struct FVector>                             PathPoints;                                       		// 0x0038(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	TEnumAsByte<enum class ENavigationOptionFlag>      RecalculateOnInvalidation;                        		// 0x0048(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x77];                              		// 0x0049(0x0077) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationPath");
		return ptr;
	}


	bool IsValid();
	bool IsStringPulled();
	bool IsPartial();
	float GetPathLength();
	float GetPathCost();
	struct FString GetDebugString();
	void EnableRecalculationOnInvalidation(TEnumAsByte<enum class ENavigationOptionFlag> DoRecalculation);
	void EnableDebugDrawing(bool bShouldDrawDebugData, const struct FLinearColor& PathColor);
};


// Class Engine.NavigationPathGenerator
// 0x0000 (0x0028 - 0x0028)
class UNavigationPathGenerator : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationPathGenerator");
		return ptr;
	}

};


// Class Engine.RecastFilter_UseDefaultArea
// 0x0000 (0x0048 - 0x0048)
class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RecastFilter_UseDefaultArea");
		return ptr;
	}

};


// Class Engine.NavLinkTrivial
// 0x0000 (0x0050 - 0x0050)
class UNavLinkTrivial : public UNavLinkDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavLinkTrivial");
		return ptr;
	}

};


// Class Engine.NavNodeInterface
// 0x0000 (0x0028 - 0x0028)
class UNavNodeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavNodeInterface");
		return ptr;
	}

};


// Class Engine.NetDriver
// 0x03E0 (0x0408 - 0x0028)
class UNetDriver : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET
	struct FString                                     NetConnectionClassName;                           		// 0x0030(0x0010) (CPF_ZeroConstructor, CPF_Config)
	int                                                MaxDownloadSize;                                  		// 0x0040(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bClampListenServerTickRate : 1;                   		// 0x0044(0x0001) (CPF_Config)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0045(0x0003) MISSED OFFSET
	int                                                NetServerMaxTickRate;                             		// 0x0048(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxInternetClientRate;                            		// 0x004C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxClientRate;                                    		// 0x0050(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ServerTravelPause;                                		// 0x0054(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              SpawnPrioritySeconds;                             		// 0x0058(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RelevantTimeout;                                  		// 0x005C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              KeepAliveTime;                                    		// 0x0060(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              InitialConnectTimeout;                            		// 0x0064(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ConnectionTimeout;                                		// 0x0068(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bNoTimeouts : 1;                                  		// 0x006C(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                               		// 0x006D(0x0003) MISSED OFFSET
	class UNetConnection*                              ServerConnection;                                 		// 0x0070(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UNetConnection*>                      ClientConnections;                                		// 0x0078(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData03[0x18];                              		// 0x0088(0x0018) MISSED OFFSET
	class UWorld*                                      World;                                            		// 0x00A0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x20];                              		// 0x00A8(0x0020) MISSED OFFSET
	class UClass*                                      NetConnectionClass;                               		// 0x00C8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UProperty*                                   RoleProperty;                                     		// 0x00D0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UProperty*                                   RemoteRoleProperty;                               		// 0x00D8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       NetDriverName;                                    		// 0x00E0(0x0008) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                               		// 0x00E8(0x0008) MISSED OFFSET
	float                                              Time;                                             		// 0x00F0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x314];                             		// 0x00F4(0x0314) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetDriver");
		return ptr;
	}

};


// Class Engine.PackageMapClient
// 0x0240 (0x0320 - 0x00E0)
class UPackageMapClient : public UPackageMap
{
public:
	unsigned char                                      UnknownData00[0x240];                             		// 0x00E0(0x0240) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PackageMapClient");
		return ptr;
	}

};


// Class Engine.NetConnection
// 0x336A0 (0x336E8 - 0x0048)
class UNetConnection : public UPlayer
{
public:
	TArray<class UChildConnection*>                    Children;                                         		// 0x0048(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class UNetDriver*                                  Driver;                                           		// 0x0058(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UPackageMap*                                 PackageMap;                                       		// 0x0060(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UChannel*>                            OpenChannels;                                     		// 0x0068(0x0010) (CPF_ZeroConstructor)
	TArray<class AActor*>                              SentTemporaries;                                  		// 0x0078(0x0010) (CPF_ZeroConstructor)
	class AActor*                                      ViewTarget;                                       		// 0x0088(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class AActor*                                      OwningActor;                                      		// 0x0090(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxPacket;                                        		// 0x0098(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      InternalAck : 1;                                  		// 0x009C(0x0001)
	unsigned char                                      UnknownData00[0xB3];                              		// 0x009D(0x00B3) MISSED OFFSET
	struct FUniqueNetIdRepl                            PlayerId;                                         		// 0x0150(0x0018)
	unsigned char                                      UnknownData01[0x68];                              		// 0x0168(0x0068) MISSED OFFSET
	double                                             LastReceiveTime;                                  		// 0x01D0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x334E0];                           		// 0x01D8(0x334E0) MISSED OFFSET
	TArray<class UChannel*>                            ChannelsToTick;                                   		// 0x336B8(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData03[0x20];                              		// 0x336C8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetConnection");
		return ptr;
	}

};


// Class Engine.DemoNetConnection
// 0x0020 (0x33708 - 0x336E8)
class UDemoNetConnection : public UNetConnection
{
public:
	unsigned char                                      UnknownData00[0x20];                              		// 0x336E8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoNetConnection");
		return ptr;
	}

};


// Class Engine.DemoNetDriver
// 0x0498 (0x08A0 - 0x0408)
class UDemoNetDriver : public UNetDriver
{
public:
	unsigned char                                      UnknownData00[0x498];                             		// 0x0408(0x0498) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoNetDriver");
		return ptr;
	}

};


// Class Engine.ObjectLibrary
// 0x0138 (0x0160 - 0x0028)
class UObjectLibrary : public UObject
{
public:
	class UClass*                                      ObjectBaseClass;                                  		// 0x0028(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHasBlueprintClasses : 1;                         		// 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0031(0x0007) MISSED OFFSET
	TArray<class UObject*>                             Objects;                                          		// 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<TWeakObjectPtr<class UObject>>              WeakObjects;                                      		// 0x0048(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bUseWeakReferences : 1;                           		// 0x0058(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsFullyLoaded : 1;                               		// 0x0059(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x106];                             		// 0x005A(0x0106) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ObjectLibrary");
		return ptr;
	}

};


// Class Engine.ObjectReferencer
// 0x0010 (0x0038 - 0x0028)
class UObjectReferencer : public UObject
{
public:
	TArray<class UObject*>                             ReferencedObjects;                                		// 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ObjectReferencer");
		return ptr;
	}

};


// Class Engine.OnlineEngineInterface
// 0x0000 (0x0028 - 0x0028)
class UOnlineEngineInterface : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineEngineInterface");
		return ptr;
	}

};


// Class Engine.OnlineSession
// 0x0000 (0x0028 - 0x0028)
class UOnlineSession : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineSession");
		return ptr;
	}

};


// Class Engine.ParticleSpriteEmitter
// 0x0000 (0x0168 - 0x0168)
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSpriteEmitter");
		return ptr;
	}

};


// Class Engine.ParticleModule
// 0x0008 (0x0030 - 0x0028)
class UParticleModule : public UObject
{
public:
	unsigned char                                      bSpawnModule : 1;                                 		// 0x0028(0x0001)
	unsigned char                                      bUpdateModule : 1;                                		// 0x0028(0x0001)
	unsigned char                                      bFinalUpdateModule : 1;                           		// 0x0028(0x0001)
	unsigned char                                      bUpdateForGPUEmitter : 1;                         		// 0x0028(0x0001)
	unsigned char                                      bCurvesAsColor : 1;                               		// 0x0028(0x0001)
	unsigned char                                      b3DDrawMode : 1;                                  		// 0x0028(0x0001) (CPF_Edit)
	unsigned char                                      bSupported3DDrawMode : 1;                         		// 0x0028(0x0001)
	unsigned char                                      bEnabled : 1;                                     		// 0x0028(0x0001)
	unsigned char                                      bEditable : 1;                                    		// 0x0029(0x0001)
	unsigned char                                      LODDuplicate : 1;                                 		// 0x0029(0x0001)
	unsigned char                                      bSupportsRandomSeed : 1;                          		// 0x0029(0x0001)
	unsigned char                                      bRequiresLoopingNotification : 1;                 		// 0x0029(0x0001)
	unsigned char                                      UnknownData00[0x2];                               		// 0x002A(0x0002) MISSED OFFSET
	unsigned char                                      LODValidity;                                      		// 0x002C(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModule");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleOrientationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrientationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationAxisLock
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	TEnumAsByte<enum class EParticleAxisLock>          LockAxisFlags;                                    		// 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrientationAxisLock");
		return ptr;
	}

};


// Class Engine.ParticleLODLevel
// 0x0090 (0x00B8 - 0x0028)
class UParticleLODLevel : public UObject
{
public:
	int                                                Level;                                            		// 0x0028(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                     		// 0x002C(0x0001)
	unsigned char                                      UnknownData00[0x3];                               		// 0x002D(0x0003) MISSED OFFSET
	class UParticleModuleRequired*                     RequiredModule;                                   		// 0x0030(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class UParticleModule*>                     Modules;                                          		// 0x0038(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	class UParticleModuleTypeDataBase*                 TypeDataModule;                                   		// 0x0048(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UParticleModuleSpawn*                        SpawnModule;                                      		// 0x0050(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UParticleModuleEventGenerator*               EventGenerator;                                   		// 0x0058(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UParticleModuleSpawnBase*>            SpawningModules;                                  		// 0x0060(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	TArray<class UParticleModule*>                     SpawnModules;                                     		// 0x0070(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	TArray<class UParticleModule*>                     UpdateModules;                                    		// 0x0080(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	TArray<class UParticleModuleOrbit*>                OrbitModules;                                     		// 0x0090(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	TArray<class UParticleModuleEventReceiverBase*>    EventReceiverModules;                             		// 0x00A0(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	unsigned char                                      ConvertedModules : 1;                             		// 0x00B0(0x0001)
	unsigned char                                      UnknownData01[0x3];                               		// 0x00B1(0x0003) MISSED OFFSET
	int                                                PeakActiveParticles;                              		// 0x00B4(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleLODLevel");
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationBase
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	unsigned char                                      bAlwaysInWorldSpace : 1;                          		// 0x0030(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleAcceleration
// 0x0058 (0x0090 - 0x0038)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                     		// 0x0038(0x0050) (CPF_Edit)
	unsigned char                                      bApplyOwnerScale : 1;                             		// 0x0088(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAcceleration");
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationConstant
// 0x0010 (0x0048 - 0x0038)
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{
public:
	struct FVector                                     Acceleration;                                     		// 0x0038(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationConstant");
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationDrag
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragCoefficient;                                  		// 0x0038(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_Deprecated, CPF_IsPlainOldData)
	struct FRawDistributionFloat                       DragCoefficientRaw;                               		// 0x0040(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationDrag");
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragScale;                                        		// 0x0038(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_Deprecated, CPF_IsPlainOldData)
	struct FRawDistributionFloat                       DragScaleRaw;                                     		// 0x0040(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationDragScaleOverLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x0050 (0x0088 - 0x0038)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                    		// 0x0038(0x0050) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationOverLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleAttractorBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorLine
// 0x0088 (0x00B8 - 0x0030)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     EndPoint0;                                        		// 0x0030(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     EndPoint1;                                        		// 0x003C(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRawDistributionFloat                       Range;                                            		// 0x0048(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       Strength;                                         		// 0x0080(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorLine");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorParticle
// 0x0090 (0x00C0 - 0x0030)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x0030(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	struct FRawDistributionFloat                       Range;                                            		// 0x0038(0x0038) (CPF_Edit)
	unsigned char                                      bStrengthByDistance : 1;                          		// 0x0070(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0071(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       Strength;                                         		// 0x0078(0x0038) (CPF_Edit)
	unsigned char                                      bAffectBaseVelocity : 1;                          		// 0x00B0(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x3];                               		// 0x00B1(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EAttractorParticleSelectionMethod> SelectionMethod;                                  		// 0x00B4(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                               		// 0x00B5(0x0003) MISSED OFFSET
	unsigned char                                      bRenewSource : 1;                                 		// 0x00B8(0x0001) (CPF_Edit)
	unsigned char                                      bInheritSourceVel : 1;                            		// 0x00B8(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData03[0x3];                               		// 0x00B9(0x0003) MISSED OFFSET
	int                                                LastSelIndex;                                     		// 0x00BC(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorParticle");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorPoint
// 0x00C8 (0x00F8 - 0x0030)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      Position;                                         		// 0x0030(0x0050) (CPF_Edit)
	struct FRawDistributionFloat                       Range;                                            		// 0x0080(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       Strength;                                         		// 0x00B8(0x0038) (CPF_Edit)
	unsigned char                                      StrengthByDistance : 1;                           		// 0x00F0(0x0001) (CPF_Edit)
	unsigned char                                      bAffectBaseVelocity : 1;                          		// 0x00F0(0x0001) (CPF_Edit)
	unsigned char                                      bOverrideVelocity : 1;                            		// 0x00F0(0x0001) (CPF_Edit)
	unsigned char                                      bUseWorldSpacePosition : 1;                       		// 0x00F0(0x0001) (CPF_Edit)
	unsigned char                                      Positive_X : 1;                                   		// 0x00F0(0x0001) (CPF_Edit)
	unsigned char                                      Positive_Y : 1;                                   		// 0x00F0(0x0001) (CPF_Edit)
	unsigned char                                      Positive_Z : 1;                                   		// 0x00F0(0x0001) (CPF_Edit)
	unsigned char                                      Negative_X : 1;                                   		// 0x00F0(0x0001) (CPF_Edit)
	unsigned char                                      Negative_Y : 1;                                   		// 0x00F1(0x0001) (CPF_Edit)
	unsigned char                                      Negative_Z : 1;                                   		// 0x00F1(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorPoint");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorPointGravity
// 0x0050 (0x0080 - 0x0030)
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     Position;                                         		// 0x0030(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Radius;                                           		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDistributionFloat*                          Strength;                                         		// 0x0040(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_Deprecated, CPF_IsPlainOldData)
	struct FRawDistributionFloat                       StrengthRaw;                                      		// 0x0048(0x0038) (CPF_Edit, CPF_NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorPointGravity");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleBeamBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamModifier
// 0x00F0 (0x0120 - 0x0030)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<enum class BeamModifierType>           ModifierType;                                     		// 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0031(0x0003) MISSED OFFSET
	struct FBeamModifierOptions                        PositionOptions;                                  		// 0x0034(0x0004) (CPF_Edit)
	struct FRawDistributionVector                      Position;                                         		// 0x0038(0x0050) (CPF_Edit)
	struct FBeamModifierOptions                        TangentOptions;                                   		// 0x0088(0x0004) (CPF_Edit)
	unsigned char                                      UnknownData01[0x4];                               		// 0x008C(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      Tangent;                                          		// 0x0090(0x0050) (CPF_Edit)
	unsigned char                                      bAbsoluteTangent : 1;                             		// 0x00E0(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData02[0x3];                               		// 0x00E1(0x0003) MISSED OFFSET
	struct FBeamModifierOptions                        StrengthOptions;                                  		// 0x00E4(0x0004) (CPF_Edit)
	struct FRawDistributionFloat                       Strength;                                         		// 0x00E8(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamModifier");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamNoise
// 0x0188 (0x01B8 - 0x0030)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned char                                      bLowFreq_Enabled : 1;                             		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0031(0x0003) MISSED OFFSET
	int                                                Frequency;                                        		// 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                Frequency_LowRange;                               		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                               		// 0x003C(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      NoiseRange;                                       		// 0x0040(0x0050) (CPF_Edit)
	struct FRawDistributionFloat                       NoiseRangeScale;                                  		// 0x0090(0x0038) (CPF_Edit)
	unsigned char                                      bNRScaleEmitterTime : 1;                          		// 0x00C8(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData02[0x7];                               		// 0x00C9(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      NoiseSpeed;                                       		// 0x00D0(0x0050) (CPF_Edit)
	unsigned char                                      bSmooth : 1;                                      		// 0x0120(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData03[0x3];                               		// 0x0121(0x0003) MISSED OFFSET
	float                                              NoiseLockRadius;                                  		// 0x0124(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bNoiseLock : 1;                                   		// 0x0128(0x0001)
	unsigned char                                      bOscillate : 1;                                   		// 0x0128(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData04[0x3];                               		// 0x0129(0x0003) MISSED OFFSET
	float                                              NoiseLockTime;                                    		// 0x012C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NoiseTension;                                     		// 0x0130(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseNoiseTangents : 1;                            		// 0x0134(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData05[0x3];                               		// 0x0135(0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       NoiseTangentStrength;                             		// 0x0138(0x0038) (CPF_Edit)
	int                                                NoiseTessellation;                                		// 0x0170(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bTargetNoise : 1;                                 		// 0x0174(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData06[0x3];                               		// 0x0175(0x0003) MISSED OFFSET
	float                                              FrequencyDistance;                                		// 0x0178(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bApplyNoiseScale : 1;                             		// 0x017C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData07[0x3];                               		// 0x017D(0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       NoiseScale;                                       		// 0x0180(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamNoise");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamSource
// 0x0108 (0x0138 - 0x0030)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<enum class Beam2SourceTargetMethod>    SourceMethod;                                     		// 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0031(0x0007) MISSED OFFSET
	struct FName                                       SourceName;                                       		// 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bSourceAbsolute : 1;                              		// 0x0040(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x7];                               		// 0x0041(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      Source;                                           		// 0x0048(0x0050) (CPF_Edit)
	unsigned char                                      bLockSource : 1;                                  		// 0x0098(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0099(0x0003) MISSED OFFSET
	TEnumAsByte<enum class Beam2SourceTargetTangentMethod> SourceTangentMethod;                              		// 0x009C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                               		// 0x009D(0x0003) MISSED OFFSET
	struct FRawDistributionVector                      SourceTangent;                                    		// 0x00A0(0x0050) (CPF_Edit)
	unsigned char                                      bLockSourceTangent : 1;                           		// 0x00F0(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData04[0x7];                               		// 0x00F1(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       SourceStrength;                                   		// 0x00F8(0x0038) (CPF_Edit)
	unsigned char                                      bLockSourceStength : 1;                           		// 0x0130(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamSource");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamTarget
// 0x0108 (0x0138 - 0x0030)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<enum class Beam2SourceTargetMethod>    TargetMethod;                                     		// 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0031(0x0007) MISSED OFFSET
	struct FName                                       TargetName;                                       		// 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRawDistributionVector                      Target;                                           		// 0x0040(0x0050) (CPF_Edit)
	unsigned char                                      bTargetAbsolute : 1;                              		// 0x0090(0x0001) (CPF_Edit)
	unsigned char                                      bLockTarget : 1;                                  		// 0x0090(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0091(0x0003) MISSED OFFSET
	TEnumAsByte<enum class Beam2SourceTargetTangentMethod> TargetTangentMethod;                              		// 0x0094(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0095(0x0003) MISSED OFFSET
	struct FRawDistributionVector                      TargetTangent;                                    		// 0x0098(0x0050) (CPF_Edit)
	unsigned char                                      bLockTargetTangent : 1;                           		// 0x00E8(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData03[0x7];                               		// 0x00E9(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       TargetStrength;                                   		// 0x00F0(0x0038) (CPF_Edit)
	unsigned char                                      bLockTargetStength : 1;                           		// 0x0128(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData04[0x3];                               		// 0x0129(0x0003) MISSED OFFSET
	float                                              LockRadius;                                       		// 0x012C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                               		// 0x0130(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamTarget");
		return ptr;
	}

};


// Class Engine.ParticleModuleCameraBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleCameraBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCameraBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleCameraOffset
// 0x0040 (0x0070 - 0x0030)
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{
public:
	struct FRawDistributionFloat                       CameraOffset;                                     		// 0x0030(0x0038) (CPF_Edit)
	unsigned char                                      bSpawnTimeOnly : 1;                               		// 0x0068(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0069(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EParticleCameraOffsetUpdateMethod> UpdateMethod;                                     		// 0x006C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCameraOffset");
		return ptr;
	}

};


// Class Engine.ParticleModuleCollisionBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleCollisionBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCollisionBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleCollision
// 0x0188 (0x01B8 - 0x0030)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                    		// 0x0030(0x0050) (CPF_Edit)
	struct FRawDistributionVector                      DampingFactorRotation;                            		// 0x0080(0x0050) (CPF_Edit)
	struct FRawDistributionFloat                       MaxCollisions;                                    		// 0x00D0(0x0038) (CPF_Edit)
	TEnumAsByte<enum class EParticleCollisionComplete> CollisionCompletionOption;                        		// 0x0108(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0109(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<enum class EObjectTypeQuery>>   CollisionTypes;                                   		// 0x0110(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                               		// 0x0120(0x0008) MISSED OFFSET
	unsigned char                                      bApplyPhysics : 1;                                		// 0x0128(0x0001) (CPF_Edit)
	unsigned char                                      bIgnoreTriggerVolumes : 1;                        		// 0x0128(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData02[0x7];                               		// 0x0129(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       ParticleMass;                                     		// 0x0130(0x0038) (CPF_Edit)
	float                                              DirScalar;                                        		// 0x0168(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPawnsDoNotDecrementCount : 1;                    		// 0x016C(0x0001) (CPF_Edit)
	unsigned char                                      bOnlyVerticalNormalsDecrementCount : 1;           		// 0x016C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData03[0x3];                               		// 0x016D(0x0003) MISSED OFFSET
	float                                              VerticalFudgeFactor;                              		// 0x0170(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                               		// 0x0174(0x0004) MISSED OFFSET
	struct FRawDistributionFloat                       DelayAmount;                                      		// 0x0178(0x0038) (CPF_Edit)
	unsigned char                                      bDropDetail : 1;                                  		// 0x01B0(0x0001) (CPF_Edit)
	unsigned char                                      bCollideOnlyIfVisible : 1;                        		// 0x01B0(0x0001) (CPF_Edit)
	unsigned char                                      bIgnoreSourceActor : 1;                           		// 0x01B0(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData05[0x3];                               		// 0x01B1(0x0003) MISSED OFFSET
	float                                              MaxCollisionDistance;                             		// 0x01B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCollision");
		return ptr;
	}

};


// Class Engine.ParticleModuleCollisionGPU
// 0x0080 (0x00B0 - 0x0030)
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionFloat                       Resilience;                                       		// 0x0030(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       ResilienceScaleOverLife;                          		// 0x0068(0x0038) (CPF_Edit)
	float                                              Friction;                                         		// 0x00A0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RadiusScale;                                      		// 0x00A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RadiusBias;                                       		// 0x00A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EParticleCollisionResponse> Response;                                         		// 0x00AC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EParticleCollisionMode>     CollisionMode;                                    		// 0x00AD(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCollisionGPU");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleColorBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleColor
// 0x0090 (0x00C0 - 0x0030)
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      StartColor;                                       		// 0x0030(0x0050) (CPF_Edit)
	struct FRawDistributionFloat                       StartAlpha;                                       		// 0x0080(0x0038) (CPF_Edit)
	unsigned char                                      bClampAlpha : 1;                                  		// 0x00B8(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColor");
		return ptr;
	}

};


// Class Engine.ParticleModuleColor_Seeded
// 0x0020 (0x00E0 - 0x00C0)
class UParticleModuleColor_Seeded : public UParticleModuleColor
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x00C0(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColor_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorOverLife
// 0x0090 (0x00C0 - 0x0030)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0030(0x0050) (CPF_Edit)
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0080(0x0038) (CPF_Edit)
	unsigned char                                      bClampAlpha : 1;                                  		// 0x00B8(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorOverLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorScaleOverLife
// 0x0090 (0x00C0 - 0x0030)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                               		// 0x0030(0x0050) (CPF_Edit)
	struct FRawDistributionFloat                       AlphaScaleOverLife;                               		// 0x0080(0x0038) (CPF_Edit)
	unsigned char                                      bEmitterTime : 1;                                 		// 0x00B8(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorScaleOverLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleEventBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventGenerator
// 0x0010 (0x0040 - 0x0030)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray<struct FParticleEvent_GenerateInfo>         Events;                                           		// 0x0030(0x0010) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventGenerator");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverBase
// 0x0010 (0x0040 - 0x0030)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	TEnumAsByte<enum class EParticleEventType>         EventGeneratorType;                               		// 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0031(0x0007) MISSED OFFSET
	struct FName                                       EventName;                                        		// 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverKillParticles
// 0x0008 (0x0048 - 0x0040)
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	unsigned char                                      bStopSpawning : 1;                                		// 0x0040(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverKillParticles");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverSpawn
// 0x00A8 (0x00E8 - 0x0040)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	struct FRawDistributionFloat                       SpawnCount;                                       		// 0x0040(0x0038) (CPF_Edit)
	unsigned char                                      bUseParticleTime : 1;                             		// 0x0078(0x0001) (CPF_Edit)
	unsigned char                                      bUsePSysLocation : 1;                             		// 0x0078(0x0001) (CPF_Edit)
	unsigned char                                      bInheritVelocity : 1;                             		// 0x0078(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0079(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      InheritVelocityScale;                             		// 0x0080(0x0050) (CPF_Edit)
	TArray<class UPhysicalMaterial*>                   PhysicalMaterials;                                		// 0x00D0(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bBanPhysicalMaterials : 1;                        		// 0x00E0(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverSpawn");
		return ptr;
	}

};


// Class Engine.ParticleModuleKillBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleKillBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleKillBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleKillBox
// 0x00A8 (0x00D8 - 0x0030)
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                                  		// 0x0030(0x0050) (CPF_Edit)
	struct FRawDistributionVector                      UpperRightCorner;                                 		// 0x0080(0x0050) (CPF_Edit)
	unsigned char                                      bAbsolute : 1;                                    		// 0x00D0(0x0001) (CPF_Edit)
	unsigned char                                      bKillInside : 1;                                  		// 0x00D0(0x0001) (CPF_Edit)
	unsigned char                                      bAxisAlignedAndFixedSize : 1;                     		// 0x00D0(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleKillBox");
		return ptr;
	}

};


// Class Engine.ParticleModuleKillHeight
// 0x0040 (0x0070 - 0x0030)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                           		// 0x0030(0x0038) (CPF_Edit)
	unsigned char                                      bAbsolute : 1;                                    		// 0x0068(0x0001) (CPF_Edit)
	unsigned char                                      bFloor : 1;                                       		// 0x0068(0x0001) (CPF_Edit)
	unsigned char                                      bApplyPSysScale : 1;                              		// 0x0068(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleKillHeight");
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetimeBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLifetimeBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetime
// 0x0038 (0x0068 - 0x0030)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0030(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetime_Seeded
// 0x0020 (0x0088 - 0x0068)
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0068(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLifetime_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleLightBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleLightBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLightBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLight
// 0x0108 (0x0138 - 0x0030)
class UParticleModuleLight : public UParticleModuleLightBase
{
public:
	unsigned char                                      bUseInverseSquaredFalloff : 1;                    		// 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAffectsTranslucency : 1;                         		// 0x0031(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPreviewLightRadius : 1;                          		// 0x0032(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                               		// 0x0033(0x0001) MISSED OFFSET
	float                                              SpawnFraction;                                    		// 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRawDistributionVector                      ColorScaleOverLife;                               		// 0x0038(0x0050) (CPF_Edit)
	struct FRawDistributionFloat                       BrightnessOverLife;                               		// 0x0088(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       RadiusScale;                                      		// 0x00C0(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       LightExponent;                                    		// 0x00F8(0x0038) (CPF_Edit)
	unsigned char                                      bHighQualityLights : 1;                           		// 0x0130(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bShadowCastingLights : 1;                         		// 0x0131(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLight");
		return ptr;
	}

};


// Class Engine.ParticleModuleLight_Seeded
// 0x0020 (0x0158 - 0x0138)
class UParticleModuleLight_Seeded : public UParticleModuleLight
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0138(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLight_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleLocationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocation
// 0x0058 (0x0088 - 0x0030)
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                    		// 0x0030(0x0050) (CPF_Edit)
	float                                              DistributeOverNPoints;                            		// 0x0080(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DistributeThreshold;                              		// 0x0084(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocation");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocation_Seeded
// 0x0020 (0x00A8 - 0x0088)
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0088(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocation_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationWorldOffset
// 0x0000 (0x0088 - 0x0088)
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationWorldOffset");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// 0x0020 (0x00A8 - 0x0088)
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0088(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationWorldOffset_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationBoneSocket
// 0x0040 (0x0070 - 0x0030)
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<enum class ELocationBoneSocketSource>  SourceType;                                       		// 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0031(0x0003) MISSED OFFSET
	struct FVector                                     UniversalOffset;                                  		// 0x0034(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FLocationBoneSocketInfo>             SourceLocations;                                  		// 0x0040(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TEnumAsByte<enum class ELocationBoneSocketSelectionMethod> SelectionMethod;                                  		// 0x0050(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0051(0x0003) MISSED OFFSET
	unsigned char                                      bUpdatePositionEachFrame : 1;                     		// 0x0054(0x0001) (CPF_Edit)
	unsigned char                                      bOrientMeshEmitters : 1;                          		// 0x0054(0x0001) (CPF_Edit)
	unsigned char                                      bInheritBoneVelocity : 1;                         		// 0x0054(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0055(0x0003) MISSED OFFSET
	float                                              InheritVelocityScale;                             		// 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                               		// 0x005C(0x0004) MISSED OFFSET
	struct FName                                       SkelMeshActorParamName;                           		// 0x0060(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumPreSelectedIndices;                            		// 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationBoneSocket");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationDirect
// 0x0140 (0x0170 - 0x0030)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      Location;                                         		// 0x0030(0x0050) (CPF_Edit)
	struct FRawDistributionVector                      LocationOffset;                                   		// 0x0080(0x0050) (CPF_Edit)
	struct FRawDistributionVector                      ScaleFactor;                                      		// 0x00D0(0x0050) (CPF_Edit)
	struct FRawDistributionVector                      Direction;                                        		// 0x0120(0x0050) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationDirect");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitter
// 0x0020 (0x0050 - 0x0030)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x0030(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	TEnumAsByte<enum class ELocationEmitterSelectionMethod> SelectionMethod;                                  		// 0x0038(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0039(0x0003) MISSED OFFSET
	unsigned char                                      InheritSourceVelocity : 1;                        		// 0x003C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x3];                               		// 0x003D(0x0003) MISSED OFFSET
	float                                              InheritSourceVelocityScale;                       		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bInheritSourceRotation : 1;                       		// 0x0044(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0045(0x0003) MISSED OFFSET
	float                                              InheritSourceRotationScale;                       		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationEmitter");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x0030(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationEmitterDirect");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x0090 (0x00C0 - 0x0030)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned char                                      Positive_X : 1;                                   		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      Positive_Y : 1;                                   		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      Positive_Z : 1;                                   		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      Negative_X : 1;                                   		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      Negative_Y : 1;                                   		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      Negative_Z : 1;                                   		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      SurfaceOnly : 1;                                  		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      Velocity : 1;                                     		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0031(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       VelocityScale;                                    		// 0x0038(0x0038) (CPF_Edit)
	struct FRawDistributionVector                      StartLocation;                                    		// 0x0070(0x0050) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x0080 (0x0140 - 0x00C0)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned char                                      RadialVelocity : 1;                               		// 0x00C0(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x7];                               		// 0x00C1(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       StartRadius;                                      		// 0x00C8(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       StartHeight;                                      		// 0x0100(0x0038) (CPF_Edit)
	TEnumAsByte<enum class CylinderHeightAxis>         HeightAxis;                                       		// 0x0138(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// 0x0020 (0x0160 - 0x0140)
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0140(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x0038 (0x00F8 - 0x00C0)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                      		// 0x00C0(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// 0x0020 (0x0118 - 0x00F8)
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x00F8(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveTriangle
// 0x00F8 (0x0128 - 0x0030)
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartOffset;                                      		// 0x0030(0x0050) (CPF_Edit)
	struct FRawDistributionFloat                       Height;                                           		// 0x0080(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       Angle;                                            		// 0x00B8(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       Thickness;                                        		// 0x00F0(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveTriangle");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationSkelVertSurface
// 0x0060 (0x0090 - 0x0030)
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<enum class ELocationSkelVertSurfaceSource> SourceType;                                       		// 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0031(0x0003) MISSED OFFSET
	struct FVector                                     UniversalOffset;                                  		// 0x0034(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUpdatePositionEachFrame : 1;                     		// 0x0040(0x0001) (CPF_Edit)
	unsigned char                                      bOrientMeshEmitters : 1;                          		// 0x0040(0x0001) (CPF_Edit)
	unsigned char                                      bInheritBoneVelocity : 1;                         		// 0x0040(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x7];                               		// 0x0041(0x0007) MISSED OFFSET
	struct FName                                       SkelMeshActorParamName;                           		// 0x0048(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FName>                               ValidAssociatedBones;                             		// 0x0050(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bEnforceNormalCheck : 1;                          		// 0x0060(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0061(0x0003) MISSED OFFSET
	struct FVector                                     NormalToCompare;                                  		// 0x0064(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NormalCheckToleranceDegrees;                      		// 0x0070(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NormalCheckTolerance;                             		// 0x0074(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<int>                                        ValidMaterialIndices;                             		// 0x0078(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bInheritVertexColor : 1;                          		// 0x0088(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationSkelVertSurface");
		return ptr;
	}

};


// Class Engine.ParticleModulePivotOffset
// 0x0008 (0x0038 - 0x0030)
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{
public:
	struct FVector2D                                   PivotOffset;                                      		// 0x0030(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModulePivotOffset");
		return ptr;
	}

};


// Class Engine.ParticleModuleSourceMovement
// 0x0050 (0x0080 - 0x0030)
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      SourceMovementScale;                              		// 0x0030(0x0050) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSourceMovement");
		return ptr;
	}

};


// Class Engine.ParticleModuleMaterialBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleMaterialBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMaterialBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshMaterial
// 0x0010 (0x0040 - 0x0030)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray<class UMaterialInterface*>                  MeshMaterials;                                    		// 0x0030(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshMaterial");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrbitBase
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned char                                      bUseEmitterTime : 1;                              		// 0x0030(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrbitBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrbit
// 0x0110 (0x0148 - 0x0038)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	TEnumAsByte<enum class EOrbitChainMode>            ChainMode;                                        		// 0x0038(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0039(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      OffsetAmount;                                     		// 0x0040(0x0050) (CPF_Edit)
	struct FOrbitOptions                               OffsetOptions;                                    		// 0x0090(0x0004) (CPF_Edit)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0094(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      RotationAmount;                                   		// 0x0098(0x0050) (CPF_Edit)
	struct FOrbitOptions                               RotationOptions;                                  		// 0x00E8(0x0004) (CPF_Edit)
	unsigned char                                      UnknownData02[0x4];                               		// 0x00EC(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      RotationRateAmount;                               		// 0x00F0(0x0050) (CPF_Edit)
	struct FOrbitOptions                               RotationRateOptions;                              		// 0x0140(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrbit");
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleParameterBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleParameterBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterDynamic
// 0x0018 (0x0048 - 0x0030)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray<struct FEmitterDynamicParameter>            DynamicParams;                                    		// 0x0030(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	int                                                UpdateFlags;                                      		// 0x0040(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUsesVelocity : 1;                                		// 0x0044(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleParameterDynamic");
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterDynamic_Seeded
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0048(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleParameterDynamic_Seeded");
		return ptr;
	}

};


// Class Engine.SubUVAnimation
// 0x0038 (0x0060 - 0x0028)
class USubUVAnimation : public UObject
{
public:
	class UTexture2D*                                  SubUVTexture;                                     		// 0x0028(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SubImages_Horizontal;                             		// 0x0030(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SubImages_Vertical;                               		// 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ESubUVBoundingVertexCount>  BoundingMode;                                     		// 0x0038(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EOpacitySourceMode>         OpacitySourceMode;                                		// 0x0039(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                               		// 0x003A(0x0002) MISSED OFFSET
	float                                              AlphaThreshold;                                   		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                              		// 0x0040(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SubUVAnimation");
		return ptr;
	}

};


// Class Engine.ParticleModuleRequired
// 0x0140 (0x0170 - 0x0030)
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                          Material;                                         		// 0x0030(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     EmitterOrigin;                                    		// 0x0038(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    EmitterRotation;                                  		// 0x0044(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EParticleScreenAlignment>   ScreenAlignment;                                  		// 0x0050(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0051(0x0003) MISSED OFFSET
	float                                              MinFacingCameraBlendDistance;                     		// 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxFacingCameraBlendDistance;                     		// 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseLocalSpace : 1;                               		// 0x005C(0x0001) (CPF_Edit)
	unsigned char                                      bKillOnDeactivate : 1;                            		// 0x005C(0x0001) (CPF_Edit)
	unsigned char                                      bKillOnCompleted : 1;                             		// 0x005C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x3];                               		// 0x005D(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EParticleSortMode>          SortMode;                                         		// 0x0060(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0061(0x0003) MISSED OFFSET
	unsigned char                                      bUseLegacyEmitterTime : 1;                        		// 0x0064(0x0001) (CPF_Edit)
	unsigned char                                      bRemoveHMDRoll : 1;                               		// 0x0064(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData03[0x3];                               		// 0x0065(0x0003) MISSED OFFSET
	float                                              EmitterDuration;                                  		// 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              EmitterDurationLow;                               		// 0x006C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEmitterDurationUseRange : 1;                     		// 0x0070(0x0001) (CPF_Edit)
	unsigned char                                      bDurationRecalcEachLoop : 1;                      		// 0x0070(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData04[0x3];                               		// 0x0071(0x0003) MISSED OFFSET
	int                                                EmitterLoops;                                     		// 0x0074(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRawDistributionFloat                       SpawnRate;                                        		// 0x0078(0x0038)
	TEnumAsByte<enum class EParticleBurstMethod>       ParticleBurstMethod;                              		// 0x00B0(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                               		// 0x00B1(0x0007) MISSED OFFSET
	TArray<struct FParticleBurst>                      BurstList;                                        		// 0x00B8(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_NoClear)
	float                                              EmitterDelay;                                     		// 0x00C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              EmitterDelayLow;                                  		// 0x00CC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEmitterDelayUseRange : 1;                        		// 0x00D0(0x0001) (CPF_Edit)
	unsigned char                                      bDelayFirstLoopOnly : 1;                          		// 0x00D0(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData06[0x3];                               		// 0x00D1(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EParticleSubUVInterpMethod> InterpolationMethod;                              		// 0x00D4(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                               		// 0x00D5(0x0003) MISSED OFFSET
	int                                                SubImages_Horizontal;                             		// 0x00D8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SubImages_Vertical;                               		// 0x00DC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bScaleUV : 1;                                     		// 0x00E0(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData08[0x3];                               		// 0x00E1(0x0003) MISSED OFFSET
	float                                              RandomImageTime;                                  		// 0x00E4(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                RandomImageChanges;                               		// 0x00E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideSystemMacroUV : 1;                       		// 0x00EC(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData09[0x3];                               		// 0x00ED(0x0003) MISSED OFFSET
	struct FVector                                     MacroUVPosition;                                  		// 0x00F0(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MacroUVRadius;                                    		// 0x00FC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseMaxDrawCount : 1;                             		// 0x0100(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData10[0x3];                               		// 0x0101(0x0003) MISSED OFFSET
	int                                                MaxDrawCount;                                     		// 0x0104(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EParticleUVFlipMode>        UVFlippingMode;                                   		// 0x0108(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData11[0x7];                               		// 0x0109(0x0007) MISSED OFFSET
	class UTexture2D*                                  CutoutTexture;                                    		// 0x0110(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ESubUVBoundingVertexCount>  BoundingMode;                                     		// 0x0118(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EOpacitySourceMode>         OpacitySourceMode;                                		// 0x0119(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData12[0x2];                               		// 0x011A(0x0002) MISSED OFFSET
	float                                              AlphaThreshold;                                   		// 0x011C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EEmitterNormalsMode>        EmitterNormalsMode;                               		// 0x0120(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                               		// 0x0121(0x0003) MISSED OFFSET
	struct FVector                                     NormalsSphereCenter;                              		// 0x0124(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     NormalsCylinderDirection;                         		// 0x0130(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOrbitModuleAffectsVelocityAlignment : 1;         		// 0x013C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData14[0x3];                               		// 0x013D(0x0003) MISSED OFFSET
	TArray<struct FName>                               NamedMaterialOverrides;                           		// 0x0140(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData15[0x20];                              		// 0x0150(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRequired");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleRotationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotation
// 0x0058 (0x0088 - 0x0030)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                    		// 0x0030(0x0050) (CPF_Edit)
	unsigned char                                      bInheritParent : 1;                               		// 0x0080(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotation");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotation_Seeded
// 0x0020 (0x00A8 - 0x0088)
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0088(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotation_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotation
// 0x0038 (0x0068 - 0x0030)
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                    		// 0x0030(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotation");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotation_Seeded
// 0x0020 (0x0088 - 0x0068)
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0068(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotation_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationOverLifetime
// 0x0040 (0x0070 - 0x0030)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                 		// 0x0030(0x0038) (CPF_Edit)
	unsigned char                                      Scale : 1;                                        		// 0x0068(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationOverLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRateBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRate
// 0x0050 (0x0080 - 0x0030)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                                		// 0x0030(0x0050) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRate
// 0x0038 (0x0068 - 0x0030)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x0030(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRate");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRate_Seeded
// 0x0020 (0x00A0 - 0x0080)
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0080(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x0050 (0x0080 - 0x0030)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x0030(0x0050) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateMultiplyLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRateOverLife
// 0x0058 (0x0088 - 0x0030)
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      RotRate;                                          		// 0x0030(0x0050) (CPF_Edit)
	unsigned char                                      bScaleRotRate : 1;                                		// 0x0080(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateOverLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRate_Seeded
// 0x0020 (0x0088 - 0x0068)
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0068(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRate_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x0038 (0x0068 - 0x0030)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                   		// 0x0030(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRateMultiplyLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleSizeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleSize
// 0x0050 (0x0080 - 0x0030)
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      StartSize;                                        		// 0x0030(0x0050) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSize");
		return ptr;
	}

};


// Class Engine.ParticleModuleSize_Seeded
// 0x0020 (0x00A0 - 0x0080)
class UParticleModuleSize_Seeded : public UParticleModuleSize
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0080(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSize_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0058 (0x0088 - 0x0030)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x0030(0x0050) (CPF_Edit)
	unsigned char                                      MultiplyX : 1;                                    		// 0x0080(0x0001) (CPF_Edit)
	unsigned char                                      MultiplyY : 1;                                    		// 0x0080(0x0001) (CPF_Edit)
	unsigned char                                      MultiplyZ : 1;                                    		// 0x0080(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeMultiplyLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScale
// 0x0058 (0x0088 - 0x0030)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                        		// 0x0030(0x0050) (CPF_Edit)
	unsigned char                                      EnableX : 1;                                      		// 0x0080(0x0001) (CPF_Edit)
	unsigned char                                      EnableY : 1;                                      		// 0x0080(0x0001) (CPF_Edit)
	unsigned char                                      EnableZ : 1;                                      		// 0x0080(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeScale");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScaleBySpeed
// 0x0010 (0x0040 - 0x0030)
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{
public:
	struct FVector2D                                   SpeedScale;                                       		// 0x0030(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector2D                                   MaxScale;                                         		// 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeScaleBySpeed");
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnBase
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned char                                      bProcessSpawnRate : 1;                            		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      bProcessBurstList : 1;                            		// 0x0030(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawn
// 0x00C8 (0x0100 - 0x0038)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                             		// 0x0038(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       RateScale;                                        		// 0x0070(0x0038) (CPF_Edit)
	TEnumAsByte<enum class EParticleBurstMethod>       ParticleBurstMethod;                              		// 0x00A8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x00A9(0x0007) MISSED OFFSET
	TArray<struct FParticleBurst>                      BurstList;                                        		// 0x00B0(0x0010) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_NoClear)
	struct FRawDistributionFloat                       BurstScale;                                       		// 0x00C0(0x0038) (CPF_Edit)
	unsigned char                                      bApplyGlobalSpawnRateScale : 1;                   		// 0x00F8(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSpawn");
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnPerUnit
// 0x0050 (0x0088 - 0x0038)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                              UnitScalar;                                       		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x003C(0x0004) MISSED OFFSET
	struct FRawDistributionFloat                       SpawnPerUnit;                                     		// 0x0040(0x0038) (CPF_Edit)
	unsigned char                                      bIgnoreSpawnRateWhenMoving : 1;                   		// 0x0078(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0079(0x0003) MISSED OFFSET
	float                                              MovementTolerance;                                		// 0x007C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxFrameDistance;                                 		// 0x0080(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIgnoreMovementAlongX : 1;                        		// 0x0084(0x0001) (CPF_Edit)
	unsigned char                                      bIgnoreMovementAlongY : 1;                        		// 0x0084(0x0001) (CPF_Edit)
	unsigned char                                      bIgnoreMovementAlongZ : 1;                        		// 0x0084(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnPerUnit");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleSubUVBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUV
// 0x0048 (0x0078 - 0x0030)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	class USubUVAnimation*                             Animation;                                        		// 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRawDistributionFloat                       SubImageIndex;                                    		// 0x0038(0x0038) (CPF_Edit)
	unsigned char                                      bUseRealTime : 1;                                 		// 0x0070(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUV");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVMovie
// 0x0048 (0x00C0 - 0x0078)
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	unsigned char                                      bUseEmitterTime : 1;                              		// 0x0078(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0079(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       FrameRate;                                        		// 0x0080(0x0038) (CPF_Edit)
	int                                                StartingFrame;                                    		// 0x00B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVMovie");
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleTrailBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTrailBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailSource
// 0x0068 (0x0098 - 0x0030)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	TEnumAsByte<enum class ETrail2SourceMethod>        SourceMethod;                                     		// 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0031(0x0007) MISSED OFFSET
	struct FName                                       SourceName;                                       		// 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRawDistributionFloat                       SourceStrength;                                   		// 0x0040(0x0038) (CPF_Edit)
	unsigned char                                      bLockSourceStength : 1;                           		// 0x0078(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0079(0x0003) MISSED OFFSET
	int                                                SourceOffsetCount;                                		// 0x007C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FVector>                             SourceOffsetDefaults;                             		// 0x0080(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	TEnumAsByte<enum class EParticleSourceSelectionMethod> SelectionMethod;                                  		// 0x0090(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0091(0x0003) MISSED OFFSET
	unsigned char                                      bInheritRotation : 1;                             		// 0x0094(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTrailSource");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataAnimTrail
// 0x0018 (0x0048 - 0x0030)
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                      		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;          		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;              		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0031(0x0003) MISSED OFFSET
	float                                              TilingDistance;                                   		// 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DistanceTessellationStepSize;                     		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TangentTessellationStepSize;                      		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WidthTessellationStepSize;                        		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataAnimTrail");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBeam2
// 0x0138 (0x0168 - 0x0030)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	TEnumAsByte<enum class EBeam2Method>               BeamMethod;                                       		// 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0031(0x0003) MISSED OFFSET
	int                                                TextureTile;                                      		// 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TextureTileDistance;                              		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                Sheets;                                           		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxBeamCount;                                     		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Speed;                                            		// 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                InterpolationPoints;                              		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAlwaysOn : 1;                                    		// 0x004C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x3];                               		// 0x004D(0x0003) MISSED OFFSET
	int                                                UpVectorStepSize;                                 		// 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0054(0x0004) MISSED OFFSET
	struct FName                                       BranchParentName;                                 		// 0x0058(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRawDistributionFloat                       Distance;                                         		// 0x0060(0x0038) (CPF_Edit)
	TEnumAsByte<enum class EBeamTaperMethod>           TaperMethod;                                      		// 0x0098(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                               		// 0x0099(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       TaperFactor;                                      		// 0x00A0(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       TaperScale;                                       		// 0x00D8(0x0038) (CPF_Edit)
	unsigned char                                      RenderGeometry : 1;                               		// 0x0110(0x0001) (CPF_Edit)
	unsigned char                                      RenderDirectLine : 1;                             		// 0x0110(0x0001) (CPF_Edit)
	unsigned char                                      RenderLines : 1;                                  		// 0x0110(0x0001) (CPF_Edit)
	unsigned char                                      RenderTessellation : 1;                           		// 0x0110(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData04[0x57];                              		// 0x0111(0x0057) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBeam2");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataGpu
// 0x0430 (0x0460 - 0x0030)
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{
public:
	struct FGPUSpriteEmitterInfo                       EmitterInfo;                                      		// 0x0030(0x02C0)
	struct FGPUSpriteResourceData                      ResourceData;                                     		// 0x02F0(0x0160)
	float                                              CameraMotionBlurAmount;                           		// 0x0450(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bClearExistingParticlesOnInit : 1;                		// 0x0454(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0xB];                               		// 0x0455(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataGpu");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataMesh
// 0x0088 (0x00B8 - 0x0030)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                             		// 0x0030(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      CastShadows : 1;                                  		// 0x0038(0x0001)
	unsigned char                                      DoCollisions : 1;                                 		// 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0039(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EMeshScreenAlignment>       MeshAlignment;                                    		// 0x003C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x003D(0x0003) MISSED OFFSET
	unsigned char                                      bOverrideMaterial : 1;                            		// 0x0040(0x0001) (CPF_Edit)
	unsigned char                                      bOverrideDefaultMotionBlurSettings : 1;           		// 0x0040(0x0001) (CPF_Edit)
	unsigned char                                      bEnableMotionBlur : 1;                            		// 0x0040(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0041(0x0003) MISSED OFFSET
	float                                              Pitch;                                            		// 0x0044(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              Roll;                                             		// 0x0048(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              Yaw;                                              		// 0x004C(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FRawDistributionVector                      RollPitchYawRange;                                		// 0x0050(0x0050) (CPF_Edit)
	unsigned char                                      UnknownData03[0x8];                               		// 0x00A0(0x0008) MISSED OFFSET
	TEnumAsByte<enum class EParticleAxisLock>          AxisLockOption;                                   		// 0x00A8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                               		// 0x00A9(0x0003) MISSED OFFSET
	unsigned char                                      bCameraFacing : 1;                                		// 0x00AC(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData05[0x3];                               		// 0x00AD(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EMeshCameraFacingUpAxis>    CameraFacingUpAxisOption;                         		// 0x00B0(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	TEnumAsByte<enum class EMeshCameraFacingOptions>   CameraFacingOption;                               		// 0x00B1(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                               		// 0x00B2(0x0002) MISSED OFFSET
	unsigned char                                      bApplyParticleRotationAsSpin : 1;                 		// 0x00B4(0x0001) (CPF_Edit)
	unsigned char                                      bFaceCameraDirectionRatherThanPosition : 1;       		// 0x00B4(0x0001) (CPF_Edit)
	unsigned char                                      bCollisionsConsiderPartilceSize : 1;              		// 0x00B4(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataMesh");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataRibbon
// 0x0030 (0x0060 - 0x0030)
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int                                                MaxTessellationBetweenParticles;                  		// 0x0030(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SheetsPerTrail;                                   		// 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxTrailCount;                                    		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxParticleInTrailCount;                          		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                      		// 0x0040(0x0001) (CPF_Edit)
	unsigned char                                      bDeadTrailsOnSourceLoss : 1;                      		// 0x0040(0x0001) (CPF_Edit)
	unsigned char                                      bClipSourceSegement : 1;                          		// 0x0040(0x0001) (CPF_Edit)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;          		// 0x0040(0x0001) (CPF_Edit)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;              		// 0x0040(0x0001) (CPF_Edit)
	unsigned char                                      bSpawnInitialParticle : 1;                        		// 0x0040(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0041(0x0003) MISSED OFFSET
	TEnumAsByte<enum class ETrailsRenderAxisOption>    RenderAxis;                                       		// 0x0044(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0045(0x0003) MISSED OFFSET
	float                                              TangentSpawningScalar;                            		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRenderGeometry : 1;                              		// 0x004C(0x0001) (CPF_Edit)
	unsigned char                                      bRenderSpawnPoints : 1;                           		// 0x004C(0x0001) (CPF_Edit)
	unsigned char                                      bRenderTangents : 1;                              		// 0x004C(0x0001) (CPF_Edit)
	unsigned char                                      bRenderTessellation : 1;                          		// 0x004C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData02[0x3];                               		// 0x004D(0x0003) MISSED OFFSET
	float                                              TilingDistance;                                   		// 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DistanceTessellationStepSize;                     		// 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnableTangentDiffInterpScale : 1;                		// 0x0058(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData03[0x3];                               		// 0x0059(0x0003) MISSED OFFSET
	float                                              TangentTessellationScalar;                        		// 0x005C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataRibbon");
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleVectorFieldBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldGlobal
// 0x0010 (0x0040 - 0x0030)
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{
public:
	unsigned char                                      bOverrideGlobalVectorFieldTightness : 1;          		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0031(0x0003) MISSED OFFSET
	float                                              GlobalVectorFieldScale;                           		// 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              GlobalVectorFieldTightness;                       		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldGlobal");
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldLocal
// 0x0038 (0x0068 - 0x0030)
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{
public:
	class UVectorField*                                VectorField;                                      		// 0x0030(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     RelativeTranslation;                              		// 0x0038(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                 		// 0x0044(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     RelativeScale3D;                                  		// 0x0050(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Intensity;                                        		// 0x005C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Tightness;                                        		// 0x0060(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIgnoreComponentTransform : 1;                    		// 0x0064(0x0001) (CPF_Edit)
	unsigned char                                      bTileX : 1;                                       		// 0x0064(0x0001) (CPF_Edit)
	unsigned char                                      bTileY : 1;                                       		// 0x0064(0x0001) (CPF_Edit)
	unsigned char                                      bTileZ : 1;                                       		// 0x0064(0x0001) (CPF_Edit)
	unsigned char                                      bUseFixDT : 1;                                    		// 0x0064(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldLocal");
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldRotation
// 0x0018 (0x0048 - 0x0030)
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                     MinInitialRotation;                               		// 0x0030(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     MaxInitialRotation;                               		// 0x003C(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldRotation");
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldRotationRate
// 0x0010 (0x0040 - 0x0030)
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                     RotationRate;                                     		// 0x0030(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldRotationRate");
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldScale
// 0x0040 (0x0070 - 0x0030)
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScale;                                 		// 0x0030(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_Deprecated, CPF_IsPlainOldData)
	struct FRawDistributionFloat                       VectorFieldScaleRaw;                              		// 0x0038(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldScale");
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldScaleOverLife
// 0x0040 (0x0070 - 0x0030)
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScaleOverLife;                         		// 0x0030(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_Deprecated, CPF_IsPlainOldData)
	struct FRawDistributionFloat                       VectorFieldScaleOverLifeRaw;                      		// 0x0038(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldScaleOverLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityBase
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	unsigned char                                      bInWorldSpace : 1;                                		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      bApplyOwnerScale : 1;                             		// 0x0030(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocity
// 0x0088 (0x00C0 - 0x0038)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x0038(0x0050) (CPF_Edit)
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x0088(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocity");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocity_Seeded
// 0x0020 (0x00E0 - 0x00C0)
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x00C0(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocity_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityCone
// 0x0080 (0x00B8 - 0x0038)
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                       Angle;                                            		// 0x0038(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       Velocity;                                         		// 0x0070(0x0038) (CPF_Edit)
	struct FVector                                     Direction;                                        		// 0x00A8(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityCone");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityInheritParent
// 0x0050 (0x0088 - 0x0038)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      Scale;                                            		// 0x0038(0x0050) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityInheritParent");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0058 (0x0090 - 0x0038)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                      		// 0x0038(0x0050) (CPF_Edit)
	unsigned char                                      Absolute : 1;                                     		// 0x0088(0x0001) (CPF_Edit, CPF_ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityOverLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventSendToGame
// 0x0000 (0x0028 - 0x0028)
class UParticleModuleEventSendToGame : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventSendToGame");
		return ptr;
	}

};


// Class Engine.ParticleSystemReplay
// 0x0018 (0x0040 - 0x0028)
class UParticleSystemReplay : public UObject
{
public:
	int                                                ClipIDNumber;                                     		// 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                              		// 0x002C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSystemReplay");
		return ptr;
	}

};


// Class Engine.DemoPendingNetGame
// 0x0000 (0x00C8 - 0x00C8)
class UDemoPendingNetGame : public UPendingNetGame
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoPendingNetGame");
		return ptr;
	}

};


// Class Engine.PhysicalMaterial
// 0x0058 (0x0080 - 0x0028)
class UPhysicalMaterial : public UObject
{
public:
	float                                              Friction;                                         		// 0x0028(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EFrictionCombineMode>       FrictionCombineMode;                              		// 0x002C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideFrictionCombineMode : 1;                 		// 0x002D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                               		// 0x002E(0x0002) MISSED OFFSET
	float                                              Restitution;                                      		// 0x0030(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EFrictionCombineMode>       RestitutionCombineMode;                           		// 0x0034(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideRestitutionCombineMode : 1;              		// 0x0035(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                               		// 0x0036(0x0002) MISSED OFFSET
	float                                              Density;                                          		// 0x0038(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RaiseMassToPower;                                 		// 0x003C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DestructibleDamageThresholdScale;                 		// 0x0040(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0044(0x0004) MISSED OFFSET
	class UPhysicalMaterialPropertyBase*               PhysicalMaterialProperty;                         		// 0x0048(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EPhysicalSurface>           SurfaceType;                                      		// 0x0050(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                               		// 0x0051(0x0003) MISSED OFFSET
	float                                              TireFrictionScale;                                		// 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FTireFrictionScalePair>              TireFrictionScales;                               		// 0x0058(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData04[0x18];                              		// 0x0068(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicalMaterial");
		return ptr;
	}

};


// Class Engine.PhysicalMaterialPropertyBase
// 0x0000 (0x0028 - 0x0028)
class UPhysicalMaterialPropertyBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicalMaterialPropertyBase");
		return ptr;
	}

};


// Class Engine.PhysicsCollisionHandler
// 0x0018 (0x0040 - 0x0028)
class UPhysicsCollisionHandler : public UObject
{
public:
	float                                              ImpactThreshold;                                  		// 0x0028(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ImpactReFireDelay;                                		// 0x002C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class USoundBase*                                  DefaultImpactSound;                               		// 0x0030(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastImpactSoundTime;                              		// 0x0038(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsCollisionHandler");
		return ptr;
	}

};


// Class Engine.PhysicsConstraintTemplate
// 0x0318 (0x0340 - 0x0028)
class UPhysicsConstraintTemplate : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET
	struct FConstraintInstance                         DefaultInstance;                                  		// 0x0030(0x01F0) (CPF_Edit)
	TArray<struct FPhysicsConstraintProfileHandle>     ProfileHandles;                                   		// 0x0220(0x0010) (CPF_ZeroConstructor)
	struct FConstraintProfileProperties                DefaultProfile;                                   		// 0x0230(0x0104) (CPF_Transient)
	unsigned char                                      UnknownData01[0xC];                               		// 0x0334(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsConstraintTemplate");
		return ptr;
	}

};


// Class Engine.PhysicsSerializer
// 0x00A8 (0x00D0 - 0x0028)
class UPhysicsSerializer : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA8];                              		// 0x0028(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsSerializer");
		return ptr;
	}

};


// Class Engine.PlatformInterfaceBase
// 0x0010 (0x0038 - 0x0028)
class UPlatformInterfaceBase : public UObject
{
public:
	TArray<struct FDelegateArray>                      AllDelegates;                                     		// 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlatformInterfaceBase");
		return ptr;
	}

};


// Class Engine.CloudStorageBase
// 0x0018 (0x0050 - 0x0038)
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FString>                             LocalCloudFiles;                                  		// 0x0038(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bSuppressDelegateCalls : 1;                       		// 0x0048(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CloudStorageBase");
		return ptr;
	}

};


// Class Engine.InGameAdManager
// 0x0028 (0x0060 - 0x0038)
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
	unsigned char                                      bShouldPauseWhileAdOpen : 1;                      		// 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0039(0x0007) MISSED OFFSET
	TArray<struct FScriptDelegate>                     ClickedBannerDelegates;                           		// 0x0040(0x0010) (CPF_ZeroConstructor)
	TArray<struct FScriptDelegate>                     ClosedAdDelegates;                                		// 0x0050(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InGameAdManager");
		return ptr;
	}

};


// Class Engine.MicroTransactionBase
// 0x0030 (0x0068 - 0x0038)
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FPurchaseInfo>                       AvailableProducts;                                		// 0x0038(0x0010) (CPF_ZeroConstructor)
	struct FString                                     LastError;                                        		// 0x0048(0x0010) (CPF_ZeroConstructor)
	struct FString                                     LastErrorSolution;                                		// 0x0058(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MicroTransactionBase");
		return ptr;
	}

};


// Class Engine.TwitterIntegrationBase
// 0x0000 (0x0038 - 0x0038)
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TwitterIntegrationBase");
		return ptr;
	}


	bool TwitterRequest(const struct FString& URL, TArray<struct FString> ParamKeysAndValues, TEnumAsByte<enum class ETwitterRequestMethod> RequestMethod, int AccountIndex);
	bool ShowTweetUI(const struct FString& InitialMessage, const struct FString& URL, const struct FString& Picture);
	void Init();
	int GetNumAccounts();
	struct FString GetAccountName(int AccountIndex);
	bool CanShowTweetUI();
	bool AuthorizeAccounts();
};


// Class Engine.PlatformInterfaceWebResponse
// 0x0088 (0x00B0 - 0x0028)
class UPlatformInterfaceWebResponse : public UObject
{
public:
	struct FString                                     OriginalURL;                                      		// 0x0028(0x0010) (CPF_ZeroConstructor)
	int                                                ResponseCode;                                     		// 0x0038(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                Tag;                                              		// 0x003C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     StringResponse;                                   		// 0x0040(0x0010) (CPF_ZeroConstructor)
	TArray<unsigned char>                              BinaryResponse;                                   		// 0x0050(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                              		// 0x0060(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlatformInterfaceWebResponse");
		return ptr;
	}


	int GetNumHeaders();
	struct FString GetHeaderValue(const struct FString& HeaderName);
	void GetHeader(int HeaderIndex, struct FString* Header, struct FString* Value);
};


// Class Engine.ChildConnection
// 0x0008 (0x336F0 - 0x336E8)
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                              Parent;                                           		// 0x336E8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ChildConnection");
		return ptr;
	}

};


// Class Engine.Polys
// 0x0010 (0x0038 - 0x0028)
class UPolys : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                              		// 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Polys");
		return ptr;
	}

};


// Class Engine.ReporterBase
// 0x0008 (0x0030 - 0x0028)
class UReporterBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReporterBase");
		return ptr;
	}

};


// Class Engine.ReporterGraph
// 0x0078 (0x00A8 - 0x0030)
class UReporterGraph : public UReporterBase
{
public:
	unsigned char                                      UnknownData00[0x78];                              		// 0x0030(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReporterGraph");
		return ptr;
	}

};


// Class Engine.ReverbEffect
// 0x0030 (0x0058 - 0x0028)
class UReverbEffect : public UObject
{
public:
	float                                              Density;                                          		// 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Diffusion;                                        		// 0x002C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Gain;                                             		// 0x0030(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              GainHF;                                           		// 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DecayTime;                                        		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DecayHFRatio;                                     		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ReflectionsGain;                                  		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ReflectionsDelay;                                 		// 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LateGain;                                         		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LateDelay;                                        		// 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AirAbsorptionGainHF;                              		// 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RoomRolloffFactor;                                		// 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReverbEffect");
		return ptr;
	}

};


// Class Engine.Rig
// 0x0020 (0x0048 - 0x0028)
class URig : public UObject
{
public:
	TArray<struct FTransformBase>                      TransformBases;                                   		// 0x0028(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	TArray<struct FNode>                               Nodes;                                            		// 0x0038(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Rig");
		return ptr;
	}

};


// Class Engine.SimpleConstructionScript
// 0x0090 (0x00B8 - 0x0028)
class USimpleConstructionScript : public UObject
{
public:
	TArray<class USCS_Node*>                           RootNodes;                                        		// 0x0028(0x0010) (CPF_ZeroConstructor)
	TArray<class USCS_Node*>                           AllNodes;                                         		// 0x0038(0x0010) (CPF_ZeroConstructor)
	class USCS_Node*                                   DefaultSceneRootNode;                             		// 0x0048(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class USCS_Node*                                   RootNode;                                         		// 0x0050(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	TArray<class USCS_Node*>                           ActorComponentNodes;                              		// 0x0058(0x0010) (CPF_ZeroConstructor, CPF_Deprecated)
	unsigned char                                      UnknownData00[0x50];                              		// 0x0068(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SimpleConstructionScript");
		return ptr;
	}

};


// Class Engine.SCS_Node
// 0x0118 (0x0140 - 0x0028)
class USCS_Node : public UObject
{
public:
	class UClass*                                      ComponentClass;                                   		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UActorComponent*                             ComponentTemplate;                                		// 0x0030(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FBlueprintCookedComponentInstancingData     CookedComponentInstancingData;                    		// 0x0038(0x0050)
	struct FName                                       VariableName;                                     		// 0x0088(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FName                                       AttachToName;                                     		// 0x0090(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       ParentComponentOrVariableName;                    		// 0x0098(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       ParentComponentOwnerClassName;                    		// 0x00A0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsParentComponentNative : 1;                     		// 0x00A8(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x00A9(0x0007) MISSED OFFSET
	TArray<class USCS_Node*>                           ChildNodes;                                       		// 0x00B0(0x0010) (CPF_ZeroConstructor)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                    		// 0x00C0(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FGuid                                       VariableGuid;                                     		// 0x00D0(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsFalseRoot : 1;                                 		// 0x00E0(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      bIsNative : 1;                                    		// 0x00E1(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                               		// 0x00E2(0x0006) MISSED OFFSET
	struct FName                                       NativeComponentName;                              		// 0x00E8(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      bVariableNameAutoGenerated : 1;                   		// 0x00F0(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                               		// 0x00F1(0x0007) MISSED OFFSET
	struct FName                                       InternalVariableName;                             		// 0x00F8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x40];                              		// 0x0100(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SCS_Node");
		return ptr;
	}

};


// Class Engine.Selection
// 0x0068 (0x0090 - 0x0028)
class USelection : public UObject
{
public:
	unsigned char                                      UnknownData00[0x68];                              		// 0x0028(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Selection");
		return ptr;
	}

};


// Class Engine.DestructibleMesh
// 0x00A0 (0x0360 - 0x02C0)
class UDestructibleMesh : public USkeletalMesh
{
public:
	struct FDestructibleParameters                     DefaultDestructibleParameters;                    		// 0x02C0(0x0088) (CPF_Edit)
	TArray<struct FFractureEffect>                     FractureEffects;                                  		// 0x0348(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                               		// 0x0358(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DestructibleMesh");
		return ptr;
	}

};


// Class Engine.SkeletalMeshReductionSettings
// 0x0018 (0x0040 - 0x0028)
class USkeletalMeshReductionSettings : public UObject
{
public:
	TArray<struct FSkeletalMeshLODGroupSettings>       Settings;                                         		// 0x0028(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	unsigned char                                      UnknownData00[0x8];                               		// 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshReductionSettings");
		return ptr;
	}

};


// Class Engine.SkeletalMeshSocket
// 0x0038 (0x0060 - 0x0028)
class USkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                       		// 0x0028(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	struct FName                                       BoneName;                                         		// 0x0030(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	struct FVector                                     RelativeLocation;                                 		// 0x0038(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                 		// 0x0044(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     RelativeScale;                                    		// 0x0050(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bForceAlwaysAnimated : 1;                         		// 0x005C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshSocket");
		return ptr;
	}


	void InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal);
	struct FVector GetSocketLocation(class USkeletalMeshComponent* SkelComp);
};


// Class Engine.SlateBrushAsset
// 0x0090 (0x00B8 - 0x0028)
class USlateBrushAsset : public UObject
{
public:
	struct FSlateBrush                                 Brush;                                            		// 0x0028(0x0090) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SlateBrushAsset");
		return ptr;
	}

};


// Class Engine.Texture
// 0x00A0 (0x00C8 - 0x0028)
class UTexture : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0028(0x0008) MISSED OFFSET
	struct FGuid                                       LightingGuid;                                     		// 0x0030(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LODBias;                                          		// 0x0040(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumCinematicMipLevels;                            		// 0x0044(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                GlobalLODBias;                                    		// 0x0048(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      SRGB : 1;                                         		// 0x004C(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      NeverStream : 1;                                  		// 0x004C(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bNoTiling : 1;                                    		// 0x004C(0x0001)
	unsigned char                                      bUseCinematicMipLevels : 1;                       		// 0x004C(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData01[0x3];                               		// 0x004D(0x0003) MISSED OFFSET
	TArray<class UAssetUserData*>                      AssetUserData;                                    		// 0x0050(0x0010) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor)
	int                                                CachedCombinedLODBias;                            		// 0x0060(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bAsyncResourceReleaseHasBeenStarted : 1;          		// 0x0064(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData02[0x3];                               		// 0x0065(0x0003) MISSED OFFSET
	TEnumAsByte<enum class TextureCompressionSettings> CompressionSettings;                              		// 0x0068(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class TextureFilter>              Filter;                                           		// 0x0069(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class TextureGroup>               LODGroup;                                         		// 0x006A(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x5D];                              		// 0x006B(0x005D) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture");
		return ptr;
	}

};


// Class Engine.SlateTextureAtlasInterface
// 0x0000 (0x0028 - 0x0028)
class USlateTextureAtlasInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SlateTextureAtlasInterface");
		return ptr;
	}

};


// Class Engine.DialogueSoundWaveProxy
// 0x0018 (0x00A8 - 0x0090)
class UDialogueSoundWaveProxy : public USoundBase
{
public:
	unsigned char                                      UnknownData00[0x18];                              		// 0x0090(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DialogueSoundWaveProxy");
		return ptr;
	}

};


// Class Engine.SoundCue
// 0x0120 (0x01B0 - 0x0090)
class USoundCue : public USoundBase
{
public:
	unsigned char                                      bOverrideAttenuation : 1;                         		// 0x0090(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0091(0x0007) MISSED OFFSET
	class USoundNode*                                  FirstNode;                                        		// 0x0098(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeMultiplier;                                 		// 0x00A0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PitchMultiplier;                                  		// 0x00A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FAttenuationSettings                        AttenuationOverrides;                             		// 0x00A8(0x00F8) (CPF_Edit)
	unsigned char                                      UnknownData01[0x10];                              		// 0x01A0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundCue");
		return ptr;
	}

};


// Class Engine.SoundWaveProcedural
// 0x0080 (0x02E0 - 0x0260)
class USoundWaveProcedural : public USoundWave
{
public:
	unsigned char                                      UnknownData00[0x80];                              		// 0x0260(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundWaveProcedural");
		return ptr;
	}

};


// Class Engine.SoundClass
// 0x0050 (0x0078 - 0x0028)
class USoundClass : public UObject
{
public:
	struct FSoundClassProperties                       Properties;                                       		// 0x0028(0x0024) (CPF_Edit)
	unsigned char                                      UnknownData00[0x4];                               		// 0x004C(0x0004) MISSED OFFSET
	TArray<class USoundClass*>                         ChildClasses;                                     		// 0x0050(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FPassiveSoundMixModifier>            PassiveSoundMixModifiers;                         		// 0x0060(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	class USoundClass*                                 ParentClass;                                      		// 0x0070(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundClass");
		return ptr;
	}

};


// Class Engine.SoundMix
// 0x0060 (0x0088 - 0x0028)
class USoundMix : public UObject
{
public:
	unsigned char                                      bApplyEQ : 1;                                     		// 0x0028(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0029(0x0003) MISSED OFFSET
	float                                              EQPriority;                                       		// 0x002C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FAudioEQEffect                              EQSettings;                                       		// 0x0030(0x0038) (CPF_Edit)
	TArray<struct FSoundClassAdjuster>                 SoundClassEffects;                                		// 0x0068(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	float                                              InitialDelay;                                     		// 0x0078(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FadeInTime;                                       		// 0x007C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Duration;                                         		// 0x0080(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FadeOutTime;                                      		// 0x0084(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundMix");
		return ptr;
	}

};


// Class Engine.SoundNode
// 0x0010 (0x0038 - 0x0028)
class USoundNode : public UObject
{
public:
	TArray<class USoundNode*>                          ChildNodes;                                       		// 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNode");
		return ptr;
	}

};


// Class Engine.SoundNodeAssetReferencer
// 0x0000 (0x0038 - 0x0038)
class USoundNodeAssetReferencer : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeAssetReferencer");
		return ptr;
	}

};


// Class Engine.SoundNodeWavePlayer
// 0x0030 (0x0068 - 0x0038)
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{
public:
	TAssetPtr<class USoundWave>                        SoundWaveAssetPtr;                                		// 0x0038(0x0020) (CPF_Edit)
	class USoundWave*                                  SoundWave;                                        		// 0x0058(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bLooping : 1;                                     		// 0x0060(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeWavePlayer");
		return ptr;
	}

};


// Class Engine.SoundNodeAttenuation
// 0x0108 (0x0140 - 0x0038)
class USoundNodeAttenuation : public USoundNode
{
public:
	class USoundAttenuation*                           AttenuationSettings;                              		// 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FAttenuationSettings                        AttenuationOverrides;                             		// 0x0040(0x00F8) (CPF_Edit)
	unsigned char                                      bOverrideAttenuation : 1;                         		// 0x0138(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeAttenuation");
		return ptr;
	}

};


// Class Engine.SoundNodeBranch
// 0x0008 (0x0040 - 0x0038)
class USoundNodeBranch : public USoundNode
{
public:
	struct FName                                       BoolParameterName;                                		// 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeBranch");
		return ptr;
	}

};


// Class Engine.SoundNodeConcatenator
// 0x0010 (0x0048 - 0x0038)
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                      		// 0x0038(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeConcatenator");
		return ptr;
	}

};


// Class Engine.SoundNodeDelay
// 0x0008 (0x0040 - 0x0038)
class USoundNodeDelay : public USoundNode
{
public:
	float                                              DelayMin;                                         		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DelayMax;                                         		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeDelay");
		return ptr;
	}

};


// Class Engine.SoundNodeDialoguePlayer
// 0x0028 (0x0060 - 0x0038)
class USoundNodeDialoguePlayer : public USoundNode
{
public:
	struct FDialogueWaveParameter                      DialogueWaveParameter;                            		// 0x0038(0x0020) (CPF_Edit)
	unsigned char                                      bLooping : 1;                                     		// 0x0058(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeDialoguePlayer");
		return ptr;
	}

};


// Class Engine.SoundNodeDistanceCrossFade
// 0x0010 (0x0048 - 0x0038)
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<struct FDistanceDatum>                      CrossFadeInput;                                   		// 0x0038(0x0010) (CPF_Edit, CPF_ExportObject, CPF_EditFixedSize, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeDistanceCrossFade");
		return ptr;
	}

};


// Class Engine.SoundNodeParamCrossFade
// 0x0008 (0x0050 - 0x0048)
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{
public:
	struct FName                                       ParamName;                                        		// 0x0048(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeParamCrossFade");
		return ptr;
	}

};


// Class Engine.SoundNodeDoppler
// 0x0008 (0x0040 - 0x0038)
class USoundNodeDoppler : public USoundNode
{
public:
	float                                              DopplerIntensity;                                 		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeDoppler");
		return ptr;
	}

};


// Class Engine.SoundNodeEnveloper
// 0x0138 (0x0170 - 0x0038)
class USoundNodeEnveloper : public USoundNode
{
public:
	float                                              LoopStart;                                        		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LoopEnd;                                          		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DurationAfterLoop;                                		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LoopCount;                                        		// 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLoopIndefinitely : 1;                            		// 0x0048(0x0001) (CPF_Edit)
	unsigned char                                      bLoop : 1;                                        		// 0x0048(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0049(0x0007) MISSED OFFSET
	class UDistributionFloatConstantCurve*             VolumeInterpCurve;                                		// 0x0050(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_Deprecated, CPF_IsPlainOldData)
	class UDistributionFloatConstantCurve*             PitchInterpCurve;                                 		// 0x0058(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_Deprecated, CPF_IsPlainOldData)
	struct FRuntimeFloatCurve                          VolumeCurve;                                      		// 0x0060(0x0080) (CPF_Edit)
	struct FRuntimeFloatCurve                          PitchCurve;                                       		// 0x00E0(0x0080) (CPF_Edit)
	float                                              PitchMin;                                         		// 0x0160(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PitchMax;                                         		// 0x0164(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeMin;                                        		// 0x0168(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeMax;                                        		// 0x016C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeEnveloper");
		return ptr;
	}

};


// Class Engine.SoundNodeGroupControl
// 0x0010 (0x0048 - 0x0038)
class USoundNodeGroupControl : public USoundNode
{
public:
	TArray<int>                                        GroupSizes;                                       		// 0x0038(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeGroupControl");
		return ptr;
	}

};


// Class Engine.SoundNodeLooping
// 0x0008 (0x0040 - 0x0038)
class USoundNodeLooping : public USoundNode
{
public:
	int                                                LoopCount;                                        		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLoopIndefinitely : 1;                            		// 0x003C(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeLooping");
		return ptr;
	}

};


// Class Engine.SoundNodeMature
// 0x0000 (0x0038 - 0x0038)
class USoundNodeMature : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeMature");
		return ptr;
	}

};


// Class Engine.SoundNodeMixer
// 0x0010 (0x0048 - 0x0038)
class USoundNodeMixer : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                      		// 0x0038(0x0010) (CPF_Edit, CPF_ExportObject, CPF_EditFixedSize, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeMixer");
		return ptr;
	}

};


// Class Engine.SoundNodeModulator
// 0x0010 (0x0048 - 0x0038)
class USoundNodeModulator : public USoundNode
{
public:
	float                                              PitchMin;                                         		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PitchMax;                                         		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeMin;                                        		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeMax;                                        		// 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeModulator");
		return ptr;
	}

};


// Class Engine.SoundNodeModulatorContinuous
// 0x0040 (0x0078 - 0x0038)
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FModulatorContinuousParams                  PitchModulationParams;                            		// 0x0038(0x0020) (CPF_Edit)
	struct FModulatorContinuousParams                  VolumeModulationParams;                           		// 0x0058(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeModulatorContinuous");
		return ptr;
	}

};


// Class Engine.SoundNodeOscillator
// 0x0028 (0x0060 - 0x0038)
class USoundNodeOscillator : public USoundNode
{
public:
	unsigned char                                      bModulateVolume : 1;                              		// 0x0038(0x0001) (CPF_Edit)
	unsigned char                                      bModulatePitch : 1;                               		// 0x0038(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0039(0x0003) MISSED OFFSET
	float                                              AmplitudeMin;                                     		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AmplitudeMax;                                     		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FrequencyMin;                                     		// 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FrequencyMax;                                     		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OffsetMin;                                        		// 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OffsetMax;                                        		// 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CenterMin;                                        		// 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CenterMax;                                        		// 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeOscillator");
		return ptr;
	}

};


// Class Engine.SoundNodeQualityLevel
// 0x0000 (0x0038 - 0x0038)
class USoundNodeQualityLevel : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeQualityLevel");
		return ptr;
	}

};


// Class Engine.SoundNodeRandom
// 0x0030 (0x0068 - 0x0038)
class USoundNodeRandom : public USoundNode
{
public:
	TArray<float>                                      Weights;                                          		// 0x0038(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	int                                                PreselectAtLevelLoad;                             		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRandomizeWithoutReplacement : 1;                 		// 0x004C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x004D(0x0003) MISSED OFFSET
	TArray<unsigned char>                              HasBeenUsed;                                      		// 0x0050(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	int                                                NumRandomUsed;                                    		// 0x0060(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeRandom");
		return ptr;
	}

};


// Class Engine.SoundNodeSoundClass
// 0x0008 (0x0040 - 0x0038)
class USoundNodeSoundClass : public USoundNode
{
public:
	class USoundClass*                                 SoundClassOverride;                               		// 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeSoundClass");
		return ptr;
	}

};


// Class Engine.SoundNodeSwitch
// 0x0008 (0x0040 - 0x0038)
class USoundNodeSwitch : public USoundNode
{
public:
	struct FName                                       IntParameterName;                                 		// 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeSwitch");
		return ptr;
	}

};


// Class Engine.SoundNodeWaveParam
// 0x0008 (0x0040 - 0x0038)
class USoundNodeWaveParam : public USoundNode
{
public:
	struct FName                                       WaveParameterName;                                		// 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeWaveParam");
		return ptr;
	}

};


// Class Engine.StaticMesh
// 0x0120 (0x0148 - 0x0028)
class UStaticMesh : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                              		// 0x0028(0x0018) MISSED OFFSET
	TArray<struct FMeshSectionInfoExt>                 SectionInfoExts;                                  		// 0x0040(0x0010) (CPF_ZeroConstructor)
	int                                                MinLOD;                                           		// 0x0050(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0054(0x0004) MISSED OFFSET
	TArray<class UMaterialInterface*>                  Materials;                                        		// 0x0058(0x0010) (CPF_ZeroConstructor, CPF_Deprecated)
	TArray<struct FStaticMaterial>                     StaticMaterials;                                  		// 0x0068(0x0010) (CPF_ZeroConstructor)
	float                                              LightmapUVDensity;                                		// 0x0078(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LightMapResolution;                               		// 0x007C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LightMapCoordinateIndex;                          		// 0x0080(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0084(0x0004) MISSED OFFSET
	class UBodySetup*                                  BodySetup;                                        		// 0x0088(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_DuplicateTransient, CPF_IsPlainOldData)
	int                                                LODForCollision;                                  		// 0x0090(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bStripComplexCollisionForConsole : 1;             		// 0x0094(0x0001) (CPF_Deprecated)
	unsigned char                                      bHasNavigationData : 1;                           		// 0x0094(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData03[0x3];                               		// 0x0095(0x0003) MISSED OFFSET
	float                                              LpvBiasMultiplier;                                		// 0x0098(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAllowCPUAccess : 1;                              		// 0x009C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x33];                              		// 0x009D(0x0033) MISSED OFFSET
	TArray<class UStaticMeshSocket*>                   Sockets;                                          		// 0x00D0(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData05[0x10];                              		// 0x00E0(0x0010) MISSED OFFSET
	struct FVector                                     PositiveBoundsExtension;                          		// 0x00F0(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     NegativeBoundsExtension;                          		// 0x00FC(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FBoxSphereBounds                            ExtendedBounds;                                   		// 0x0108(0x001C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIgnoreDistanceFieldData : 1;                     		// 0x0124(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                               		// 0x0125(0x0003) MISSED OFFSET
	int                                                ElementToIgnoreForTexFactor;                      		// 0x0128(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                               		// 0x012C(0x0004) MISSED OFFSET
	TArray<class UAssetUserData*>                      AssetUserData;                                    		// 0x0130(0x0010) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor)
	class UNavCollision*                               NavCollision;                                     		// 0x0140(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_InstancedReference, CPF_DuplicateTransient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMesh");
		return ptr;
	}


	int GetNumSections(int InLOD);
	int GetNumLODs();
	struct FBoxSphereBounds GetBounds();
	struct FBox GetBoundingBox();
};


// Class Engine.StaticMeshSocket
// 0x0040 (0x0068 - 0x0028)
class UStaticMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                       		// 0x0028(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     RelativeLocation;                                 		// 0x0030(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                 		// 0x003C(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     RelativeScale;                                    		// 0x0048(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0054(0x0004) MISSED OFFSET
	struct FString                                     Tag;                                              		// 0x0058(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshSocket");
		return ptr;
	}

};


// Class Engine.VertexAttributeStream
// 0x0020 (0x0048 - 0x0028)
class UVertexAttributeStream : public UObject
{
public:
	struct FName                                       Usage;                                            		// 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EVertexAttributeStreamType> AttributeType;                                    		// 0x0030(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                               		// 0x0031(0x0007) MISSED OFFSET
	TArray<unsigned char>                              Data;                                             		// 0x0038(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VertexAttributeStream");
		return ptr;
	}

};


// Class Engine.SubDSurface
// 0x0050 (0x0078 - 0x0028)
class USubDSurface : public UObject
{
public:
	TArray<uint32_t>                                   VertexCountPerFace;                               		// 0x0028(0x0010) (CPF_ZeroConstructor)
	TArray<uint32_t>                                   IndicesPerFace;                                   		// 0x0038(0x0010) (CPF_ZeroConstructor)
	TArray<class UVertexAttributeStream*>              VertexAttributeStreams;                           		// 0x0048(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                              		// 0x0058(0x0010) MISSED OFFSET
	TArray<class UMaterialInterface*>                  Materials;                                        		// 0x0068(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SubDSurface");
		return ptr;
	}

};


// Class Engine.SubsurfaceProfile
// 0x0028 (0x0050 - 0x0028)
class USubsurfaceProfile : public UObject
{
public:
	struct FSubsurfaceProfileStruct                    Settings;                                         		// 0x0028(0x0024) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SubsurfaceProfile");
		return ptr;
	}

};


// Class Engine.TextPropertyTestObject
// 0x0048 (0x0070 - 0x0028)
class UTextPropertyTestObject : public UObject
{
public:
	struct FText                                       DefaultedText;                                    		// 0x0028(0x0018)
	struct FText                                       UndefaultedText;                                  		// 0x0040(0x0018)
	struct FText                                       TransientText;                                    		// 0x0058(0x0018)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextPropertyTestObject");
		return ptr;
	}

};


// Class Engine.Texture2D
// 0x0048 (0x0110 - 0x00C8)
class UTexture2D : public UTexture
{
public:
	int                                                RequestedMips;                                    		// 0x00C8(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                ResidentMips;                                     		// 0x00CC(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                StreamingIndex;                                   		// 0x00D0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient, CPF_IsPlainOldData)
	int                                                LevelIndex;                                       		// 0x00D4(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient, CPF_IsPlainOldData)
	int                                                FirstResourceMemMip;                              		// 0x00D8(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FIntPoint                                   ImportedSize;                                     		// 0x00DC(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                               		// 0x00E4(0x0004) MISSED OFFSET
	double                                             ForceMipLevelsToBeResidentTimestamp;              		// 0x00E8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bTemporarilyDisableStreaming : 1;                 		// 0x00F0(0x0001) (CPF_Transient)
	unsigned char                                      bIsStreamable : 1;                                		// 0x00F0(0x0001) (CPF_Transient)
	unsigned char                                      bHasStreamingUpdatePending : 1;                   		// 0x00F0(0x0001) (CPF_Transient)
	unsigned char                                      bHasCancelationPending : 1;                       		// 0x00F0(0x0001) (CPF_Transient)
	unsigned char                                      bForceMiplevelsToBeResident : 1;                  		// 0x00F0(0x0001) (CPF_Transient)
	unsigned char                                      bIgnoreStreamingMipBias : 1;                      		// 0x00F0(0x0001) (CPF_Transient)
	unsigned char                                      bGlobalForceMipLevelsToBeResident : 1;            		// 0x00F0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                               		// 0x00F1(0x0003) MISSED OFFSET
	TEnumAsByte<enum class TextureAddress>             AddressX;                                         		// 0x00F4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class TextureAddress>             AddressY;                                         		// 0x00F5(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x1A];                              		// 0x00F6(0x001A) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture2D");
		return ptr;
	}


	int Blueprint_GetSizeY();
	int Blueprint_GetSizeX();
};


// Class Engine.LightMapTexture2D
// 0x0008 (0x0118 - 0x0110)
class ULightMapTexture2D : public UTexture2D
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0110(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightMapTexture2D");
		return ptr;
	}

};


// Class Engine.ShadowMapTexture2D
// 0x0008 (0x0118 - 0x0110)
class UShadowMapTexture2D : public UTexture2D
{
public:
	TEnumAsByte<enum class EShadowMapFlags>            ShadowmapFlags;                                   		// 0x0110(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShadowMapTexture2D");
		return ptr;
	}

};


// Class Engine.TextureLightProfile
// 0x0008 (0x0118 - 0x0110)
class UTextureLightProfile : public UTexture2D
{
public:
	float                                              Brightness;                                       		// 0x0110(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TextureMultiplier;                                		// 0x0114(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureLightProfile");
		return ptr;
	}

};


// Class Engine.Texture2DDynamic
// 0x0018 (0x00E0 - 0x00C8)
class UTexture2DDynamic : public UTexture
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x00C8(0x0008) MISSED OFFSET
	TEnumAsByte<enum class EPixelFormat>               Format;                                           		// 0x00D0(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                               		// 0x00D1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture2DDynamic");
		return ptr;
	}

};


// Class Engine.TextureCube
// 0x0058 (0x0120 - 0x00C8)
class UTextureCube : public UTexture
{
public:
	unsigned char                                      UnknownData00[0x58];                              		// 0x00C8(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureCube");
		return ptr;
	}

};


// Class Engine.TextureRenderTarget
// 0x0008 (0x00D0 - 0x00C8)
class UTextureRenderTarget : public UTexture
{
public:
	float                                              TargetGamma;                                      		// 0x00C8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureRenderTarget");
		return ptr;
	}

};


// Class Engine.TextureRenderTarget2D
// 0x0028 (0x00F8 - 0x00D0)
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                            		// 0x00D0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SizeY;                                            		// 0x00D4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                ClearColor;                                       		// 0x00D8(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class TextureAddress>             AddressX;                                         		// 0x00E8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class TextureAddress>             AddressY;                                         		// 0x00E9(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                               		// 0x00EA(0x0002) MISSED OFFSET
	unsigned char                                      bForceLinearGamma : 1;                            		// 0x00EC(0x0001)
	unsigned char                                      bHDR : 1;                                         		// 0x00EC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bGPUSharedFlag : 1;                               		// 0x00EC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bAutoGenerateMips : 1;                            		// 0x00EC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                               		// 0x00ED(0x0003) MISSED OFFSET
	TEnumAsByte<enum class EPixelFormat>               OverrideFormat;                                   		// 0x00F0(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureRenderTarget2D");
		return ptr;
	}

};


// Class Engine.CanvasRenderTarget2D
// 0x0020 (0x0118 - 0x00F8)
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{
public:
	struct FScriptMulticastDelegate                    OnCanvasRenderTargetUpdate;                       		// 0x00F8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	TWeakObjectPtr<class UWorld>                       World;                                            		// 0x0108(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bShouldClearRenderTargetOnReceiveUpdate : 1;      		// 0x0110(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CanvasRenderTarget2D");
		return ptr;
	}


	void UpdateResource();
	void ReceiveUpdate(class UCanvas* Canvas, int Width, int Height);
	void GetSize(int* Width, int* Height);
	class UCanvasRenderTarget2D* STATIC_CreateCanvasRenderTarget2D(class UObject* WorldContextObject, class UClass* CanvasRenderTarget2DClass, int Width, int Height);
};


// Class Engine.TextureRenderTargetCube
// 0x0020 (0x00F0 - 0x00D0)
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                            		// 0x00D0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                ClearColor;                                       		// 0x00D4(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EPixelFormat>               OverrideFormat;                                   		// 0x00E4(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x00E5(0x0003) MISSED OFFSET
	unsigned char                                      bHDR : 1;                                         		// 0x00E8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bForceLinearGamma : 1;                            		// 0x00E8(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureRenderTargetCube");
		return ptr;
	}

};


// Class Engine.ThumbnailInfo
// 0x0000 (0x0028 - 0x0028)
class UThumbnailInfo : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ThumbnailInfo");
		return ptr;
	}

};


// Class Engine.TimelineTemplate
// 0x0070 (0x0098 - 0x0028)
class UTimelineTemplate : public UObject
{
public:
	float                                              TimelineLength;                                   		// 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class ETimelineLengthMode>        LengthMode;                                       		// 0x002C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x002D(0x0003) MISSED OFFSET
	unsigned char                                      bAutoPlay : 1;                                    		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      bLoop : 1;                                        		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      bReplicated : 1;                                  		// 0x0030(0x0001) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bValidatedAsWired : 1;                            		// 0x0030(0x0001)
	unsigned char                                      bIgnoreTimeDilation : 1;                          		// 0x0030(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x7];                               		// 0x0031(0x0007) MISSED OFFSET
	TArray<struct FTTEventTrack>                       EventTracks;                                      		// 0x0038(0x0010) (CPF_ZeroConstructor)
	TArray<struct FTTFloatTrack>                       FloatTracks;                                      		// 0x0048(0x0010) (CPF_ZeroConstructor)
	TArray<struct FTTVectorTrack>                      VectorTracks;                                     		// 0x0058(0x0010) (CPF_ZeroConstructor)
	TArray<struct FTTLinearColorTrack>                 LinearColorTracks;                                		// 0x0068(0x0010) (CPF_ZeroConstructor)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                    		// 0x0078(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FGuid                                       TimelineGuid;                                     		// 0x0088(0x0010) (CPF_ZeroConstructor, CPF_DuplicateTransient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TimelineTemplate");
		return ptr;
	}

};


// Class Engine.TouchInterface
// 0x0030 (0x0058 - 0x0028)
class UTouchInterface : public UObject
{
public:
	TArray<struct FTouchInputControl>                  Controls;                                         		// 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	float                                              ActiveOpacity;                                    		// 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              InactiveOpacity;                                  		// 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TimeUntilDeactive;                                		// 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TimeUntilReset;                                   		// 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ActivationDelay;                                  		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPreventRecenter : 1;                             		// 0x004C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x004D(0x0003) MISSED OFFSET
	float                                              StartupDelay;                                     		// 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TouchInterface");
		return ptr;
	}

};


// Class Engine.UserDefinedEnum
// 0x0010 (0x0068 - 0x0058)
class UUserDefinedEnum : public UEnum
{
public:
	TArray<struct FText>                               DisplayNames;                                     		// 0x0058(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UserDefinedEnum");
		return ptr;
	}

};


// Class Engine.VectorField
// 0x0020 (0x0048 - 0x0028)
class UVectorField : public UObject
{
public:
	struct FBox                                        Bounds;                                           		// 0x0028(0x001C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Intensity;                                        		// 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VectorField");
		return ptr;
	}

};


// Class Engine.VectorFieldAnimated
// 0x0040 (0x0088 - 0x0048)
class UVectorFieldAnimated : public UVectorField
{
public:
	class UTexture2D*                                  Texture;                                          		// 0x0048(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<enum class EVectorFieldConstructionOp> ConstructionOp;                                   		// 0x0050(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0051(0x0003) MISSED OFFSET
	int                                                VolumeSizeX;                                      		// 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                VolumeSizeY;                                      		// 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                VolumeSizeZ;                                      		// 0x005C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SubImagesX;                                       		// 0x0060(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SubImagesY;                                       		// 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                FrameCount;                                       		// 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FramesPerSecond;                                  		// 0x006C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLoop : 1;                                        		// 0x0070(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData01[0x7];                               		// 0x0071(0x0007) MISSED OFFSET
	class UVectorFieldStatic*                          NoiseField;                                       		// 0x0078(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NoiseScale;                                       		// 0x0080(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NoiseMax;                                         		// 0x0084(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VectorFieldAnimated");
		return ptr;
	}

};


// Class Engine.VectorFieldStatic
// 0x0090 (0x00D8 - 0x0048)
class UVectorFieldStatic : public UVectorField
{
public:
	int                                                SizeX;                                            		// 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	int                                                SizeY;                                            		// 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	int                                                SizeZ;                                            		// 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x84];                              		// 0x0054(0x0084) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VectorFieldStatic");
		return ptr;
	}

};


// Class Engine.VisualLoggerAutomationTests
// 0x0000 (0x0028 - 0x0028)
class UVisualLoggerAutomationTests : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VisualLoggerAutomationTests");
		return ptr;
	}

};


// Class Engine.VisualLoggerDebugSnapshotInterface
// 0x0000 (0x0028 - 0x0028)
class UVisualLoggerDebugSnapshotInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VisualLoggerDebugSnapshotInterface");
		return ptr;
	}

};


// Class Engine.WorldComposition
// 0x0040 (0x0068 - 0x0028)
class UWorldComposition : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                              		// 0x0028(0x0020) MISSED OFFSET
	TArray<class ULevelStreaming*>                     TilesStreaming;                                   		// 0x0048(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	double                                             TilesStreamingTimeThreshold;                      		// 0x0058(0x0008) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bLoadAllTilesDuringCinematic : 1;                 		// 0x0060(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bRebaseOriginIn3DSpace : 1;                       		// 0x0061(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                               		// 0x0062(0x0002) MISSED OFFSET
	float                                              RebaseOriginDistance;                             		// 0x0064(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WorldComposition");
		return ptr;
	}

};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
